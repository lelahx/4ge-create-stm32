
insa-ge-create-power-meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063d8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a38  08006498  08006498  00007498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ed0  08006ed0  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006ed0  08006ed0  00007ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ed8  08006ed8  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ed8  08006ed8  00007ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006edc  08006edc  00007edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006ee0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ac  20000068  08006f48  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  08006f48  00008614  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a85  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb1  00000000  00000000  0001ab15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  0001d7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df1  00000000  00000000  0001e9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b13  00000000  00000000  0001f791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d73  00000000  00000000  000352a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085011  00000000  00000000  0004b017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0028  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000467c  00000000  00000000  000d006c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000d46e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006480 	.word	0x08006480

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08006480 	.word	0x08006480

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_ldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d115      	bne.n	8000438 <__aeabi_ldivmod+0x30>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d113      	bne.n	8000438 <__aeabi_ldivmod+0x30>
 8000410:	2900      	cmp	r1, #0
 8000412:	db06      	blt.n	8000422 <__aeabi_ldivmod+0x1a>
 8000414:	dc01      	bgt.n	800041a <__aeabi_ldivmod+0x12>
 8000416:	2800      	cmp	r0, #0
 8000418:	d006      	beq.n	8000428 <__aeabi_ldivmod+0x20>
 800041a:	2000      	movs	r0, #0
 800041c:	43c0      	mvns	r0, r0
 800041e:	0841      	lsrs	r1, r0, #1
 8000420:	e002      	b.n	8000428 <__aeabi_ldivmod+0x20>
 8000422:	2180      	movs	r1, #128	@ 0x80
 8000424:	0609      	lsls	r1, r1, #24
 8000426:	2000      	movs	r0, #0
 8000428:	b407      	push	{r0, r1, r2}
 800042a:	4802      	ldr	r0, [pc, #8]	@ (8000434 <__aeabi_ldivmod+0x2c>)
 800042c:	a101      	add	r1, pc, #4	@ (adr r1, 8000434 <__aeabi_ldivmod+0x2c>)
 800042e:	1840      	adds	r0, r0, r1
 8000430:	9002      	str	r0, [sp, #8]
 8000432:	bd03      	pop	{r0, r1, pc}
 8000434:	ffffffd1 	.word	0xffffffd1
 8000438:	b403      	push	{r0, r1}
 800043a:	4668      	mov	r0, sp
 800043c:	b501      	push	{r0, lr}
 800043e:	9802      	ldr	r0, [sp, #8]
 8000440:	f000 f920 	bl	8000684 <__gnu_ldivmod_helper>
 8000444:	9b01      	ldr	r3, [sp, #4]
 8000446:	469e      	mov	lr, r3
 8000448:	b002      	add	sp, #8
 800044a:	bc0c      	pop	{r2, r3}
 800044c:	4770      	bx	lr
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_uldivmod>:
 8000450:	2b00      	cmp	r3, #0
 8000452:	d111      	bne.n	8000478 <__aeabi_uldivmod+0x28>
 8000454:	2a00      	cmp	r2, #0
 8000456:	d10f      	bne.n	8000478 <__aeabi_uldivmod+0x28>
 8000458:	2900      	cmp	r1, #0
 800045a:	d100      	bne.n	800045e <__aeabi_uldivmod+0xe>
 800045c:	2800      	cmp	r0, #0
 800045e:	d002      	beq.n	8000466 <__aeabi_uldivmod+0x16>
 8000460:	2100      	movs	r1, #0
 8000462:	43c9      	mvns	r1, r1
 8000464:	0008      	movs	r0, r1
 8000466:	b407      	push	{r0, r1, r2}
 8000468:	4802      	ldr	r0, [pc, #8]	@ (8000474 <__aeabi_uldivmod+0x24>)
 800046a:	a102      	add	r1, pc, #8	@ (adr r1, 8000474 <__aeabi_uldivmod+0x24>)
 800046c:	1840      	adds	r0, r0, r1
 800046e:	9002      	str	r0, [sp, #8]
 8000470:	bd03      	pop	{r0, r1, pc}
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	ffffff91 	.word	0xffffff91
 8000478:	b403      	push	{r0, r1}
 800047a:	4668      	mov	r0, sp
 800047c:	b501      	push	{r0, lr}
 800047e:	9802      	ldr	r0, [sp, #8]
 8000480:	f000 f834 	bl	80004ec <__udivmoddi4>
 8000484:	9b01      	ldr	r3, [sp, #4]
 8000486:	469e      	mov	lr, r3
 8000488:	b002      	add	sp, #8
 800048a:	bc0c      	pop	{r2, r3}
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_lmul>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	46ce      	mov	lr, r9
 8000494:	4699      	mov	r9, r3
 8000496:	0c03      	lsrs	r3, r0, #16
 8000498:	469c      	mov	ip, r3
 800049a:	0413      	lsls	r3, r2, #16
 800049c:	4647      	mov	r7, r8
 800049e:	0c1b      	lsrs	r3, r3, #16
 80004a0:	001d      	movs	r5, r3
 80004a2:	000e      	movs	r6, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	0404      	lsls	r4, r0, #16
 80004a8:	0c24      	lsrs	r4, r4, #16
 80004aa:	b580      	push	{r7, lr}
 80004ac:	0007      	movs	r7, r0
 80004ae:	0c10      	lsrs	r0, r2, #16
 80004b0:	434b      	muls	r3, r1
 80004b2:	4365      	muls	r5, r4
 80004b4:	4341      	muls	r1, r0
 80004b6:	4360      	muls	r0, r4
 80004b8:	0c2c      	lsrs	r4, r5, #16
 80004ba:	18c0      	adds	r0, r0, r3
 80004bc:	1824      	adds	r4, r4, r0
 80004be:	468c      	mov	ip, r1
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d903      	bls.n	80004cc <__aeabi_lmul+0x3c>
 80004c4:	2380      	movs	r3, #128	@ 0x80
 80004c6:	025b      	lsls	r3, r3, #9
 80004c8:	4698      	mov	r8, r3
 80004ca:	44c4      	add	ip, r8
 80004cc:	4649      	mov	r1, r9
 80004ce:	4379      	muls	r1, r7
 80004d0:	4356      	muls	r6, r2
 80004d2:	0c23      	lsrs	r3, r4, #16
 80004d4:	042d      	lsls	r5, r5, #16
 80004d6:	0c2d      	lsrs	r5, r5, #16
 80004d8:	1989      	adds	r1, r1, r6
 80004da:	4463      	add	r3, ip
 80004dc:	0424      	lsls	r4, r4, #16
 80004de:	1960      	adds	r0, r4, r5
 80004e0:	18c9      	adds	r1, r1, r3
 80004e2:	bcc0      	pop	{r6, r7}
 80004e4:	46b9      	mov	r9, r7
 80004e6:	46b0      	mov	r8, r6
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)

080004ec <__udivmoddi4>:
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	4657      	mov	r7, sl
 80004f0:	464e      	mov	r6, r9
 80004f2:	4645      	mov	r5, r8
 80004f4:	46de      	mov	lr, fp
 80004f6:	b5e0      	push	{r5, r6, r7, lr}
 80004f8:	0004      	movs	r4, r0
 80004fa:	000d      	movs	r5, r1
 80004fc:	4692      	mov	sl, r2
 80004fe:	4699      	mov	r9, r3
 8000500:	b083      	sub	sp, #12
 8000502:	428b      	cmp	r3, r1
 8000504:	d830      	bhi.n	8000568 <__udivmoddi4+0x7c>
 8000506:	d02d      	beq.n	8000564 <__udivmoddi4+0x78>
 8000508:	4649      	mov	r1, r9
 800050a:	4650      	mov	r0, sl
 800050c:	f000 f8f6 	bl	80006fc <__clzdi2>
 8000510:	0029      	movs	r1, r5
 8000512:	0006      	movs	r6, r0
 8000514:	0020      	movs	r0, r4
 8000516:	f000 f8f1 	bl	80006fc <__clzdi2>
 800051a:	1a33      	subs	r3, r6, r0
 800051c:	4698      	mov	r8, r3
 800051e:	3b20      	subs	r3, #32
 8000520:	d434      	bmi.n	800058c <__udivmoddi4+0xa0>
 8000522:	469b      	mov	fp, r3
 8000524:	4653      	mov	r3, sl
 8000526:	465a      	mov	r2, fp
 8000528:	4093      	lsls	r3, r2
 800052a:	4642      	mov	r2, r8
 800052c:	001f      	movs	r7, r3
 800052e:	4653      	mov	r3, sl
 8000530:	4093      	lsls	r3, r2
 8000532:	001e      	movs	r6, r3
 8000534:	42af      	cmp	r7, r5
 8000536:	d83b      	bhi.n	80005b0 <__udivmoddi4+0xc4>
 8000538:	42af      	cmp	r7, r5
 800053a:	d100      	bne.n	800053e <__udivmoddi4+0x52>
 800053c:	e079      	b.n	8000632 <__udivmoddi4+0x146>
 800053e:	465b      	mov	r3, fp
 8000540:	1ba4      	subs	r4, r4, r6
 8000542:	41bd      	sbcs	r5, r7
 8000544:	2b00      	cmp	r3, #0
 8000546:	da00      	bge.n	800054a <__udivmoddi4+0x5e>
 8000548:	e076      	b.n	8000638 <__udivmoddi4+0x14c>
 800054a:	2200      	movs	r2, #0
 800054c:	2300      	movs	r3, #0
 800054e:	9200      	str	r2, [sp, #0]
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	465a      	mov	r2, fp
 8000556:	4093      	lsls	r3, r2
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	2301      	movs	r3, #1
 800055c:	4642      	mov	r2, r8
 800055e:	4093      	lsls	r3, r2
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	e029      	b.n	80005b8 <__udivmoddi4+0xcc>
 8000564:	4282      	cmp	r2, r0
 8000566:	d9cf      	bls.n	8000508 <__udivmoddi4+0x1c>
 8000568:	2200      	movs	r2, #0
 800056a:	2300      	movs	r3, #0
 800056c:	9200      	str	r2, [sp, #0]
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <__udivmoddi4+0x8e>
 8000576:	601c      	str	r4, [r3, #0]
 8000578:	605d      	str	r5, [r3, #4]
 800057a:	9800      	ldr	r0, [sp, #0]
 800057c:	9901      	ldr	r1, [sp, #4]
 800057e:	b003      	add	sp, #12
 8000580:	bcf0      	pop	{r4, r5, r6, r7}
 8000582:	46bb      	mov	fp, r7
 8000584:	46b2      	mov	sl, r6
 8000586:	46a9      	mov	r9, r5
 8000588:	46a0      	mov	r8, r4
 800058a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800058c:	4642      	mov	r2, r8
 800058e:	469b      	mov	fp, r3
 8000590:	2320      	movs	r3, #32
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	4652      	mov	r2, sl
 8000596:	40da      	lsrs	r2, r3
 8000598:	4641      	mov	r1, r8
 800059a:	0013      	movs	r3, r2
 800059c:	464a      	mov	r2, r9
 800059e:	408a      	lsls	r2, r1
 80005a0:	0017      	movs	r7, r2
 80005a2:	4642      	mov	r2, r8
 80005a4:	431f      	orrs	r7, r3
 80005a6:	4653      	mov	r3, sl
 80005a8:	4093      	lsls	r3, r2
 80005aa:	001e      	movs	r6, r3
 80005ac:	42af      	cmp	r7, r5
 80005ae:	d9c3      	bls.n	8000538 <__udivmoddi4+0x4c>
 80005b0:	2200      	movs	r2, #0
 80005b2:	2300      	movs	r3, #0
 80005b4:	9200      	str	r2, [sp, #0]
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	4643      	mov	r3, r8
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d0d8      	beq.n	8000570 <__udivmoddi4+0x84>
 80005be:	07fb      	lsls	r3, r7, #31
 80005c0:	0872      	lsrs	r2, r6, #1
 80005c2:	431a      	orrs	r2, r3
 80005c4:	4646      	mov	r6, r8
 80005c6:	087b      	lsrs	r3, r7, #1
 80005c8:	e00e      	b.n	80005e8 <__udivmoddi4+0xfc>
 80005ca:	42ab      	cmp	r3, r5
 80005cc:	d101      	bne.n	80005d2 <__udivmoddi4+0xe6>
 80005ce:	42a2      	cmp	r2, r4
 80005d0:	d80c      	bhi.n	80005ec <__udivmoddi4+0x100>
 80005d2:	1aa4      	subs	r4, r4, r2
 80005d4:	419d      	sbcs	r5, r3
 80005d6:	2001      	movs	r0, #1
 80005d8:	1924      	adds	r4, r4, r4
 80005da:	416d      	adcs	r5, r5
 80005dc:	2100      	movs	r1, #0
 80005de:	3e01      	subs	r6, #1
 80005e0:	1824      	adds	r4, r4, r0
 80005e2:	414d      	adcs	r5, r1
 80005e4:	2e00      	cmp	r6, #0
 80005e6:	d006      	beq.n	80005f6 <__udivmoddi4+0x10a>
 80005e8:	42ab      	cmp	r3, r5
 80005ea:	d9ee      	bls.n	80005ca <__udivmoddi4+0xde>
 80005ec:	3e01      	subs	r6, #1
 80005ee:	1924      	adds	r4, r4, r4
 80005f0:	416d      	adcs	r5, r5
 80005f2:	2e00      	cmp	r6, #0
 80005f4:	d1f8      	bne.n	80005e8 <__udivmoddi4+0xfc>
 80005f6:	9800      	ldr	r0, [sp, #0]
 80005f8:	9901      	ldr	r1, [sp, #4]
 80005fa:	465b      	mov	r3, fp
 80005fc:	1900      	adds	r0, r0, r4
 80005fe:	4169      	adcs	r1, r5
 8000600:	2b00      	cmp	r3, #0
 8000602:	db24      	blt.n	800064e <__udivmoddi4+0x162>
 8000604:	002b      	movs	r3, r5
 8000606:	465a      	mov	r2, fp
 8000608:	4644      	mov	r4, r8
 800060a:	40d3      	lsrs	r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	40e2      	lsrs	r2, r4
 8000610:	001c      	movs	r4, r3
 8000612:	465b      	mov	r3, fp
 8000614:	0015      	movs	r5, r2
 8000616:	2b00      	cmp	r3, #0
 8000618:	db2a      	blt.n	8000670 <__udivmoddi4+0x184>
 800061a:	0026      	movs	r6, r4
 800061c:	409e      	lsls	r6, r3
 800061e:	0033      	movs	r3, r6
 8000620:	0026      	movs	r6, r4
 8000622:	4647      	mov	r7, r8
 8000624:	40be      	lsls	r6, r7
 8000626:	0032      	movs	r2, r6
 8000628:	1a80      	subs	r0, r0, r2
 800062a:	4199      	sbcs	r1, r3
 800062c:	9000      	str	r0, [sp, #0]
 800062e:	9101      	str	r1, [sp, #4]
 8000630:	e79e      	b.n	8000570 <__udivmoddi4+0x84>
 8000632:	42a3      	cmp	r3, r4
 8000634:	d8bc      	bhi.n	80005b0 <__udivmoddi4+0xc4>
 8000636:	e782      	b.n	800053e <__udivmoddi4+0x52>
 8000638:	4642      	mov	r2, r8
 800063a:	2320      	movs	r3, #32
 800063c:	2100      	movs	r1, #0
 800063e:	1a9b      	subs	r3, r3, r2
 8000640:	2200      	movs	r2, #0
 8000642:	9100      	str	r1, [sp, #0]
 8000644:	9201      	str	r2, [sp, #4]
 8000646:	2201      	movs	r2, #1
 8000648:	40da      	lsrs	r2, r3
 800064a:	9201      	str	r2, [sp, #4]
 800064c:	e785      	b.n	800055a <__udivmoddi4+0x6e>
 800064e:	4642      	mov	r2, r8
 8000650:	2320      	movs	r3, #32
 8000652:	1a9b      	subs	r3, r3, r2
 8000654:	002a      	movs	r2, r5
 8000656:	4646      	mov	r6, r8
 8000658:	409a      	lsls	r2, r3
 800065a:	0023      	movs	r3, r4
 800065c:	40f3      	lsrs	r3, r6
 800065e:	4644      	mov	r4, r8
 8000660:	4313      	orrs	r3, r2
 8000662:	002a      	movs	r2, r5
 8000664:	40e2      	lsrs	r2, r4
 8000666:	001c      	movs	r4, r3
 8000668:	465b      	mov	r3, fp
 800066a:	0015      	movs	r5, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	dad4      	bge.n	800061a <__udivmoddi4+0x12e>
 8000670:	4642      	mov	r2, r8
 8000672:	002f      	movs	r7, r5
 8000674:	2320      	movs	r3, #32
 8000676:	0026      	movs	r6, r4
 8000678:	4097      	lsls	r7, r2
 800067a:	1a9b      	subs	r3, r3, r2
 800067c:	40de      	lsrs	r6, r3
 800067e:	003b      	movs	r3, r7
 8000680:	4333      	orrs	r3, r6
 8000682:	e7cd      	b.n	8000620 <__udivmoddi4+0x134>

08000684 <__gnu_ldivmod_helper>:
 8000684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000686:	46ce      	mov	lr, r9
 8000688:	4647      	mov	r7, r8
 800068a:	b580      	push	{r7, lr}
 800068c:	4691      	mov	r9, r2
 800068e:	4698      	mov	r8, r3
 8000690:	0004      	movs	r4, r0
 8000692:	000d      	movs	r5, r1
 8000694:	f000 f83e 	bl	8000714 <__divdi3>
 8000698:	0007      	movs	r7, r0
 800069a:	000e      	movs	r6, r1
 800069c:	0002      	movs	r2, r0
 800069e:	000b      	movs	r3, r1
 80006a0:	4648      	mov	r0, r9
 80006a2:	4641      	mov	r1, r8
 80006a4:	f7ff fef4 	bl	8000490 <__aeabi_lmul>
 80006a8:	1a24      	subs	r4, r4, r0
 80006aa:	418d      	sbcs	r5, r1
 80006ac:	9b08      	ldr	r3, [sp, #32]
 80006ae:	0038      	movs	r0, r7
 80006b0:	0031      	movs	r1, r6
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	bcc0      	pop	{r6, r7}
 80006b8:	46b9      	mov	r9, r7
 80006ba:	46b0      	mov	r8, r6
 80006bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006be:	46c0      	nop			@ (mov r8, r8)

080006c0 <__clzsi2>:
 80006c0:	211c      	movs	r1, #28
 80006c2:	2301      	movs	r3, #1
 80006c4:	041b      	lsls	r3, r3, #16
 80006c6:	4298      	cmp	r0, r3
 80006c8:	d301      	bcc.n	80006ce <__clzsi2+0xe>
 80006ca:	0c00      	lsrs	r0, r0, #16
 80006cc:	3910      	subs	r1, #16
 80006ce:	0a1b      	lsrs	r3, r3, #8
 80006d0:	4298      	cmp	r0, r3
 80006d2:	d301      	bcc.n	80006d8 <__clzsi2+0x18>
 80006d4:	0a00      	lsrs	r0, r0, #8
 80006d6:	3908      	subs	r1, #8
 80006d8:	091b      	lsrs	r3, r3, #4
 80006da:	4298      	cmp	r0, r3
 80006dc:	d301      	bcc.n	80006e2 <__clzsi2+0x22>
 80006de:	0900      	lsrs	r0, r0, #4
 80006e0:	3904      	subs	r1, #4
 80006e2:	a202      	add	r2, pc, #8	@ (adr r2, 80006ec <__clzsi2+0x2c>)
 80006e4:	5c10      	ldrb	r0, [r2, r0]
 80006e6:	1840      	adds	r0, r0, r1
 80006e8:	4770      	bx	lr
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	02020304 	.word	0x02020304
 80006f0:	01010101 	.word	0x01010101
	...

080006fc <__clzdi2>:
 80006fc:	b510      	push	{r4, lr}
 80006fe:	2900      	cmp	r1, #0
 8000700:	d103      	bne.n	800070a <__clzdi2+0xe>
 8000702:	f7ff ffdd 	bl	80006c0 <__clzsi2>
 8000706:	3020      	adds	r0, #32
 8000708:	e002      	b.n	8000710 <__clzdi2+0x14>
 800070a:	0008      	movs	r0, r1
 800070c:	f7ff ffd8 	bl	80006c0 <__clzsi2>
 8000710:	bd10      	pop	{r4, pc}
 8000712:	46c0      	nop			@ (mov r8, r8)

08000714 <__divdi3>:
 8000714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000716:	464f      	mov	r7, r9
 8000718:	4646      	mov	r6, r8
 800071a:	46d6      	mov	lr, sl
 800071c:	b5c0      	push	{r6, r7, lr}
 800071e:	0006      	movs	r6, r0
 8000720:	000f      	movs	r7, r1
 8000722:	0010      	movs	r0, r2
 8000724:	0019      	movs	r1, r3
 8000726:	b082      	sub	sp, #8
 8000728:	2f00      	cmp	r7, #0
 800072a:	db5d      	blt.n	80007e8 <__divdi3+0xd4>
 800072c:	0034      	movs	r4, r6
 800072e:	003d      	movs	r5, r7
 8000730:	2b00      	cmp	r3, #0
 8000732:	db0b      	blt.n	800074c <__divdi3+0x38>
 8000734:	0016      	movs	r6, r2
 8000736:	001f      	movs	r7, r3
 8000738:	42ab      	cmp	r3, r5
 800073a:	d917      	bls.n	800076c <__divdi3+0x58>
 800073c:	2000      	movs	r0, #0
 800073e:	2100      	movs	r1, #0
 8000740:	b002      	add	sp, #8
 8000742:	bce0      	pop	{r5, r6, r7}
 8000744:	46ba      	mov	sl, r7
 8000746:	46b1      	mov	r9, r6
 8000748:	46a8      	mov	r8, r5
 800074a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800074c:	2700      	movs	r7, #0
 800074e:	4246      	negs	r6, r0
 8000750:	418f      	sbcs	r7, r1
 8000752:	42af      	cmp	r7, r5
 8000754:	d8f2      	bhi.n	800073c <__divdi3+0x28>
 8000756:	d100      	bne.n	800075a <__divdi3+0x46>
 8000758:	e0a0      	b.n	800089c <__divdi3+0x188>
 800075a:	2301      	movs	r3, #1
 800075c:	425b      	negs	r3, r3
 800075e:	4699      	mov	r9, r3
 8000760:	e009      	b.n	8000776 <__divdi3+0x62>
 8000762:	2700      	movs	r7, #0
 8000764:	4246      	negs	r6, r0
 8000766:	418f      	sbcs	r7, r1
 8000768:	42af      	cmp	r7, r5
 800076a:	d8e7      	bhi.n	800073c <__divdi3+0x28>
 800076c:	42af      	cmp	r7, r5
 800076e:	d100      	bne.n	8000772 <__divdi3+0x5e>
 8000770:	e090      	b.n	8000894 <__divdi3+0x180>
 8000772:	2300      	movs	r3, #0
 8000774:	4699      	mov	r9, r3
 8000776:	0039      	movs	r1, r7
 8000778:	0030      	movs	r0, r6
 800077a:	f7ff ffbf 	bl	80006fc <__clzdi2>
 800077e:	4680      	mov	r8, r0
 8000780:	0029      	movs	r1, r5
 8000782:	0020      	movs	r0, r4
 8000784:	f7ff ffba 	bl	80006fc <__clzdi2>
 8000788:	4643      	mov	r3, r8
 800078a:	1a1b      	subs	r3, r3, r0
 800078c:	4698      	mov	r8, r3
 800078e:	3b20      	subs	r3, #32
 8000790:	d475      	bmi.n	800087e <__divdi3+0x16a>
 8000792:	0031      	movs	r1, r6
 8000794:	4099      	lsls	r1, r3
 8000796:	469a      	mov	sl, r3
 8000798:	000b      	movs	r3, r1
 800079a:	0031      	movs	r1, r6
 800079c:	4640      	mov	r0, r8
 800079e:	4081      	lsls	r1, r0
 80007a0:	000a      	movs	r2, r1
 80007a2:	42ab      	cmp	r3, r5
 80007a4:	d82e      	bhi.n	8000804 <__divdi3+0xf0>
 80007a6:	d02b      	beq.n	8000800 <__divdi3+0xec>
 80007a8:	4651      	mov	r1, sl
 80007aa:	1aa4      	subs	r4, r4, r2
 80007ac:	419d      	sbcs	r5, r3
 80007ae:	2900      	cmp	r1, #0
 80007b0:	da00      	bge.n	80007b4 <__divdi3+0xa0>
 80007b2:	e090      	b.n	80008d6 <__divdi3+0x1c2>
 80007b4:	2100      	movs	r1, #0
 80007b6:	2000      	movs	r0, #0
 80007b8:	2601      	movs	r6, #1
 80007ba:	9000      	str	r0, [sp, #0]
 80007bc:	9101      	str	r1, [sp, #4]
 80007be:	4651      	mov	r1, sl
 80007c0:	408e      	lsls	r6, r1
 80007c2:	9601      	str	r6, [sp, #4]
 80007c4:	4641      	mov	r1, r8
 80007c6:	2601      	movs	r6, #1
 80007c8:	408e      	lsls	r6, r1
 80007ca:	4641      	mov	r1, r8
 80007cc:	9600      	str	r6, [sp, #0]
 80007ce:	2900      	cmp	r1, #0
 80007d0:	d11f      	bne.n	8000812 <__divdi3+0xfe>
 80007d2:	9800      	ldr	r0, [sp, #0]
 80007d4:	9901      	ldr	r1, [sp, #4]
 80007d6:	464b      	mov	r3, r9
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d0b1      	beq.n	8000740 <__divdi3+0x2c>
 80007dc:	0003      	movs	r3, r0
 80007de:	000c      	movs	r4, r1
 80007e0:	2100      	movs	r1, #0
 80007e2:	4258      	negs	r0, r3
 80007e4:	41a1      	sbcs	r1, r4
 80007e6:	e7ab      	b.n	8000740 <__divdi3+0x2c>
 80007e8:	2500      	movs	r5, #0
 80007ea:	4274      	negs	r4, r6
 80007ec:	41bd      	sbcs	r5, r7
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	dbb7      	blt.n	8000762 <__divdi3+0x4e>
 80007f2:	0016      	movs	r6, r2
 80007f4:	001f      	movs	r7, r3
 80007f6:	42ab      	cmp	r3, r5
 80007f8:	d8a0      	bhi.n	800073c <__divdi3+0x28>
 80007fa:	42af      	cmp	r7, r5
 80007fc:	d1ad      	bne.n	800075a <__divdi3+0x46>
 80007fe:	e04d      	b.n	800089c <__divdi3+0x188>
 8000800:	42a1      	cmp	r1, r4
 8000802:	d9d1      	bls.n	80007a8 <__divdi3+0x94>
 8000804:	2100      	movs	r1, #0
 8000806:	2000      	movs	r0, #0
 8000808:	9000      	str	r0, [sp, #0]
 800080a:	9101      	str	r1, [sp, #4]
 800080c:	4641      	mov	r1, r8
 800080e:	2900      	cmp	r1, #0
 8000810:	d0df      	beq.n	80007d2 <__divdi3+0xbe>
 8000812:	07d9      	lsls	r1, r3, #31
 8000814:	0856      	lsrs	r6, r2, #1
 8000816:	085f      	lsrs	r7, r3, #1
 8000818:	430e      	orrs	r6, r1
 800081a:	4643      	mov	r3, r8
 800081c:	e00e      	b.n	800083c <__divdi3+0x128>
 800081e:	42af      	cmp	r7, r5
 8000820:	d101      	bne.n	8000826 <__divdi3+0x112>
 8000822:	42a6      	cmp	r6, r4
 8000824:	d80c      	bhi.n	8000840 <__divdi3+0x12c>
 8000826:	1ba4      	subs	r4, r4, r6
 8000828:	41bd      	sbcs	r5, r7
 800082a:	2101      	movs	r1, #1
 800082c:	1924      	adds	r4, r4, r4
 800082e:	416d      	adcs	r5, r5
 8000830:	2200      	movs	r2, #0
 8000832:	3b01      	subs	r3, #1
 8000834:	1864      	adds	r4, r4, r1
 8000836:	4155      	adcs	r5, r2
 8000838:	2b00      	cmp	r3, #0
 800083a:	d006      	beq.n	800084a <__divdi3+0x136>
 800083c:	42af      	cmp	r7, r5
 800083e:	d9ee      	bls.n	800081e <__divdi3+0x10a>
 8000840:	3b01      	subs	r3, #1
 8000842:	1924      	adds	r4, r4, r4
 8000844:	416d      	adcs	r5, r5
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1f8      	bne.n	800083c <__divdi3+0x128>
 800084a:	9a00      	ldr	r2, [sp, #0]
 800084c:	9b01      	ldr	r3, [sp, #4]
 800084e:	4651      	mov	r1, sl
 8000850:	1912      	adds	r2, r2, r4
 8000852:	416b      	adcs	r3, r5
 8000854:	2900      	cmp	r1, #0
 8000856:	db25      	blt.n	80008a4 <__divdi3+0x190>
 8000858:	002e      	movs	r6, r5
 800085a:	002c      	movs	r4, r5
 800085c:	40ce      	lsrs	r6, r1
 800085e:	4641      	mov	r1, r8
 8000860:	40cc      	lsrs	r4, r1
 8000862:	4651      	mov	r1, sl
 8000864:	2900      	cmp	r1, #0
 8000866:	db2d      	blt.n	80008c4 <__divdi3+0x1b0>
 8000868:	0034      	movs	r4, r6
 800086a:	408c      	lsls	r4, r1
 800086c:	0021      	movs	r1, r4
 800086e:	4644      	mov	r4, r8
 8000870:	40a6      	lsls	r6, r4
 8000872:	0030      	movs	r0, r6
 8000874:	1a12      	subs	r2, r2, r0
 8000876:	418b      	sbcs	r3, r1
 8000878:	9200      	str	r2, [sp, #0]
 800087a:	9301      	str	r3, [sp, #4]
 800087c:	e7a9      	b.n	80007d2 <__divdi3+0xbe>
 800087e:	4642      	mov	r2, r8
 8000880:	0038      	movs	r0, r7
 8000882:	469a      	mov	sl, r3
 8000884:	2320      	movs	r3, #32
 8000886:	0031      	movs	r1, r6
 8000888:	4090      	lsls	r0, r2
 800088a:	1a9b      	subs	r3, r3, r2
 800088c:	40d9      	lsrs	r1, r3
 800088e:	0003      	movs	r3, r0
 8000890:	430b      	orrs	r3, r1
 8000892:	e782      	b.n	800079a <__divdi3+0x86>
 8000894:	42a6      	cmp	r6, r4
 8000896:	d900      	bls.n	800089a <__divdi3+0x186>
 8000898:	e750      	b.n	800073c <__divdi3+0x28>
 800089a:	e76a      	b.n	8000772 <__divdi3+0x5e>
 800089c:	42a6      	cmp	r6, r4
 800089e:	d800      	bhi.n	80008a2 <__divdi3+0x18e>
 80008a0:	e75b      	b.n	800075a <__divdi3+0x46>
 80008a2:	e74b      	b.n	800073c <__divdi3+0x28>
 80008a4:	4640      	mov	r0, r8
 80008a6:	2120      	movs	r1, #32
 80008a8:	1a09      	subs	r1, r1, r0
 80008aa:	0028      	movs	r0, r5
 80008ac:	4088      	lsls	r0, r1
 80008ae:	0026      	movs	r6, r4
 80008b0:	0001      	movs	r1, r0
 80008b2:	4640      	mov	r0, r8
 80008b4:	40c6      	lsrs	r6, r0
 80008b6:	002c      	movs	r4, r5
 80008b8:	430e      	orrs	r6, r1
 80008ba:	4641      	mov	r1, r8
 80008bc:	40cc      	lsrs	r4, r1
 80008be:	4651      	mov	r1, sl
 80008c0:	2900      	cmp	r1, #0
 80008c2:	dad1      	bge.n	8000868 <__divdi3+0x154>
 80008c4:	4640      	mov	r0, r8
 80008c6:	2120      	movs	r1, #32
 80008c8:	0035      	movs	r5, r6
 80008ca:	4084      	lsls	r4, r0
 80008cc:	1a09      	subs	r1, r1, r0
 80008ce:	40cd      	lsrs	r5, r1
 80008d0:	0021      	movs	r1, r4
 80008d2:	4329      	orrs	r1, r5
 80008d4:	e7cb      	b.n	800086e <__divdi3+0x15a>
 80008d6:	4641      	mov	r1, r8
 80008d8:	2620      	movs	r6, #32
 80008da:	2701      	movs	r7, #1
 80008dc:	1a76      	subs	r6, r6, r1
 80008de:	2000      	movs	r0, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	40f7      	lsrs	r7, r6
 80008e4:	9000      	str	r0, [sp, #0]
 80008e6:	9101      	str	r1, [sp, #4]
 80008e8:	9701      	str	r7, [sp, #4]
 80008ea:	e76b      	b.n	80007c4 <__divdi3+0xb0>

080008ec <CREATE_InstMenu>:
/* USER CODE BEGIN 0 */

// Fonctions projet CREATE

// Draws INST menu
void CREATE_InstMenu(ScreenText* text_buffers) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

	sprintf(text_buffers->line1, "INST VALS");
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a21      	ldr	r2, [pc, #132]	@ (800097c <CREATE_InstMenu+0x90>)
 80008f8:	0011      	movs	r1, r2
 80008fa:	0018      	movs	r0, r3
 80008fc:	f005 f922 	bl	8005b44 <siprintf>
	sprintf(text_buffers->line2, "%05u mV  %5d mA", instant.voltage, instant.current);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3314      	adds	r3, #20
 8000904:	0018      	movs	r0, r3
 8000906:	4b1e      	ldr	r3, [pc, #120]	@ (8000980 <CREATE_InstMenu+0x94>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	001a      	movs	r2, r3
 800090c:	4b1c      	ldr	r3, [pc, #112]	@ (8000980 <CREATE_InstMenu+0x94>)
 800090e:	2102      	movs	r1, #2
 8000910:	5e5b      	ldrsh	r3, [r3, r1]
 8000912:	491c      	ldr	r1, [pc, #112]	@ (8000984 <CREATE_InstMenu+0x98>)
 8000914:	f005 f916 	bl	8005b44 <siprintf>
	sprintf(text_buffers->line3, "P= %12ld mW", instant.power);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3328      	adds	r3, #40	@ 0x28
 800091c:	0018      	movs	r0, r3
 800091e:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <CREATE_InstMenu+0x94>)
 8000920:	685a      	ldr	r2, [r3, #4]
 8000922:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <CREATE_InstMenu+0x9c>)
 8000924:	0019      	movs	r1, r3
 8000926:	f005 f90d 	bl	8005b44 <siprintf>
	ssd1306_SetCursor(0, 0);
 800092a:	2100      	movs	r1, #0
 800092c:	2000      	movs	r0, #0
 800092e:	f001 fc83 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line1, Font_7x10, White);
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	4a15      	ldr	r2, [pc, #84]	@ (800098c <CREATE_InstMenu+0xa0>)
 8000936:	2301      	movs	r3, #1
 8000938:	6811      	ldr	r1, [r2, #0]
 800093a:	6852      	ldr	r2, [r2, #4]
 800093c:	f001 fc52 	bl	80021e4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 11);
 8000940:	210b      	movs	r1, #11
 8000942:	2000      	movs	r0, #0
 8000944:	f001 fc78 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line2, Font_7x10, White);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3314      	adds	r3, #20
 800094c:	0018      	movs	r0, r3
 800094e:	4a0f      	ldr	r2, [pc, #60]	@ (800098c <CREATE_InstMenu+0xa0>)
 8000950:	2301      	movs	r3, #1
 8000952:	6811      	ldr	r1, [r2, #0]
 8000954:	6852      	ldr	r2, [r2, #4]
 8000956:	f001 fc45 	bl	80021e4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 22);
 800095a:	2116      	movs	r1, #22
 800095c:	2000      	movs	r0, #0
 800095e:	f001 fc6b 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line3, Font_7x10, White);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3328      	adds	r3, #40	@ 0x28
 8000966:	0018      	movs	r0, r3
 8000968:	4a08      	ldr	r2, [pc, #32]	@ (800098c <CREATE_InstMenu+0xa0>)
 800096a:	2301      	movs	r3, #1
 800096c:	6811      	ldr	r1, [r2, #0]
 800096e:	6852      	ldr	r2, [r2, #4]
 8000970:	f001 fc38 	bl	80021e4 <ssd1306_WriteString>
}
 8000974:	46c0      	nop			@ (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b002      	add	sp, #8
 800097a:	bd80      	pop	{r7, pc}
 800097c:	08006498 	.word	0x08006498
 8000980:	20000204 	.word	0x20000204
 8000984:	080064a4 	.word	0x080064a4
 8000988:	080064b4 	.word	0x080064b4
 800098c:	20000008 	.word	0x20000008

08000990 <CREATE_CalcMenu>:

// Draws CALC menu
void CREATE_CalcMenu(ScreenText* text_buffers) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

	if (button_state) {
 8000998:	4b26      	ldr	r3, [pc, #152]	@ (8000a34 <CREATE_CalcMenu+0xa4>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d008      	beq.n	80009b2 <CREATE_CalcMenu+0x22>
		timestamp = 0;
 80009a0:	4b25      	ldr	r3, [pc, #148]	@ (8000a38 <CREATE_CalcMenu+0xa8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
		ram_session.energy = 0;
 80009a6:	4b25      	ldr	r3, [pc, #148]	@ (8000a3c <CREATE_CalcMenu+0xac>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
		ram_session.average_power = 0;
 80009ac:	4b23      	ldr	r3, [pc, #140]	@ (8000a3c <CREATE_CalcMenu+0xac>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
	}

	sprintf(text_buffers->line1, "CALC VALS");
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a22      	ldr	r2, [pc, #136]	@ (8000a40 <CREATE_CalcMenu+0xb0>)
 80009b6:	0011      	movs	r1, r2
 80009b8:	0018      	movs	r0, r3
 80009ba:	f005 f8c3 	bl	8005b44 <siprintf>
	sprintf(text_buffers->line2, "E= %11ld uWh", ram_session.energy);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3314      	adds	r3, #20
 80009c2:	0018      	movs	r0, r3
 80009c4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a3c <CREATE_CalcMenu+0xac>)
 80009c6:	68da      	ldr	r2, [r3, #12]
 80009c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a44 <CREATE_CalcMenu+0xb4>)
 80009ca:	0019      	movs	r1, r3
 80009cc:	f005 f8ba 	bl	8005b44 <siprintf>
	sprintf(text_buffers->line3, "P_avg= %8ld mW", ram_session.average_power);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3328      	adds	r3, #40	@ 0x28
 80009d4:	0018      	movs	r0, r3
 80009d6:	4b19      	ldr	r3, [pc, #100]	@ (8000a3c <CREATE_CalcMenu+0xac>)
 80009d8:	691a      	ldr	r2, [r3, #16]
 80009da:	4b1b      	ldr	r3, [pc, #108]	@ (8000a48 <CREATE_CalcMenu+0xb8>)
 80009dc:	0019      	movs	r1, r3
 80009de:	f005 f8b1 	bl	8005b44 <siprintf>
	ssd1306_SetCursor(0, 0);
 80009e2:	2100      	movs	r1, #0
 80009e4:	2000      	movs	r0, #0
 80009e6:	f001 fc27 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line1, Font_7x10, White);
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	4a17      	ldr	r2, [pc, #92]	@ (8000a4c <CREATE_CalcMenu+0xbc>)
 80009ee:	2301      	movs	r3, #1
 80009f0:	6811      	ldr	r1, [r2, #0]
 80009f2:	6852      	ldr	r2, [r2, #4]
 80009f4:	f001 fbf6 	bl	80021e4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 11);
 80009f8:	210b      	movs	r1, #11
 80009fa:	2000      	movs	r0, #0
 80009fc:	f001 fc1c 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line2, Font_7x10, White);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3314      	adds	r3, #20
 8000a04:	0018      	movs	r0, r3
 8000a06:	4a11      	ldr	r2, [pc, #68]	@ (8000a4c <CREATE_CalcMenu+0xbc>)
 8000a08:	2301      	movs	r3, #1
 8000a0a:	6811      	ldr	r1, [r2, #0]
 8000a0c:	6852      	ldr	r2, [r2, #4]
 8000a0e:	f001 fbe9 	bl	80021e4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 22);
 8000a12:	2116      	movs	r1, #22
 8000a14:	2000      	movs	r0, #0
 8000a16:	f001 fc0f 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line3, Font_7x10, White);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3328      	adds	r3, #40	@ 0x28
 8000a1e:	0018      	movs	r0, r3
 8000a20:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <CREATE_CalcMenu+0xbc>)
 8000a22:	2301      	movs	r3, #1
 8000a24:	6811      	ldr	r1, [r2, #0]
 8000a26:	6852      	ldr	r2, [r2, #4]
 8000a28:	f001 fbdc 	bl	80021e4 <ssd1306_WriteString>
}
 8000a2c:	46c0      	nop			@ (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b002      	add	sp, #8
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200001fe 	.word	0x200001fe
 8000a38:	20000200 	.word	0x20000200
 8000a3c:	2000020c 	.word	0x2000020c
 8000a40:	080064c0 	.word	0x080064c0
 8000a44:	080064cc 	.word	0x080064cc
 8000a48:	080064dc 	.word	0x080064dc
 8000a4c:	20000008 	.word	0x20000008

08000a50 <CREATE_PeakMenu>:

// Draws PEAK menu
void CREATE_PeakMenu(ScreenText* text_buffers) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

	if (button_state) ram_session.peak = (Survey){0}; // Reset peak values
 8000a58:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <CREATE_PeakMenu+0xa8>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d006      	beq.n	8000a6e <CREATE_PeakMenu+0x1e>
 8000a60:	4b26      	ldr	r3, [pc, #152]	@ (8000afc <CREATE_PeakMenu+0xac>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	2308      	movs	r3, #8
 8000a66:	001a      	movs	r2, r3
 8000a68:	2100      	movs	r1, #0
 8000a6a:	f005 f89f 	bl	8005bac <memset>

	sprintf(text_buffers->line1, "PEAK VALS");
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a23      	ldr	r2, [pc, #140]	@ (8000b00 <CREATE_PeakMenu+0xb0>)
 8000a72:	0011      	movs	r1, r2
 8000a74:	0018      	movs	r0, r3
 8000a76:	f005 f865 	bl	8005b44 <siprintf>
	sprintf(text_buffers->line2, "%05u mV  %5d mA", ram_session.peak.voltage, ram_session.peak.current);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3314      	adds	r3, #20
 8000a7e:	0018      	movs	r0, r3
 8000a80:	4b1e      	ldr	r3, [pc, #120]	@ (8000afc <CREATE_PeakMenu+0xac>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	001a      	movs	r2, r3
 8000a86:	4b1d      	ldr	r3, [pc, #116]	@ (8000afc <CREATE_PeakMenu+0xac>)
 8000a88:	2102      	movs	r1, #2
 8000a8a:	5e5b      	ldrsh	r3, [r3, r1]
 8000a8c:	491d      	ldr	r1, [pc, #116]	@ (8000b04 <CREATE_PeakMenu+0xb4>)
 8000a8e:	f005 f859 	bl	8005b44 <siprintf>
	sprintf(text_buffers->line3, "P_pk= %9ld mW", ram_session.peak.power);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3328      	adds	r3, #40	@ 0x28
 8000a96:	0018      	movs	r0, r3
 8000a98:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <CREATE_PeakMenu+0xac>)
 8000a9a:	685a      	ldr	r2, [r3, #4]
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b08 <CREATE_PeakMenu+0xb8>)
 8000a9e:	0019      	movs	r1, r3
 8000aa0:	f005 f850 	bl	8005b44 <siprintf>
	ssd1306_SetCursor(0, 0);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f001 fbc6 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line1, Font_7x10, White);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	4a17      	ldr	r2, [pc, #92]	@ (8000b0c <CREATE_PeakMenu+0xbc>)
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	6811      	ldr	r1, [r2, #0]
 8000ab4:	6852      	ldr	r2, [r2, #4]
 8000ab6:	f001 fb95 	bl	80021e4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 11);
 8000aba:	210b      	movs	r1, #11
 8000abc:	2000      	movs	r0, #0
 8000abe:	f001 fbbb 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line2, Font_7x10, White);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3314      	adds	r3, #20
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	4a10      	ldr	r2, [pc, #64]	@ (8000b0c <CREATE_PeakMenu+0xbc>)
 8000aca:	2301      	movs	r3, #1
 8000acc:	6811      	ldr	r1, [r2, #0]
 8000ace:	6852      	ldr	r2, [r2, #4]
 8000ad0:	f001 fb88 	bl	80021e4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 22);
 8000ad4:	2116      	movs	r1, #22
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f001 fbae 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line3, Font_7x10, White);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3328      	adds	r3, #40	@ 0x28
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b0c <CREATE_PeakMenu+0xbc>)
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	6811      	ldr	r1, [r2, #0]
 8000ae8:	6852      	ldr	r2, [r2, #4]
 8000aea:	f001 fb7b 	bl	80021e4 <ssd1306_WriteString>
}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b004      	add	sp, #16
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	200001fe 	.word	0x200001fe
 8000afc:	2000020c 	.word	0x2000020c
 8000b00:	080064ec 	.word	0x080064ec
 8000b04:	080064a4 	.word	0x080064a4
 8000b08:	080064f8 	.word	0x080064f8
 8000b0c:	20000008 	.word	0x20000008

08000b10 <CREATE_GraphMenu>:

// Draws GRAPH menu
void CREATE_GraphMenu(ScreenText* text_buffers) {
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

	ssd1306_Fill(Black); // Clear screen
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f001 fa17 	bl	8001f4c <ssd1306_Fill>

	for (uint8_t i = 0; i < SCREEN_WIDTH; ++i) {
 8000b1e:	230f      	movs	r3, #15
 8000b20:	18fb      	adds	r3, r7, r3
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
 8000b26:	e026      	b.n	8000b76 <CREATE_GraphMenu+0x66>
		uint8_t p = (i + plot.front+1)%SCREEN_WIDTH; // Walk the plot buffer starting from plot.front+1 and wrapping around up to plot.front
 8000b28:	230f      	movs	r3, #15
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	4a22      	ldr	r2, [pc, #136]	@ (8000bb8 <CREATE_GraphMenu+0xa8>)
 8000b30:	2180      	movs	r1, #128	@ 0x80
 8000b32:	5c52      	ldrb	r2, [r2, r1]
 8000b34:	189b      	adds	r3, r3, r2
 8000b36:	3301      	adds	r3, #1
 8000b38:	4a20      	ldr	r2, [pc, #128]	@ (8000bbc <CREATE_GraphMenu+0xac>)
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	d504      	bpl.n	8000b48 <CREATE_GraphMenu+0x38>
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	2280      	movs	r2, #128	@ 0x80
 8000b42:	4252      	negs	r2, r2
 8000b44:	4313      	orrs	r3, r2
 8000b46:	3301      	adds	r3, #1
 8000b48:	001a      	movs	r2, r3
 8000b4a:	210e      	movs	r1, #14
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	701a      	strb	r2, [r3, #0]

		// Draw pixel at appropriate height and position
		ssd1306_DrawPixel(i, SCREEN_HEIGHT-1 - plot.buffer[p], White);
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4a18      	ldr	r2, [pc, #96]	@ (8000bb8 <CREATE_GraphMenu+0xa8>)
 8000b56:	5cd3      	ldrb	r3, [r2, r3]
 8000b58:	221f      	movs	r2, #31
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	b2d9      	uxtb	r1, r3
 8000b5e:	240f      	movs	r4, #15
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2201      	movs	r2, #1
 8000b66:	0018      	movs	r0, r3
 8000b68:	f001 fa42 	bl	8001ff0 <ssd1306_DrawPixel>
	for (uint8_t i = 0; i < SCREEN_WIDTH; ++i) {
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	193a      	adds	r2, r7, r4
 8000b70:	7812      	ldrb	r2, [r2, #0]
 8000b72:	3201      	adds	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	230f      	movs	r3, #15
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	dad2      	bge.n	8000b28 <CREATE_GraphMenu+0x18>
	}

	// Add instant power readout
	sprintf(text_buffers->line3, "%07ld mW", instant.power);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3328      	adds	r3, #40	@ 0x28
 8000b86:	0018      	movs	r0, r3
 8000b88:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc0 <CREATE_GraphMenu+0xb0>)
 8000b8a:	685a      	ldr	r2, [r3, #4]
 8000b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc4 <CREATE_GraphMenu+0xb4>)
 8000b8e:	0019      	movs	r1, r3
 8000b90:	f004 ffd8 	bl	8005b44 <siprintf>
	ssd1306_SetCursor(0, 22);
 8000b94:	2116      	movs	r1, #22
 8000b96:	2000      	movs	r0, #0
 8000b98:	f001 fb4e 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line3, Font_7x10, White);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3328      	adds	r3, #40	@ 0x28
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	4a09      	ldr	r2, [pc, #36]	@ (8000bc8 <CREATE_GraphMenu+0xb8>)
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	6811      	ldr	r1, [r2, #0]
 8000ba8:	6852      	ldr	r2, [r2, #4]
 8000baa:	f001 fb1b 	bl	80021e4 <ssd1306_WriteString>
}
 8000bae:	46c0      	nop			@ (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b005      	add	sp, #20
 8000bb4:	bd90      	pop	{r4, r7, pc}
 8000bb6:	46c0      	nop			@ (mov r8, r8)
 8000bb8:	20000220 	.word	0x20000220
 8000bbc:	8000007f 	.word	0x8000007f
 8000bc0:	20000204 	.word	0x20000204
 8000bc4:	08006508 	.word	0x08006508
 8000bc8:	20000008 	.word	0x20000008

08000bcc <CREATE_MemMenu>:

// Draws MEM menu
void CREATE_MemMenu(ScreenText* text_buffers) {
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]

	sprintf(text_buffers->line1, "MEMORY");
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a31      	ldr	r2, [pc, #196]	@ (8000c9c <CREATE_MemMenu+0xd0>)
 8000bd8:	0011      	movs	r1, r2
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f004 ffb2 	bl	8005b44 <siprintf>
	sprintf(text_buffers->line2, "Push to save!");
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3314      	adds	r3, #20
 8000be4:	4a2e      	ldr	r2, [pc, #184]	@ (8000ca0 <CREATE_MemMenu+0xd4>)
 8000be6:	0011      	movs	r1, r2
 8000be8:	0018      	movs	r0, r3
 8000bea:	f004 ffab 	bl	8005b44 <siprintf>
	sprintf(text_buffers->line3, "                   ");
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3328      	adds	r3, #40	@ 0x28
 8000bf2:	4a2c      	ldr	r2, [pc, #176]	@ (8000ca4 <CREATE_MemMenu+0xd8>)
 8000bf4:	0011      	movs	r1, r2
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f004 ffa4 	bl	8005b44 <siprintf>
	ssd1306_SetCursor(0, 0);
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f001 fb1a 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line1, Font_7x10, White);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	4a28      	ldr	r2, [pc, #160]	@ (8000ca8 <CREATE_MemMenu+0xdc>)
 8000c08:	2301      	movs	r3, #1
 8000c0a:	6811      	ldr	r1, [r2, #0]
 8000c0c:	6852      	ldr	r2, [r2, #4]
 8000c0e:	f001 fae9 	bl	80021e4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 11);
 8000c12:	210b      	movs	r1, #11
 8000c14:	2000      	movs	r0, #0
 8000c16:	f001 fb0f 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line2, Font_7x10, White);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3314      	adds	r3, #20
 8000c1e:	0018      	movs	r0, r3
 8000c20:	4a21      	ldr	r2, [pc, #132]	@ (8000ca8 <CREATE_MemMenu+0xdc>)
 8000c22:	2301      	movs	r3, #1
 8000c24:	6811      	ldr	r1, [r2, #0]
 8000c26:	6852      	ldr	r2, [r2, #4]
 8000c28:	f001 fadc 	bl	80021e4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 22);
 8000c2c:	2116      	movs	r1, #22
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f001 fb02 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line3, Font_7x10, White);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3328      	adds	r3, #40	@ 0x28
 8000c38:	0018      	movs	r0, r3
 8000c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca8 <CREATE_MemMenu+0xdc>)
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	6811      	ldr	r1, [r2, #0]
 8000c40:	6852      	ldr	r2, [r2, #4]
 8000c42:	f001 facf 	bl	80021e4 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8000c46:	f001 f9a5 	bl	8001f94 <ssd1306_UpdateScreen>


	if (!button_down) return;
 8000c4a:	4b18      	ldr	r3, [pc, #96]	@ (8000cac <CREATE_MemMenu+0xe0>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d020      	beq.n	8000c94 <CREATE_MemMenu+0xc8>

	persistent_data->last_session = ram_session;
 8000c52:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <CREATE_MemMenu+0xe4>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a17      	ldr	r2, [pc, #92]	@ (8000cb4 <CREATE_MemMenu+0xe8>)
 8000c58:	3304      	adds	r3, #4
 8000c5a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c5c:	c313      	stmia	r3!, {r0, r1, r4}
 8000c5e:	ca03      	ldmia	r2!, {r0, r1}
 8000c60:	c303      	stmia	r3!, {r0, r1}
	FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000c62:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <CREATE_MemMenu+0xec>)
 8000c64:	0018      	movs	r0, r3
 8000c66:	f002 f859 	bl	8002d1c <FLASH_WaitForLastOperation>

	sprintf(text_buffers->line3, "       SAVED       ");
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3328      	adds	r3, #40	@ 0x28
 8000c6e:	4a13      	ldr	r2, [pc, #76]	@ (8000cbc <CREATE_MemMenu+0xf0>)
 8000c70:	0011      	movs	r1, r2
 8000c72:	0018      	movs	r0, r3
 8000c74:	f004 ff66 	bl	8005b44 <siprintf>
	ssd1306_SetCursor(0, 22);
 8000c78:	2116      	movs	r1, #22
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f001 fadc 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line3, Font_7x10, White);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3328      	adds	r3, #40	@ 0x28
 8000c84:	0018      	movs	r0, r3
 8000c86:	4a08      	ldr	r2, [pc, #32]	@ (8000ca8 <CREATE_MemMenu+0xdc>)
 8000c88:	2301      	movs	r3, #1
 8000c8a:	6811      	ldr	r1, [r2, #0]
 8000c8c:	6852      	ldr	r2, [r2, #4]
 8000c8e:	f001 faa9 	bl	80021e4 <ssd1306_WriteString>
 8000c92:	e000      	b.n	8000c96 <CREATE_MemMenu+0xca>
	if (!button_down) return;
 8000c94:	46c0      	nop			@ (mov r8, r8)
}
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b003      	add	sp, #12
 8000c9a:	bd90      	pop	{r4, r7, pc}
 8000c9c:	08006514 	.word	0x08006514
 8000ca0:	0800651c 	.word	0x0800651c
 8000ca4:	0800652c 	.word	0x0800652c
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	200001ff 	.word	0x200001ff
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	2000020c 	.word	0x2000020c
 8000cb8:	0000c350 	.word	0x0000c350
 8000cbc:	08006540 	.word	0x08006540

08000cc0 <CREATE_Stat1Menu>:

// Draws STAT1 menu
void CREATE_Stat1Menu(ScreenText* text_buffers) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

	sprintf(text_buffers->line1, "STATS SAVED");
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a23      	ldr	r2, [pc, #140]	@ (8000d58 <CREATE_Stat1Menu+0x98>)
 8000ccc:	0011      	movs	r1, r2
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f004 ff38 	bl	8005b44 <siprintf>
	sprintf(text_buffers->line2, "%05u mV  %5d mA", persistent_data->last_session.peak.voltage, persistent_data->last_session.peak.current);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3314      	adds	r3, #20
 8000cd8:	0018      	movs	r0, r3
 8000cda:	4b20      	ldr	r3, [pc, #128]	@ (8000d5c <CREATE_Stat1Menu+0x9c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	889b      	ldrh	r3, [r3, #4]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	001a      	movs	r2, r3
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d5c <CREATE_Stat1Menu+0x9c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	88db      	ldrh	r3, [r3, #6]
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	491c      	ldr	r1, [pc, #112]	@ (8000d60 <CREATE_Stat1Menu+0xa0>)
 8000cee:	f004 ff29 	bl	8005b44 <siprintf>
	sprintf(text_buffers->line3, "P_pk= %9ld mW", persistent_data->last_session.peak.power);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3328      	adds	r3, #40	@ 0x28
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <CREATE_Stat1Menu+0x9c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <CREATE_Stat1Menu+0xa4>)
 8000d00:	0019      	movs	r1, r3
 8000d02:	f004 ff1f 	bl	8005b44 <siprintf>
	ssd1306_SetCursor(0, 0);
 8000d06:	2100      	movs	r1, #0
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f001 fa95 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line1, Font_7x10, White);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	4a15      	ldr	r2, [pc, #84]	@ (8000d68 <CREATE_Stat1Menu+0xa8>)
 8000d12:	2301      	movs	r3, #1
 8000d14:	6811      	ldr	r1, [r2, #0]
 8000d16:	6852      	ldr	r2, [r2, #4]
 8000d18:	f001 fa64 	bl	80021e4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 11);
 8000d1c:	210b      	movs	r1, #11
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f001 fa8a 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line2, Font_7x10, White);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3314      	adds	r3, #20
 8000d28:	0018      	movs	r0, r3
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d68 <CREATE_Stat1Menu+0xa8>)
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	6811      	ldr	r1, [r2, #0]
 8000d30:	6852      	ldr	r2, [r2, #4]
 8000d32:	f001 fa57 	bl	80021e4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 22);
 8000d36:	2116      	movs	r1, #22
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f001 fa7d 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line3, Font_7x10, White);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	3328      	adds	r3, #40	@ 0x28
 8000d42:	0018      	movs	r0, r3
 8000d44:	4a08      	ldr	r2, [pc, #32]	@ (8000d68 <CREATE_Stat1Menu+0xa8>)
 8000d46:	2301      	movs	r3, #1
 8000d48:	6811      	ldr	r1, [r2, #0]
 8000d4a:	6852      	ldr	r2, [r2, #4]
 8000d4c:	f001 fa4a 	bl	80021e4 <ssd1306_WriteString>

}
 8000d50:	46c0      	nop			@ (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b002      	add	sp, #8
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	08006554 	.word	0x08006554
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	080064a4 	.word	0x080064a4
 8000d64:	080064f8 	.word	0x080064f8
 8000d68:	20000008 	.word	0x20000008

08000d6c <CREATE_Stat2Menu>:

// Draws STAT2 menu
void CREATE_Stat2Menu(ScreenText* text_buffers) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]

	sprintf(text_buffers->line1, "Duration= %6lu s", persistent_data->last_session.duration);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	4b22      	ldr	r3, [pc, #136]	@ (8000e00 <CREATE_Stat2Menu+0x94>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	4b21      	ldr	r3, [pc, #132]	@ (8000e04 <CREATE_Stat2Menu+0x98>)
 8000d7e:	0019      	movs	r1, r3
 8000d80:	f004 fee0 	bl	8005b44 <siprintf>
	sprintf(text_buffers->line2, "E= %11ld uWh", persistent_data->last_session.energy);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3314      	adds	r3, #20
 8000d88:	0018      	movs	r0, r3
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e00 <CREATE_Stat2Menu+0x94>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	691a      	ldr	r2, [r3, #16]
 8000d90:	4b1d      	ldr	r3, [pc, #116]	@ (8000e08 <CREATE_Stat2Menu+0x9c>)
 8000d92:	0019      	movs	r1, r3
 8000d94:	f004 fed6 	bl	8005b44 <siprintf>
	sprintf(text_buffers->line3, "P_avg= %8ld mW", persistent_data->last_session.average_power);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3328      	adds	r3, #40	@ 0x28
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <CREATE_Stat2Menu+0x94>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	695a      	ldr	r2, [r3, #20]
 8000da4:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <CREATE_Stat2Menu+0xa0>)
 8000da6:	0019      	movs	r1, r3
 8000da8:	f004 fecc 	bl	8005b44 <siprintf>
	ssd1306_SetCursor(0, 0);
 8000dac:	2100      	movs	r1, #0
 8000dae:	2000      	movs	r0, #0
 8000db0:	f001 fa42 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line1, Font_7x10, White);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	4a16      	ldr	r2, [pc, #88]	@ (8000e10 <CREATE_Stat2Menu+0xa4>)
 8000db8:	2301      	movs	r3, #1
 8000dba:	6811      	ldr	r1, [r2, #0]
 8000dbc:	6852      	ldr	r2, [r2, #4]
 8000dbe:	f001 fa11 	bl	80021e4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 11);
 8000dc2:	210b      	movs	r1, #11
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f001 fa37 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line2, Font_7x10, White);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3314      	adds	r3, #20
 8000dce:	0018      	movs	r0, r3
 8000dd0:	4a0f      	ldr	r2, [pc, #60]	@ (8000e10 <CREATE_Stat2Menu+0xa4>)
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	6811      	ldr	r1, [r2, #0]
 8000dd6:	6852      	ldr	r2, [r2, #4]
 8000dd8:	f001 fa04 	bl	80021e4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 22);
 8000ddc:	2116      	movs	r1, #22
 8000dde:	2000      	movs	r0, #0
 8000de0:	f001 fa2a 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line3, Font_7x10, White);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3328      	adds	r3, #40	@ 0x28
 8000de8:	0018      	movs	r0, r3
 8000dea:	4a09      	ldr	r2, [pc, #36]	@ (8000e10 <CREATE_Stat2Menu+0xa4>)
 8000dec:	2301      	movs	r3, #1
 8000dee:	6811      	ldr	r1, [r2, #0]
 8000df0:	6852      	ldr	r2, [r2, #4]
 8000df2:	f001 f9f7 	bl	80021e4 <ssd1306_WriteString>

}
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b002      	add	sp, #8
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	20000000 	.word	0x20000000
 8000e04:	08006560 	.word	0x08006560
 8000e08:	080064cc 	.word	0x080064cc
 8000e0c:	080064dc 	.word	0x080064dc
 8000e10:	20000008 	.word	0x20000008

08000e14 <CREATE_CommMenu>:

// Draws COMM menu
void CREATE_CommMenu(ScreenText* text_buffers) {
 8000e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e16:	46ce      	mov	lr, r9
 8000e18:	4647      	mov	r7, r8
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b0ab      	sub	sp, #172	@ 0xac
 8000e1e:	af06      	add	r7, sp, #24
 8000e20:	6078      	str	r0, [r7, #4]

	sprintf(text_buffers->line1, "RT COMMUNICATION");
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a41      	ldr	r2, [pc, #260]	@ (8000f2c <CREATE_CommMenu+0x118>)
 8000e26:	0011      	movs	r1, r2
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f004 fe8b 	bl	8005b44 <siprintf>
	sprintf(text_buffers->line2, "Serial: %s", persistent_data->rt_comm ? "ON " : "OFF");
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3314      	adds	r3, #20
 8000e32:	0018      	movs	r0, r3
 8000e34:	4b3e      	ldr	r3, [pc, #248]	@ (8000f30 <CREATE_CommMenu+0x11c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	7e1b      	ldrb	r3, [r3, #24]
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <CREATE_CommMenu+0x30>
 8000e40:	4b3c      	ldr	r3, [pc, #240]	@ (8000f34 <CREATE_CommMenu+0x120>)
 8000e42:	e000      	b.n	8000e46 <CREATE_CommMenu+0x32>
 8000e44:	4b3c      	ldr	r3, [pc, #240]	@ (8000f38 <CREATE_CommMenu+0x124>)
 8000e46:	493d      	ldr	r1, [pc, #244]	@ (8000f3c <CREATE_CommMenu+0x128>)
 8000e48:	001a      	movs	r2, r3
 8000e4a:	f004 fe7b 	bl	8005b44 <siprintf>
	ssd1306_SetCursor(0, 0);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2000      	movs	r0, #0
 8000e52:	f001 f9f1 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line1, Font_7x10, White);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	4a39      	ldr	r2, [pc, #228]	@ (8000f40 <CREATE_CommMenu+0x12c>)
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	6811      	ldr	r1, [r2, #0]
 8000e5e:	6852      	ldr	r2, [r2, #4]
 8000e60:	f001 f9c0 	bl	80021e4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 11);
 8000e64:	210b      	movs	r1, #11
 8000e66:	2000      	movs	r0, #0
 8000e68:	f001 f9e6 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line2, Font_7x10, White);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3314      	adds	r3, #20
 8000e70:	0018      	movs	r0, r3
 8000e72:	4a33      	ldr	r2, [pc, #204]	@ (8000f40 <CREATE_CommMenu+0x12c>)
 8000e74:	2301      	movs	r3, #1
 8000e76:	6811      	ldr	r1, [r2, #0]
 8000e78:	6852      	ldr	r2, [r2, #4]
 8000e7a:	f001 f9b3 	bl	80021e4 <ssd1306_WriteString>

	if (persistent_data->rt_comm) {
 8000e7e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f30 <CREATE_CommMenu+0x11c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	7e1b      	ldrb	r3, [r3, #24]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d032      	beq.n	8000ef0 <CREATE_CommMenu+0xdc>
		char msg[130];
		int size = sprintf(msg,
		                   "INST: %05u mV, %5d mA, %9ld mW" CRLF
		                   "CALC: %10ld uWh, %8ld mW" CRLF
		                   "PEAK: %05u mV, %5d mA, %9ld mW" CRLF CRLF,
		                   instant.voltage, instant.current, instant.power,
 8000e8a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f44 <CREATE_CommMenu+0x130>)
 8000e8c:	881b      	ldrh	r3, [r3, #0]
		int size = sprintf(msg,
 8000e8e:	4698      	mov	r8, r3
		                   instant.voltage, instant.current, instant.power,
 8000e90:	4b2c      	ldr	r3, [pc, #176]	@ (8000f44 <CREATE_CommMenu+0x130>)
 8000e92:	2202      	movs	r2, #2
 8000e94:	5e9b      	ldrsh	r3, [r3, r2]
		int size = sprintf(msg,
 8000e96:	4699      	mov	r9, r3
 8000e98:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <CREATE_CommMenu+0x130>)
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f48 <CREATE_CommMenu+0x134>)
 8000e9e:	68d9      	ldr	r1, [r3, #12]
 8000ea0:	4b29      	ldr	r3, [pc, #164]	@ (8000f48 <CREATE_CommMenu+0x134>)
 8000ea2:	6918      	ldr	r0, [r3, #16]
		                   ram_session.energy, ram_session.average_power,
		                   ram_session.peak.voltage, ram_session.peak.current, ram_session.peak.power);
 8000ea4:	4b28      	ldr	r3, [pc, #160]	@ (8000f48 <CREATE_CommMenu+0x134>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
		int size = sprintf(msg,
 8000ea8:	001e      	movs	r6, r3
		                   ram_session.peak.voltage, ram_session.peak.current, ram_session.peak.power);
 8000eaa:	4b27      	ldr	r3, [pc, #156]	@ (8000f48 <CREATE_CommMenu+0x134>)
 8000eac:	2402      	movs	r4, #2
 8000eae:	5f1b      	ldrsh	r3, [r3, r4]
		int size = sprintf(msg,
 8000eb0:	469c      	mov	ip, r3
 8000eb2:	4b25      	ldr	r3, [pc, #148]	@ (8000f48 <CREATE_CommMenu+0x134>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	4d25      	ldr	r5, [pc, #148]	@ (8000f4c <CREATE_CommMenu+0x138>)
 8000eb8:	2408      	movs	r4, #8
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	9305      	str	r3, [sp, #20]
 8000ebe:	4663      	mov	r3, ip
 8000ec0:	9304      	str	r3, [sp, #16]
 8000ec2:	9603      	str	r6, [sp, #12]
 8000ec4:	9002      	str	r0, [sp, #8]
 8000ec6:	9101      	str	r1, [sp, #4]
 8000ec8:	9200      	str	r2, [sp, #0]
 8000eca:	464b      	mov	r3, r9
 8000ecc:	4642      	mov	r2, r8
 8000ece:	0029      	movs	r1, r5
 8000ed0:	0020      	movs	r0, r4
 8000ed2:	f004 fe37 	bl	8005b44 <siprintf>
 8000ed6:	0003      	movs	r3, r0
 8000ed8:	228c      	movs	r2, #140	@ 0x8c
 8000eda:	18b9      	adds	r1, r7, r2
 8000edc:	600b      	str	r3, [r1, #0]

		HAL_UART_Transmit(&huart1, (uint8_t*)msg, size, 10);
 8000ede:	18bb      	adds	r3, r7, r2
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	2408      	movs	r4, #8
 8000ee6:	1939      	adds	r1, r7, r4
 8000ee8:	4819      	ldr	r0, [pc, #100]	@ (8000f50 <CREATE_CommMenu+0x13c>)
 8000eea:	230a      	movs	r3, #10
 8000eec:	f004 f8d6 	bl	800509c <HAL_UART_Transmit>
	}

	if (button_down) persistent_data->rt_comm = !persistent_data->rt_comm;
 8000ef0:	4b18      	ldr	r3, [pc, #96]	@ (8000f54 <CREATE_CommMenu+0x140>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d011      	beq.n	8000f1c <CREATE_CommMenu+0x108>
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f30 <CREATE_CommMenu+0x11c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	7e1b      	ldrb	r3, [r3, #24]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	1e5a      	subs	r2, r3, #1
 8000f02:	4193      	sbcs	r3, r2
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2201      	movs	r2, #1
 8000f08:	4053      	eors	r3, r2
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <CREATE_CommMenu+0x11c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	1c11      	adds	r1, r2, #0
 8000f14:	2201      	movs	r2, #1
 8000f16:	400a      	ands	r2, r1
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	761a      	strb	r2, [r3, #24]
}
 8000f1c:	46c0      	nop			@ (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b025      	add	sp, #148	@ 0x94
 8000f22:	bcc0      	pop	{r6, r7}
 8000f24:	46b9      	mov	r9, r7
 8000f26:	46b0      	mov	r8, r6
 8000f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f2a:	46c0      	nop			@ (mov r8, r8)
 8000f2c:	08006574 	.word	0x08006574
 8000f30:	20000000 	.word	0x20000000
 8000f34:	08006588 	.word	0x08006588
 8000f38:	0800658c 	.word	0x0800658c
 8000f3c:	08006590 	.word	0x08006590
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000204 	.word	0x20000204
 8000f48:	2000020c 	.word	0x2000020c
 8000f4c:	0800659c 	.word	0x0800659c
 8000f50:	20000174 	.word	0x20000174
 8000f54:	200001ff 	.word	0x200001ff

08000f58 <CREATE_DumpMenu>:

// Draws DUMP menu
void CREATE_DumpMenu(ScreenText* text_buffers) {
 8000f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f5a:	b0af      	sub	sp, #188	@ 0xbc
 8000f5c:	af04      	add	r7, sp, #16
 8000f5e:	6078      	str	r0, [r7, #4]

	sprintf(text_buffers->line1, "DUMP SESSION");
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a47      	ldr	r2, [pc, #284]	@ (8001080 <CREATE_DumpMenu+0x128>)
 8000f64:	0011      	movs	r1, r2
 8000f66:	0018      	movs	r0, r3
 8000f68:	f004 fdec 	bl	8005b44 <siprintf>
	sprintf(text_buffers->line2, "Push to UART-dump!");
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3314      	adds	r3, #20
 8000f70:	4a44      	ldr	r2, [pc, #272]	@ (8001084 <CREATE_DumpMenu+0x12c>)
 8000f72:	0011      	movs	r1, r2
 8000f74:	0018      	movs	r0, r3
 8000f76:	f004 fde5 	bl	8005b44 <siprintf>
	sprintf(text_buffers->line3, "                   ");
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3328      	adds	r3, #40	@ 0x28
 8000f7e:	4a42      	ldr	r2, [pc, #264]	@ (8001088 <CREATE_DumpMenu+0x130>)
 8000f80:	0011      	movs	r1, r2
 8000f82:	0018      	movs	r0, r3
 8000f84:	f004 fdde 	bl	8005b44 <siprintf>
	ssd1306_SetCursor(0, 0);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f001 f954 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line1, Font_7x10, White);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	4a3e      	ldr	r2, [pc, #248]	@ (800108c <CREATE_DumpMenu+0x134>)
 8000f94:	2301      	movs	r3, #1
 8000f96:	6811      	ldr	r1, [r2, #0]
 8000f98:	6852      	ldr	r2, [r2, #4]
 8000f9a:	f001 f923 	bl	80021e4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 11);
 8000f9e:	210b      	movs	r1, #11
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f001 f949 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line2, Font_7x10, White);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3314      	adds	r3, #20
 8000faa:	0018      	movs	r0, r3
 8000fac:	4a37      	ldr	r2, [pc, #220]	@ (800108c <CREATE_DumpMenu+0x134>)
 8000fae:	2301      	movs	r3, #1
 8000fb0:	6811      	ldr	r1, [r2, #0]
 8000fb2:	6852      	ldr	r2, [r2, #4]
 8000fb4:	f001 f916 	bl	80021e4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 22);
 8000fb8:	2116      	movs	r1, #22
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f001 f93c 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line3, Font_7x10, White);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3328      	adds	r3, #40	@ 0x28
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	4a31      	ldr	r2, [pc, #196]	@ (800108c <CREATE_DumpMenu+0x134>)
 8000fc8:	2301      	movs	r3, #1
 8000fca:	6811      	ldr	r1, [r2, #0]
 8000fcc:	6852      	ldr	r2, [r2, #4]
 8000fce:	f001 f909 	bl	80021e4 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8000fd2:	f000 ffdf 	bl	8001f94 <ssd1306_UpdateScreen>


	if (!button_down) return;
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	@ (8001090 <CREATE_DumpMenu+0x138>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d04b      	beq.n	8001076 <CREATE_DumpMenu+0x11e>
	char msg[130];
	int size = sprintf(msg,
	                   "Session: %6lu s" CRLF
	                   "CALC: %10ld uWh, %8ld mW" CRLF
	                   "PEAK: %05u mV, %5d mA, %9ld mW" CRLF CRLF,
	                   persistent_data->last_session.duration,
 8000fde:	4b2d      	ldr	r3, [pc, #180]	@ (8001094 <CREATE_DumpMenu+0x13c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68dc      	ldr	r4, [r3, #12]
	                   persistent_data->last_session.energy, persistent_data->last_session.average_power,
 8000fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8001094 <CREATE_DumpMenu+0x13c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	691d      	ldr	r5, [r3, #16]
 8000fea:	4b2a      	ldr	r3, [pc, #168]	@ (8001094 <CREATE_DumpMenu+0x13c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	695a      	ldr	r2, [r3, #20]
	                   persistent_data->last_session.peak.voltage, persistent_data->last_session.peak.current, persistent_data->last_session.peak.power);
 8000ff0:	4b28      	ldr	r3, [pc, #160]	@ (8001094 <CREATE_DumpMenu+0x13c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	889b      	ldrh	r3, [r3, #4]
 8000ff6:	b29b      	uxth	r3, r3
	int size = sprintf(msg,
 8000ff8:	001e      	movs	r6, r3
	                   persistent_data->last_session.peak.voltage, persistent_data->last_session.peak.current, persistent_data->last_session.peak.power);
 8000ffa:	4b26      	ldr	r3, [pc, #152]	@ (8001094 <CREATE_DumpMenu+0x13c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	88db      	ldrh	r3, [r3, #6]
 8001000:	b21b      	sxth	r3, r3
	int size = sprintf(msg,
 8001002:	469c      	mov	ip, r3
	                   persistent_data->last_session.peak.voltage, persistent_data->last_session.peak.current, persistent_data->last_session.peak.power);
 8001004:	4b23      	ldr	r3, [pc, #140]	@ (8001094 <CREATE_DumpMenu+0x13c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	689b      	ldr	r3, [r3, #8]
	int size = sprintf(msg,
 800100a:	4923      	ldr	r1, [pc, #140]	@ (8001098 <CREATE_DumpMenu+0x140>)
 800100c:	2020      	movs	r0, #32
 800100e:	1838      	adds	r0, r7, r0
 8001010:	9303      	str	r3, [sp, #12]
 8001012:	4663      	mov	r3, ip
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	9601      	str	r6, [sp, #4]
 8001018:	9200      	str	r2, [sp, #0]
 800101a:	002b      	movs	r3, r5
 800101c:	0022      	movs	r2, r4
 800101e:	f004 fd91 	bl	8005b44 <siprintf>
 8001022:	0003      	movs	r3, r0
 8001024:	22a4      	movs	r2, #164	@ 0xa4
 8001026:	18b9      	adds	r1, r7, r2
 8001028:	600b      	str	r3, [r1, #0]

	HAL_UART_Transmit(&huart1, (uint8_t*)msg, size, 10);
 800102a:	18bb      	adds	r3, r7, r2
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	b29a      	uxth	r2, r3
 8001030:	2020      	movs	r0, #32
 8001032:	1839      	adds	r1, r7, r0
 8001034:	4819      	ldr	r0, [pc, #100]	@ (800109c <CREATE_DumpMenu+0x144>)
 8001036:	230a      	movs	r3, #10
 8001038:	f004 f830 	bl	800509c <HAL_UART_Transmit>

	persistent_data->last_session = (SessionData){0};
 800103c:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <CREATE_DumpMenu+0x13c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3304      	adds	r3, #4
 8001042:	2214      	movs	r2, #20
 8001044:	2100      	movs	r1, #0
 8001046:	0018      	movs	r0, r3
 8001048:	f004 fdb0 	bl	8005bac <memset>

	sprintf(text_buffers->line3, "      DUMPED       ");
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3328      	adds	r3, #40	@ 0x28
 8001050:	4a13      	ldr	r2, [pc, #76]	@ (80010a0 <CREATE_DumpMenu+0x148>)
 8001052:	0011      	movs	r1, r2
 8001054:	0018      	movs	r0, r3
 8001056:	f004 fd75 	bl	8005b44 <siprintf>
	ssd1306_SetCursor(0, 22);
 800105a:	2116      	movs	r1, #22
 800105c:	2000      	movs	r0, #0
 800105e:	f001 f8eb 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line3, Font_7x10, White);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3328      	adds	r3, #40	@ 0x28
 8001066:	0018      	movs	r0, r3
 8001068:	4a08      	ldr	r2, [pc, #32]	@ (800108c <CREATE_DumpMenu+0x134>)
 800106a:	2301      	movs	r3, #1
 800106c:	6811      	ldr	r1, [r2, #0]
 800106e:	6852      	ldr	r2, [r2, #4]
 8001070:	f001 f8b8 	bl	80021e4 <ssd1306_WriteString>
 8001074:	e000      	b.n	8001078 <CREATE_DumpMenu+0x120>
	if (!button_down) return;
 8001076:	46c0      	nop			@ (mov r8, r8)
}
 8001078:	46bd      	mov	sp, r7
 800107a:	b02b      	add	sp, #172	@ 0xac
 800107c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800107e:	46c0      	nop			@ (mov r8, r8)
 8001080:	080065fc 	.word	0x080065fc
 8001084:	0800660c 	.word	0x0800660c
 8001088:	0800652c 	.word	0x0800652c
 800108c:	20000008 	.word	0x20000008
 8001090:	200001ff 	.word	0x200001ff
 8001094:	20000000 	.word	0x20000000
 8001098:	08006620 	.word	0x08006620
 800109c:	20000174 	.word	0x20000174
 80010a0:	08006670 	.word	0x08006670

080010a4 <CREATE_InfoMenu>:

// Draws INFO menu
void CREATE_InfoMenu(ScreenText* text_buffers) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

	sprintf(text_buffers->line1, "INFORMATION");
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a20      	ldr	r2, [pc, #128]	@ (8001130 <CREATE_InfoMenu+0x8c>)
 80010b0:	0011      	movs	r1, r2
 80010b2:	0018      	movs	r0, r3
 80010b4:	f004 fd46 	bl	8005b44 <siprintf>
	sprintf(text_buffers->line2, "TS= %14lu", timestamp);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3314      	adds	r3, #20
 80010bc:	0018      	movs	r0, r3
 80010be:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <CREATE_InfoMenu+0x90>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001138 <CREATE_InfoMenu+0x94>)
 80010c4:	0019      	movs	r1, r3
 80010c6:	f004 fd3d 	bl	8005b44 <siprintf>
	sprintf(text_buffers->line3, "Duration= %6lu s", ram_session.duration);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3328      	adds	r3, #40	@ 0x28
 80010ce:	0018      	movs	r0, r3
 80010d0:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <CREATE_InfoMenu+0x98>)
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <CREATE_InfoMenu+0x9c>)
 80010d6:	0019      	movs	r1, r3
 80010d8:	f004 fd34 	bl	8005b44 <siprintf>
	ssd1306_SetCursor(0, 0);
 80010dc:	2100      	movs	r1, #0
 80010de:	2000      	movs	r0, #0
 80010e0:	f001 f8aa 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line1, Font_7x10, White);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	4a17      	ldr	r2, [pc, #92]	@ (8001144 <CREATE_InfoMenu+0xa0>)
 80010e8:	2301      	movs	r3, #1
 80010ea:	6811      	ldr	r1, [r2, #0]
 80010ec:	6852      	ldr	r2, [r2, #4]
 80010ee:	f001 f879 	bl	80021e4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 11);
 80010f2:	210b      	movs	r1, #11
 80010f4:	2000      	movs	r0, #0
 80010f6:	f001 f89f 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line2, Font_7x10, White);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3314      	adds	r3, #20
 80010fe:	0018      	movs	r0, r3
 8001100:	4a10      	ldr	r2, [pc, #64]	@ (8001144 <CREATE_InfoMenu+0xa0>)
 8001102:	2301      	movs	r3, #1
 8001104:	6811      	ldr	r1, [r2, #0]
 8001106:	6852      	ldr	r2, [r2, #4]
 8001108:	f001 f86c 	bl	80021e4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 22);
 800110c:	2116      	movs	r1, #22
 800110e:	2000      	movs	r0, #0
 8001110:	f001 f892 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(text_buffers->line3, Font_7x10, White);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3328      	adds	r3, #40	@ 0x28
 8001118:	0018      	movs	r0, r3
 800111a:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <CREATE_InfoMenu+0xa0>)
 800111c:	2301      	movs	r3, #1
 800111e:	6811      	ldr	r1, [r2, #0]
 8001120:	6852      	ldr	r2, [r2, #4]
 8001122:	f001 f85f 	bl	80021e4 <ssd1306_WriteString>
}
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	b002      	add	sp, #8
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	08006684 	.word	0x08006684
 8001134:	20000200 	.word	0x20000200
 8001138:	08006690 	.word	0x08006690
 800113c:	2000020c 	.word	0x2000020c
 8001140:	08006560 	.word	0x08006560
 8001144:	20000008 	.word	0x20000008

08001148 <CREATE_ScreenFrame>:

void CREATE_ScreenFrame(void) {
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	b095      	sub	sp, #84	@ 0x54
 800114c:	af00      	add	r7, sp, #0

	HAL_FLASHEx_DATAEEPROM_Unlock();
 800114e:	f001 fef3 	bl	8002f38 <HAL_FLASHEx_DATAEEPROM_Unlock>
	// __HAL_LOCK(&pFlash);
	FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001152:	4ba3      	ldr	r3, [pc, #652]	@ (80013e0 <CREATE_ScreenFrame+0x298>)
 8001154:	0018      	movs	r0, r3
 8001156:	f001 fde1 	bl	8002d1c <FLASH_WaitForLastOperation>

	// Take measurements, used to display INST page
	instant.voltage = (Get_ADC_Value(ADC_CHANNEL_4) * MAX_VOLTAGE)/2600; // mV
 800115a:	4ba2      	ldr	r3, [pc, #648]	@ (80013e4 <CREATE_ScreenFrame+0x29c>)
 800115c:	0018      	movs	r0, r3
 800115e:	f000 fa5b 	bl	8001618 <Get_ADC_Value>
 8001162:	0003      	movs	r3, r0
 8001164:	4aa0      	ldr	r2, [pc, #640]	@ (80013e8 <CREATE_ScreenFrame+0x2a0>)
 8001166:	4353      	muls	r3, r2
 8001168:	49a0      	ldr	r1, [pc, #640]	@ (80013ec <CREATE_ScreenFrame+0x2a4>)
 800116a:	0018      	movs	r0, r3
 800116c:	f7fe ffd6 	bl	800011c <__udivsi3>
 8001170:	0003      	movs	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	4b9e      	ldr	r3, [pc, #632]	@ (80013f0 <CREATE_ScreenFrame+0x2a8>)
 8001176:	801a      	strh	r2, [r3, #0]
	// instant.current = ((int16_t)(Get_ADC_Value(ADC_CHANNEL_3) - 2078) * MAX_CURRENT)/2017; // mA
	// instant.voltage = Get_ADC_Value(ADC_CHANNEL_4); // mV
	instant.current = Get_ADC_Value(ADC_CHANNEL_3); // mA
 8001178:	4b9e      	ldr	r3, [pc, #632]	@ (80013f4 <CREATE_ScreenFrame+0x2ac>)
 800117a:	0018      	movs	r0, r3
 800117c:	f000 fa4c 	bl	8001618 <Get_ADC_Value>
 8001180:	0003      	movs	r3, r0
 8001182:	b21a      	sxth	r2, r3
 8001184:	4b9a      	ldr	r3, [pc, #616]	@ (80013f0 <CREATE_ScreenFrame+0x2a8>)
 8001186:	805a      	strh	r2, [r3, #2]
	instant.power = (int32_t)(instant.voltage * instant.current)/1000; // mW
 8001188:	4b99      	ldr	r3, [pc, #612]	@ (80013f0 <CREATE_ScreenFrame+0x2a8>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	001a      	movs	r2, r3
 800118e:	4b98      	ldr	r3, [pc, #608]	@ (80013f0 <CREATE_ScreenFrame+0x2a8>)
 8001190:	2102      	movs	r1, #2
 8001192:	5e5b      	ldrsh	r3, [r3, r1]
 8001194:	4353      	muls	r3, r2
 8001196:	22fa      	movs	r2, #250	@ 0xfa
 8001198:	0091      	lsls	r1, r2, #2
 800119a:	0018      	movs	r0, r3
 800119c:	f7ff f848 	bl	8000230 <__divsi3>
 80011a0:	0003      	movs	r3, r0
 80011a2:	001a      	movs	r2, r3
 80011a4:	4b92      	ldr	r3, [pc, #584]	@ (80013f0 <CREATE_ScreenFrame+0x2a8>)
 80011a6:	605a      	str	r2, [r3, #4]

	// Calculate energy, for CALC page
	ram_session.energy += ((int64_t)instant.power * TIMER_PERIOD)/3600000; // uWh
 80011a8:	4b93      	ldr	r3, [pc, #588]	@ (80013f8 <CREATE_ScreenFrame+0x2b0>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	001e      	movs	r6, r3
 80011ae:	4b90      	ldr	r3, [pc, #576]	@ (80013f0 <CREATE_ScreenFrame+0x2a8>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	17db      	asrs	r3, r3, #31
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	4a90      	ldr	r2, [pc, #576]	@ (80013fc <CREATE_ScreenFrame+0x2b4>)
 80011ba:	2300      	movs	r3, #0
 80011bc:	68b8      	ldr	r0, [r7, #8]
 80011be:	68f9      	ldr	r1, [r7, #12]
 80011c0:	f7ff f966 	bl	8000490 <__aeabi_lmul>
 80011c4:	0002      	movs	r2, r0
 80011c6:	000b      	movs	r3, r1
 80011c8:	0010      	movs	r0, r2
 80011ca:	0019      	movs	r1, r3
 80011cc:	4a8c      	ldr	r2, [pc, #560]	@ (8001400 <CREATE_ScreenFrame+0x2b8>)
 80011ce:	2300      	movs	r3, #0
 80011d0:	f7ff f91a 	bl	8000408 <__aeabi_ldivmod>
 80011d4:	0002      	movs	r2, r0
 80011d6:	000b      	movs	r3, r1
 80011d8:	0013      	movs	r3, r2
 80011da:	18f3      	adds	r3, r6, r3
 80011dc:	001a      	movs	r2, r3
 80011de:	4b86      	ldr	r3, [pc, #536]	@ (80013f8 <CREATE_ScreenFrame+0x2b0>)
 80011e0:	60da      	str	r2, [r3, #12]
	ram_session.average_power = (((int64_t)ram_session.energy * 3600000)/(timestamp * TIMER_PERIOD)); // mW
 80011e2:	4b85      	ldr	r3, [pc, #532]	@ (80013f8 <CREATE_ScreenFrame+0x2b0>)
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	17db      	asrs	r3, r3, #31
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	4a84      	ldr	r2, [pc, #528]	@ (8001400 <CREATE_ScreenFrame+0x2b8>)
 80011ee:	2300      	movs	r3, #0
 80011f0:	6838      	ldr	r0, [r7, #0]
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	f7ff f94c 	bl	8000490 <__aeabi_lmul>
 80011f8:	0002      	movs	r2, r0
 80011fa:	000b      	movs	r3, r1
 80011fc:	0010      	movs	r0, r2
 80011fe:	0019      	movs	r1, r3
 8001200:	4b80      	ldr	r3, [pc, #512]	@ (8001404 <CREATE_ScreenFrame+0x2bc>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	0013      	movs	r3, r2
 8001206:	02db      	lsls	r3, r3, #11
 8001208:	1a9b      	subs	r3, r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	001c      	movs	r4, r3
 8001212:	2300      	movs	r3, #0
 8001214:	001d      	movs	r5, r3
 8001216:	0022      	movs	r2, r4
 8001218:	002b      	movs	r3, r5
 800121a:	f7ff f8f5 	bl	8000408 <__aeabi_ldivmod>
 800121e:	0002      	movs	r2, r0
 8001220:	000b      	movs	r3, r1
 8001222:	4b75      	ldr	r3, [pc, #468]	@ (80013f8 <CREATE_ScreenFrame+0x2b0>)
 8001224:	611a      	str	r2, [r3, #16]
	ram_session.duration = (timestamp * TIMER_PERIOD) / 1000000;
 8001226:	4b77      	ldr	r3, [pc, #476]	@ (8001404 <CREATE_ScreenFrame+0x2bc>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	0013      	movs	r3, r2
 800122c:	02db      	lsls	r3, r3, #11
 800122e:	1a9b      	subs	r3, r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	1a9b      	subs	r3, r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4974      	ldr	r1, [pc, #464]	@ (8001408 <CREATE_ScreenFrame+0x2c0>)
 8001238:	0018      	movs	r0, r3
 800123a:	f7fe ff6f 	bl	800011c <__udivsi3>
 800123e:	0003      	movs	r3, r0
 8001240:	001a      	movs	r2, r3
 8001242:	4b6d      	ldr	r3, [pc, #436]	@ (80013f8 <CREATE_ScreenFrame+0x2b0>)
 8001244:	609a      	str	r2, [r3, #8]

	// Determine peaks, for PEAK page
	if (instant.voltage > ram_session.peak.voltage) ram_session.peak.voltage = instant.voltage;
 8001246:	4b6a      	ldr	r3, [pc, #424]	@ (80013f0 <CREATE_ScreenFrame+0x2a8>)
 8001248:	881a      	ldrh	r2, [r3, #0]
 800124a:	4b6b      	ldr	r3, [pc, #428]	@ (80013f8 <CREATE_ScreenFrame+0x2b0>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	429a      	cmp	r2, r3
 8001250:	d903      	bls.n	800125a <CREATE_ScreenFrame+0x112>
 8001252:	4b67      	ldr	r3, [pc, #412]	@ (80013f0 <CREATE_ScreenFrame+0x2a8>)
 8001254:	881a      	ldrh	r2, [r3, #0]
 8001256:	4b68      	ldr	r3, [pc, #416]	@ (80013f8 <CREATE_ScreenFrame+0x2b0>)
 8001258:	801a      	strh	r2, [r3, #0]
	if (abs(instant.current) >= abs(ram_session.peak.current)) ram_session.peak.current = instant.current;
 800125a:	4b65      	ldr	r3, [pc, #404]	@ (80013f0 <CREATE_ScreenFrame+0x2a8>)
 800125c:	2202      	movs	r2, #2
 800125e:	5e9b      	ldrsh	r3, [r3, r2]
 8001260:	17da      	asrs	r2, r3, #31
 8001262:	189b      	adds	r3, r3, r2
 8001264:	4053      	eors	r3, r2
 8001266:	b29a      	uxth	r2, r3
 8001268:	4b63      	ldr	r3, [pc, #396]	@ (80013f8 <CREATE_ScreenFrame+0x2b0>)
 800126a:	2102      	movs	r1, #2
 800126c:	5e5b      	ldrsh	r3, [r3, r1]
 800126e:	17d9      	asrs	r1, r3, #31
 8001270:	185b      	adds	r3, r3, r1
 8001272:	404b      	eors	r3, r1
 8001274:	b29b      	uxth	r3, r3
 8001276:	429a      	cmp	r2, r3
 8001278:	d304      	bcc.n	8001284 <CREATE_ScreenFrame+0x13c>
 800127a:	4b5d      	ldr	r3, [pc, #372]	@ (80013f0 <CREATE_ScreenFrame+0x2a8>)
 800127c:	2202      	movs	r2, #2
 800127e:	5e9a      	ldrsh	r2, [r3, r2]
 8001280:	4b5d      	ldr	r3, [pc, #372]	@ (80013f8 <CREATE_ScreenFrame+0x2b0>)
 8001282:	805a      	strh	r2, [r3, #2]
	if (labs(instant.power) >= labs(ram_session.peak.power)) ram_session.peak.power = instant.power;
 8001284:	4b5a      	ldr	r3, [pc, #360]	@ (80013f0 <CREATE_ScreenFrame+0x2a8>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	17d9      	asrs	r1, r3, #31
 800128a:	185a      	adds	r2, r3, r1
 800128c:	404a      	eors	r2, r1
 800128e:	4b5a      	ldr	r3, [pc, #360]	@ (80013f8 <CREATE_ScreenFrame+0x2b0>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	17d9      	asrs	r1, r3, #31
 8001294:	185b      	adds	r3, r3, r1
 8001296:	404b      	eors	r3, r1
 8001298:	429a      	cmp	r2, r3
 800129a:	db03      	blt.n	80012a4 <CREATE_ScreenFrame+0x15c>
 800129c:	4b54      	ldr	r3, [pc, #336]	@ (80013f0 <CREATE_ScreenFrame+0x2a8>)
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4b55      	ldr	r3, [pc, #340]	@ (80013f8 <CREATE_ScreenFrame+0x2b0>)
 80012a2:	605a      	str	r2, [r3, #4]

	// Update plot front, for GRAPH page
	plot.front = (plot.front + 1) % SCREEN_WIDTH;
 80012a4:	4b59      	ldr	r3, [pc, #356]	@ (800140c <CREATE_ScreenFrame+0x2c4>)
 80012a6:	2280      	movs	r2, #128	@ 0x80
 80012a8:	5c9b      	ldrb	r3, [r3, r2]
 80012aa:	3301      	adds	r3, #1
 80012ac:	4a58      	ldr	r2, [pc, #352]	@ (8001410 <CREATE_ScreenFrame+0x2c8>)
 80012ae:	4013      	ands	r3, r2
 80012b0:	d504      	bpl.n	80012bc <CREATE_ScreenFrame+0x174>
 80012b2:	3b01      	subs	r3, #1
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	4252      	negs	r2, r2
 80012b8:	4313      	orrs	r3, r2
 80012ba:	3301      	adds	r3, #1
 80012bc:	b2d9      	uxtb	r1, r3
 80012be:	4b53      	ldr	r3, [pc, #332]	@ (800140c <CREATE_ScreenFrame+0x2c4>)
 80012c0:	2280      	movs	r2, #128	@ 0x80
 80012c2:	5499      	strb	r1, [r3, r2]
	plot.buffer[plot.front] = (((instant.power + MAX_POWER) * (SCREEN_HEIGHT-1))/(2*MAX_POWER)) % SCREEN_HEIGHT;
 80012c4:	4b4a      	ldr	r3, [pc, #296]	@ (80013f0 <CREATE_ScreenFrame+0x2a8>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	4a52      	ldr	r2, [pc, #328]	@ (8001414 <CREATE_ScreenFrame+0x2cc>)
 80012ca:	189a      	adds	r2, r3, r2
 80012cc:	0013      	movs	r3, r2
 80012ce:	015b      	lsls	r3, r3, #5
 80012d0:	1a9b      	subs	r3, r3, r2
 80012d2:	4951      	ldr	r1, [pc, #324]	@ (8001418 <CREATE_ScreenFrame+0x2d0>)
 80012d4:	0018      	movs	r0, r3
 80012d6:	f7fe ffab 	bl	8000230 <__divsi3>
 80012da:	0003      	movs	r3, r0
 80012dc:	001a      	movs	r2, r3
 80012de:	4b4f      	ldr	r3, [pc, #316]	@ (800141c <CREATE_ScreenFrame+0x2d4>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	d504      	bpl.n	80012ee <CREATE_ScreenFrame+0x1a6>
 80012e4:	3b01      	subs	r3, #1
 80012e6:	2220      	movs	r2, #32
 80012e8:	4252      	negs	r2, r2
 80012ea:	4313      	orrs	r3, r2
 80012ec:	3301      	adds	r3, #1
 80012ee:	0019      	movs	r1, r3
 80012f0:	4b46      	ldr	r3, [pc, #280]	@ (800140c <CREATE_ScreenFrame+0x2c4>)
 80012f2:	2280      	movs	r2, #128	@ 0x80
 80012f4:	5c9b      	ldrb	r3, [r3, r2]
 80012f6:	001a      	movs	r2, r3
 80012f8:	b2c9      	uxtb	r1, r1
 80012fa:	4b44      	ldr	r3, [pc, #272]	@ (800140c <CREATE_ScreenFrame+0x2c4>)
 80012fc:	5499      	strb	r1, [r3, r2]

	// Setup/clear screen text buffers
	ScreenText text_buffers = {0};
 80012fe:	2314      	movs	r3, #20
 8001300:	18fb      	adds	r3, r7, r3
 8001302:	0018      	movs	r0, r3
 8001304:	233c      	movs	r3, #60	@ 0x3c
 8001306:	001a      	movs	r2, r3
 8001308:	2100      	movs	r1, #0
 800130a:	f004 fc4f 	bl	8005bac <memset>

	// Only fully clear the screen if changing menu page
	if (persistent_data->menu.cur != persistent_data->menu.prev) ssd1306_Fill(Black);
 800130e:	4b44      	ldr	r3, [pc, #272]	@ (8001420 <CREATE_ScreenFrame+0x2d8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b42      	ldr	r3, [pc, #264]	@ (8001420 <CREATE_ScreenFrame+0x2d8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	785b      	ldrb	r3, [r3, #1]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	429a      	cmp	r2, r3
 8001320:	d002      	beq.n	8001328 <CREATE_ScreenFrame+0x1e0>
 8001322:	2000      	movs	r0, #0
 8001324:	f000 fe12 	bl	8001f4c <ssd1306_Fill>
	persistent_data->menu.prev = persistent_data->menu.cur;
 8001328:	4b3d      	ldr	r3, [pc, #244]	@ (8001420 <CREATE_ScreenFrame+0x2d8>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b3c      	ldr	r3, [pc, #240]	@ (8001420 <CREATE_ScreenFrame+0x2d8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	7812      	ldrb	r2, [r2, #0]
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	705a      	strb	r2, [r3, #1]

	// Dispatch menu displays
	switch (persistent_data->menu.cur) {
 8001336:	4b3a      	ldr	r3, [pc, #232]	@ (8001420 <CREATE_ScreenFrame+0x2d8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b09      	cmp	r3, #9
 8001340:	d840      	bhi.n	80013c4 <CREATE_ScreenFrame+0x27c>
 8001342:	009a      	lsls	r2, r3, #2
 8001344:	4b37      	ldr	r3, [pc, #220]	@ (8001424 <CREATE_ScreenFrame+0x2dc>)
 8001346:	18d3      	adds	r3, r2, r3
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	469f      	mov	pc, r3

		case INST:  CREATE_InstMenu(&text_buffers);  break;
 800134c:	2314      	movs	r3, #20
 800134e:	18fb      	adds	r3, r7, r3
 8001350:	0018      	movs	r0, r3
 8001352:	f7ff facb 	bl	80008ec <CREATE_InstMenu>
 8001356:	e036      	b.n	80013c6 <CREATE_ScreenFrame+0x27e>
		case CALC:  CREATE_CalcMenu(&text_buffers);  break;
 8001358:	2314      	movs	r3, #20
 800135a:	18fb      	adds	r3, r7, r3
 800135c:	0018      	movs	r0, r3
 800135e:	f7ff fb17 	bl	8000990 <CREATE_CalcMenu>
 8001362:	e030      	b.n	80013c6 <CREATE_ScreenFrame+0x27e>
		case PEAK:  CREATE_PeakMenu(&text_buffers);  break;
 8001364:	2314      	movs	r3, #20
 8001366:	18fb      	adds	r3, r7, r3
 8001368:	0018      	movs	r0, r3
 800136a:	f7ff fb71 	bl	8000a50 <CREATE_PeakMenu>
 800136e:	e02a      	b.n	80013c6 <CREATE_ScreenFrame+0x27e>
		case GRAPH: CREATE_GraphMenu(&text_buffers); break;
 8001370:	2314      	movs	r3, #20
 8001372:	18fb      	adds	r3, r7, r3
 8001374:	0018      	movs	r0, r3
 8001376:	f7ff fbcb 	bl	8000b10 <CREATE_GraphMenu>
 800137a:	e024      	b.n	80013c6 <CREATE_ScreenFrame+0x27e>
		case MEM:   CREATE_MemMenu(&text_buffers);   break;
 800137c:	2314      	movs	r3, #20
 800137e:	18fb      	adds	r3, r7, r3
 8001380:	0018      	movs	r0, r3
 8001382:	f7ff fc23 	bl	8000bcc <CREATE_MemMenu>
 8001386:	e01e      	b.n	80013c6 <CREATE_ScreenFrame+0x27e>
		case STAT1: CREATE_Stat1Menu(&text_buffers); break;
 8001388:	2314      	movs	r3, #20
 800138a:	18fb      	adds	r3, r7, r3
 800138c:	0018      	movs	r0, r3
 800138e:	f7ff fc97 	bl	8000cc0 <CREATE_Stat1Menu>
 8001392:	e018      	b.n	80013c6 <CREATE_ScreenFrame+0x27e>
		case STAT2: CREATE_Stat2Menu(&text_buffers); break;
 8001394:	2314      	movs	r3, #20
 8001396:	18fb      	adds	r3, r7, r3
 8001398:	0018      	movs	r0, r3
 800139a:	f7ff fce7 	bl	8000d6c <CREATE_Stat2Menu>
 800139e:	e012      	b.n	80013c6 <CREATE_ScreenFrame+0x27e>
		case COMM:  CREATE_CommMenu(&text_buffers);  break;
 80013a0:	2314      	movs	r3, #20
 80013a2:	18fb      	adds	r3, r7, r3
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7ff fd35 	bl	8000e14 <CREATE_CommMenu>
 80013aa:	e00c      	b.n	80013c6 <CREATE_ScreenFrame+0x27e>
		case DUMP:  CREATE_DumpMenu(&text_buffers);  break;
 80013ac:	2314      	movs	r3, #20
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	0018      	movs	r0, r3
 80013b2:	f7ff fdd1 	bl	8000f58 <CREATE_DumpMenu>
 80013b6:	e006      	b.n	80013c6 <CREATE_ScreenFrame+0x27e>
		case INFO:  CREATE_InfoMenu(&text_buffers);  break;
 80013b8:	2314      	movs	r3, #20
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	0018      	movs	r0, r3
 80013be:	f7ff fe71 	bl	80010a4 <CREATE_InfoMenu>
 80013c2:	e000      	b.n	80013c6 <CREATE_ScreenFrame+0x27e>
		default:                                     break;
 80013c4:	46c0      	nop			@ (mov r8, r8)
	}

	// Actually apply screen changes
	ssd1306_UpdateScreen();
 80013c6:	f000 fde5 	bl	8001f94 <ssd1306_UpdateScreen>

	FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80013ca:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <CREATE_ScreenFrame+0x298>)
 80013cc:	0018      	movs	r0, r3
 80013ce:	f001 fca5 	bl	8002d1c <FLASH_WaitForLastOperation>
	// __HAL_UNLOCK(&pFlash);
	HAL_FLASHEx_DATAEEPROM_Lock();
 80013d2:	f001 fddf 	bl	8002f94 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 80013d6:	46c0      	nop			@ (mov r8, r8)
 80013d8:	46bd      	mov	sp, r7
 80013da:	b015      	add	sp, #84	@ 0x54
 80013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013de:	46c0      	nop			@ (mov r8, r8)
 80013e0:	0000c350 	.word	0x0000c350
 80013e4:	10000010 	.word	0x10000010
 80013e8:	00004e20 	.word	0x00004e20
 80013ec:	00000a28 	.word	0x00000a28
 80013f0:	20000204 	.word	0x20000204
 80013f4:	0c000008 	.word	0x0c000008
 80013f8:	2000020c 	.word	0x2000020c
 80013fc:	0000ffdc 	.word	0x0000ffdc
 8001400:	0036ee80 	.word	0x0036ee80
 8001404:	20000200 	.word	0x20000200
 8001408:	000f4240 	.word	0x000f4240
 800140c:	20000220 	.word	0x20000220
 8001410:	8000007f 	.word	0x8000007f
 8001414:	000186a0 	.word	0x000186a0
 8001418:	00030d40 	.word	0x00030d40
 800141c:	8000001f 	.word	0x8000001f
 8001420:	20000000 	.word	0x20000000
 8001424:	0800669c 	.word	0x0800669c

08001428 <Timer_Interrupt_Handler>:
/**
  * @brief  Interrupt handler for TIM6 timer
  * @note	This function is called when the timer is reloaded
  *         It reads ADC values from potentiometer inputs and update screen infos
  */
void Timer_Interrupt_Handler(void) {
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0

	++timestamp;
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <Timer_Interrupt_Handler+0x20>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <Timer_Interrupt_Handler+0x20>)
 8001434:	601a      	str	r2, [r3, #0]

	CREATE_ScreenFrame();
 8001436:	f7ff fe87 	bl	8001148 <CREATE_ScreenFrame>

	button_down = false;
 800143a:	4b04      	ldr	r3, [pc, #16]	@ (800144c <Timer_Interrupt_Handler+0x24>)
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
}
 8001440:	46c0      	nop			@ (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	46c0      	nop			@ (mov r8, r8)
 8001448:	20000200 	.word	0x20000200
 800144c:	200001ff 	.word	0x200001ff

08001450 <User_Button_Interrupt_Handler>:

/**
  * @brief  Interrupt handler for User Button GPIO
  * @note	This function is called when a rising edge is detected on User Button input pin
  */
void User_Button_Interrupt_Handler(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0

	button_state = HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin);
 8001454:	4b07      	ldr	r3, [pc, #28]	@ (8001474 <User_Button_Interrupt_Handler+0x24>)
 8001456:	2108      	movs	r1, #8
 8001458:	0018      	movs	r0, r3
 800145a:	f001 ff1f 	bl	800329c <HAL_GPIO_ReadPin>
 800145e:	0003      	movs	r3, r0
 8001460:	001a      	movs	r2, r3
 8001462:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <User_Button_Interrupt_Handler+0x28>)
 8001464:	701a      	strb	r2, [r3, #0]

	button_down = button_state; // Needs to be reset regularly elsewhere
 8001466:	4b04      	ldr	r3, [pc, #16]	@ (8001478 <User_Button_Interrupt_Handler+0x28>)
 8001468:	781a      	ldrb	r2, [r3, #0]
 800146a:	4b04      	ldr	r3, [pc, #16]	@ (800147c <User_Button_Interrupt_Handler+0x2c>)
 800146c:	701a      	strb	r2, [r3, #0]
}
 800146e:	46c0      	nop			@ (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	50000400 	.word	0x50000400
 8001478:	200001fe 	.word	0x200001fe
 800147c:	200001ff 	.word	0x200001ff

08001480 <Rotary_Encoder_Interrupt_Handler>:

/**
  * @brief  Interrupt handler for Rotary Encoder Channel A
  * @note	This function is called when a rising edge is detected on channel A of the rotary encoder
  */
void Rotary_Encoder_Interrupt_Handler(void) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0

	static int8_t rotary_buffer = 0;
	/* Check for rotary encoder turned clockwise or counter-clockwise */
	HAL_Delay(5);
 8001486:	2005      	movs	r0, #5
 8001488:	f000 ffc8 	bl	800241c <HAL_Delay>
	uint8_t rotary_new = HAL_GPIO_ReadPin(ROT_CHA_GPIO_Port, ROT_CHA_Pin) << 1;
 800148c:	4b5c      	ldr	r3, [pc, #368]	@ (8001600 <Rotary_Encoder_Interrupt_Handler+0x180>)
 800148e:	2120      	movs	r1, #32
 8001490:	0018      	movs	r0, r3
 8001492:	f001 ff03 	bl	800329c <HAL_GPIO_ReadPin>
 8001496:	0003      	movs	r3, r0
 8001498:	1dfa      	adds	r2, r7, #7
 800149a:	18db      	adds	r3, r3, r3
 800149c:	7013      	strb	r3, [r2, #0]
	rotary_new += HAL_GPIO_ReadPin(ROT_CHB_GPIO_Port, ROT_CHB_Pin);
 800149e:	4b58      	ldr	r3, [pc, #352]	@ (8001600 <Rotary_Encoder_Interrupt_Handler+0x180>)
 80014a0:	2110      	movs	r1, #16
 80014a2:	0018      	movs	r0, r3
 80014a4:	f001 fefa 	bl	800329c <HAL_GPIO_ReadPin>
 80014a8:	0003      	movs	r3, r0
 80014aa:	0019      	movs	r1, r3
 80014ac:	1dfb      	adds	r3, r7, #7
 80014ae:	1dfa      	adds	r2, r7, #7
 80014b0:	7812      	ldrb	r2, [r2, #0]
 80014b2:	188a      	adds	r2, r1, r2
 80014b4:	701a      	strb	r2, [r3, #0]
	if (rotary_new != rotary_state) {
 80014b6:	4b53      	ldr	r3, [pc, #332]	@ (8001604 <Rotary_Encoder_Interrupt_Handler+0x184>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	1dfa      	adds	r2, r7, #7
 80014bc:	7812      	ldrb	r2, [r2, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d100      	bne.n	80014c4 <Rotary_Encoder_Interrupt_Handler+0x44>
 80014c2:	e099      	b.n	80015f8 <Rotary_Encoder_Interrupt_Handler+0x178>
		if (((rotary_state == 0b00) && (rotary_new == 0b10)) || ((rotary_state == 0b10) && (rotary_new == 0b11)) ||
 80014c4:	4b4f      	ldr	r3, [pc, #316]	@ (8001604 <Rotary_Encoder_Interrupt_Handler+0x184>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d103      	bne.n	80014d4 <Rotary_Encoder_Interrupt_Handler+0x54>
 80014cc:	1dfb      	adds	r3, r7, #7
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d017      	beq.n	8001504 <Rotary_Encoder_Interrupt_Handler+0x84>
 80014d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001604 <Rotary_Encoder_Interrupt_Handler+0x184>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d103      	bne.n	80014e4 <Rotary_Encoder_Interrupt_Handler+0x64>
 80014dc:	1dfb      	adds	r3, r7, #7
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	d00f      	beq.n	8001504 <Rotary_Encoder_Interrupt_Handler+0x84>
				((rotary_state == 0b11) && (rotary_new == 0b01)) || ((rotary_state == 0b01) && (rotary_new == 0b00))) {
 80014e4:	4b47      	ldr	r3, [pc, #284]	@ (8001604 <Rotary_Encoder_Interrupt_Handler+0x184>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
		if (((rotary_state == 0b00) && (rotary_new == 0b10)) || ((rotary_state == 0b10) && (rotary_new == 0b11)) ||
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d103      	bne.n	80014f4 <Rotary_Encoder_Interrupt_Handler+0x74>
				((rotary_state == 0b11) && (rotary_new == 0b01)) || ((rotary_state == 0b01) && (rotary_new == 0b00))) {
 80014ec:	1dfb      	adds	r3, r7, #7
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d007      	beq.n	8001504 <Rotary_Encoder_Interrupt_Handler+0x84>
 80014f4:	4b43      	ldr	r3, [pc, #268]	@ (8001604 <Rotary_Encoder_Interrupt_Handler+0x184>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d10c      	bne.n	8001516 <Rotary_Encoder_Interrupt_Handler+0x96>
 80014fc:	1dfb      	adds	r3, r7, #7
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d108      	bne.n	8001516 <Rotary_Encoder_Interrupt_Handler+0x96>
			rotary_buffer ++;
 8001504:	4b40      	ldr	r3, [pc, #256]	@ (8001608 <Rotary_Encoder_Interrupt_Handler+0x188>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b25b      	sxtb	r3, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	3301      	adds	r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	b25a      	sxtb	r2, r3
 8001512:	4b3d      	ldr	r3, [pc, #244]	@ (8001608 <Rotary_Encoder_Interrupt_Handler+0x188>)
 8001514:	701a      	strb	r2, [r3, #0]
		}
		if (((rotary_state == 0b00) && (rotary_new == 0b01)) || ((rotary_state == 0b01) && (rotary_new == 0b11)) ||
 8001516:	4b3b      	ldr	r3, [pc, #236]	@ (8001604 <Rotary_Encoder_Interrupt_Handler+0x184>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d103      	bne.n	8001526 <Rotary_Encoder_Interrupt_Handler+0xa6>
 800151e:	1dfb      	adds	r3, r7, #7
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d017      	beq.n	8001556 <Rotary_Encoder_Interrupt_Handler+0xd6>
 8001526:	4b37      	ldr	r3, [pc, #220]	@ (8001604 <Rotary_Encoder_Interrupt_Handler+0x184>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d103      	bne.n	8001536 <Rotary_Encoder_Interrupt_Handler+0xb6>
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d00f      	beq.n	8001556 <Rotary_Encoder_Interrupt_Handler+0xd6>
				((rotary_state == 0b11) && (rotary_new == 0b10)) || ((rotary_state == 0b10) && (rotary_new == 0b00))) {
 8001536:	4b33      	ldr	r3, [pc, #204]	@ (8001604 <Rotary_Encoder_Interrupt_Handler+0x184>)
 8001538:	781b      	ldrb	r3, [r3, #0]
		if (((rotary_state == 0b00) && (rotary_new == 0b01)) || ((rotary_state == 0b01) && (rotary_new == 0b11)) ||
 800153a:	2b03      	cmp	r3, #3
 800153c:	d103      	bne.n	8001546 <Rotary_Encoder_Interrupt_Handler+0xc6>
				((rotary_state == 0b11) && (rotary_new == 0b10)) || ((rotary_state == 0b10) && (rotary_new == 0b00))) {
 800153e:	1dfb      	adds	r3, r7, #7
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d007      	beq.n	8001556 <Rotary_Encoder_Interrupt_Handler+0xd6>
 8001546:	4b2f      	ldr	r3, [pc, #188]	@ (8001604 <Rotary_Encoder_Interrupt_Handler+0x184>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d10c      	bne.n	8001568 <Rotary_Encoder_Interrupt_Handler+0xe8>
 800154e:	1dfb      	adds	r3, r7, #7
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d108      	bne.n	8001568 <Rotary_Encoder_Interrupt_Handler+0xe8>
			rotary_buffer --;
 8001556:	4b2c      	ldr	r3, [pc, #176]	@ (8001608 <Rotary_Encoder_Interrupt_Handler+0x188>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	b25b      	sxtb	r3, r3
 800155c:	b2db      	uxtb	r3, r3
 800155e:	3b01      	subs	r3, #1
 8001560:	b2db      	uxtb	r3, r3
 8001562:	b25a      	sxtb	r2, r3
 8001564:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <Rotary_Encoder_Interrupt_Handler+0x188>)
 8001566:	701a      	strb	r2, [r3, #0]
		}

		rotary_state = rotary_new;
 8001568:	4b26      	ldr	r3, [pc, #152]	@ (8001604 <Rotary_Encoder_Interrupt_Handler+0x184>)
 800156a:	1dfa      	adds	r2, r7, #7
 800156c:	7812      	ldrb	r2, [r2, #0]
 800156e:	701a      	strb	r2, [r3, #0]

		HAL_FLASHEx_DATAEEPROM_Unlock();
 8001570:	f001 fce2 	bl	8002f38 <HAL_FLASHEx_DATAEEPROM_Unlock>
		FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001574:	4b25      	ldr	r3, [pc, #148]	@ (800160c <Rotary_Encoder_Interrupt_Handler+0x18c>)
 8001576:	0018      	movs	r0, r3
 8001578:	f001 fbd0 	bl	8002d1c <FLASH_WaitForLastOperation>
		if (rotary_buffer > 3) {
 800157c:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <Rotary_Encoder_Interrupt_Handler+0x188>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	b25b      	sxtb	r3, r3
 8001582:	2b03      	cmp	r3, #3
 8001584:	dd17      	ble.n	80015b6 <Rotary_Encoder_Interrupt_Handler+0x136>
			rotary_counter ++;
 8001586:	4b22      	ldr	r3, [pc, #136]	@ (8001610 <Rotary_Encoder_Interrupt_Handler+0x190>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	3301      	adds	r3, #1
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b20      	ldr	r3, [pc, #128]	@ (8001610 <Rotary_Encoder_Interrupt_Handler+0x190>)
 8001590:	701a      	strb	r2, [r3, #0]
			rotary_buffer = 0;
 8001592:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <Rotary_Encoder_Interrupt_Handler+0x188>)
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]

			// Increase selection on clockwise rotation
			persistent_data->menu.cur = (persistent_data->menu.cur + 1) % MENU_ITEMS;
 8001598:	4b1e      	ldr	r3, [pc, #120]	@ (8001614 <Rotary_Encoder_Interrupt_Handler+0x194>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	3301      	adds	r3, #1
 80015a2:	210a      	movs	r1, #10
 80015a4:	0018      	movs	r0, r3
 80015a6:	f7fe ff29 	bl	80003fc <__aeabi_idivmod>
 80015aa:	000b      	movs	r3, r1
 80015ac:	001a      	movs	r2, r3
 80015ae:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <Rotary_Encoder_Interrupt_Handler+0x194>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]
		}

		if (rotary_buffer < -3) {
 80015b6:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <Rotary_Encoder_Interrupt_Handler+0x188>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	3303      	adds	r3, #3
 80015be:	da17      	bge.n	80015f0 <Rotary_Encoder_Interrupt_Handler+0x170>
			rotary_counter --;
 80015c0:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <Rotary_Encoder_Interrupt_Handler+0x190>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <Rotary_Encoder_Interrupt_Handler+0x190>)
 80015ca:	701a      	strb	r2, [r3, #0]
			rotary_buffer = 0;
 80015cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <Rotary_Encoder_Interrupt_Handler+0x188>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]

			// Decrease selection on clockwise rotation
			persistent_data->menu.cur = (persistent_data->menu.cur + MENU_ITEMS-1) % MENU_ITEMS;
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <Rotary_Encoder_Interrupt_Handler+0x194>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	3309      	adds	r3, #9
 80015dc:	210a      	movs	r1, #10
 80015de:	0018      	movs	r0, r3
 80015e0:	f7fe ff0c 	bl	80003fc <__aeabi_idivmod>
 80015e4:	000b      	movs	r3, r1
 80015e6:	001a      	movs	r2, r3
 80015e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <Rotary_Encoder_Interrupt_Handler+0x194>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	701a      	strb	r2, [r3, #0]
		}

		FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <Rotary_Encoder_Interrupt_Handler+0x18c>)
 80015f2:	0018      	movs	r0, r3
 80015f4:	f001 fb92 	bl	8002d1c <FLASH_WaitForLastOperation>
		// EEPROM Lock is not reentrant hence we can't re-lock it here, because this will cause problems in the ScreenFrame routine
	}
}
 80015f8:	46c0      	nop			@ (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b002      	add	sp, #8
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	50000400 	.word	0x50000400
 8001604:	200001fc 	.word	0x200001fc
 8001608:	200002a1 	.word	0x200002a1
 800160c:	0000c350 	.word	0x0000c350
 8001610:	200001fd 	.word	0x200001fd
 8001614:	20000000 	.word	0x20000000

08001618 <Get_ADC_Value>:
  * @param  hadc ADC handle
  * @param  adc_channel Channel macro such as ADC_CHANNEL_0, ADC_CHANNEL_1, etc.
  * @retval Channel converted value
  */
uint32_t Get_ADC_Value(uint32_t adc_channel)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	/* Disable all previous channel configuration */
	hadc.Instance->CHSELR = 0;
 8001620:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <Get_ADC_Value+0x78>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2200      	movs	r2, #0
 8001626:	629a      	str	r2, [r3, #40]	@ 0x28
	ADC_ChannelConfTypeDef sConfig = {0};
 8001628:	2408      	movs	r4, #8
 800162a:	193b      	adds	r3, r7, r4
 800162c:	0018      	movs	r0, r3
 800162e:	2308      	movs	r3, #8
 8001630:	001a      	movs	r2, r3
 8001632:	2100      	movs	r1, #0
 8001634:	f004 faba 	bl	8005bac <memset>
	sConfig.Channel = adc_channel;
 8001638:	0021      	movs	r1, r4
 800163a:	187b      	adds	r3, r7, r1
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001640:	187b      	adds	r3, r7, r1
 8001642:	2280      	movs	r2, #128	@ 0x80
 8001644:	0152      	lsls	r2, r2, #5
 8001646:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001648:	187a      	adds	r2, r7, r1
 800164a:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <Get_ADC_Value+0x78>)
 800164c:	0011      	movs	r1, r2
 800164e:	0018      	movs	r0, r3
 8001650:	f001 f978 	bl	8002944 <HAL_ADC_ConfigChannel>
 8001654:	1e03      	subs	r3, r0, #0
 8001656:	d001      	beq.n	800165c <Get_ADC_Value+0x44>
	{
		Error_Handler();
 8001658:	f000 fa5c 	bl	8001b14 <Error_Handler>
	}
	if (HAL_ADC_Start(&hadc) != HAL_OK)
 800165c:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <Get_ADC_Value+0x78>)
 800165e:	0018      	movs	r0, r3
 8001660:	f001 f874 	bl	800274c <HAL_ADC_Start>
 8001664:	1e03      	subs	r3, r0, #0
 8001666:	d001      	beq.n	800166c <Get_ADC_Value+0x54>
	{
		Error_Handler();
 8001668:	f000 fa54 	bl	8001b14 <Error_Handler>
	}
	if (HAL_ADC_PollForConversion(&hadc, 100) != HAL_OK)
 800166c:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <Get_ADC_Value+0x78>)
 800166e:	2164      	movs	r1, #100	@ 0x64
 8001670:	0018      	movs	r0, r3
 8001672:	f001 f8bf 	bl	80027f4 <HAL_ADC_PollForConversion>
 8001676:	1e03      	subs	r3, r0, #0
 8001678:	d001      	beq.n	800167e <Get_ADC_Value+0x66>
	{
		Error_Handler();
 800167a:	f000 fa4b 	bl	8001b14 <Error_Handler>
	}
	return HAL_ADC_GetValue(&hadc);
 800167e:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <Get_ADC_Value+0x78>)
 8001680:	0018      	movs	r0, r3
 8001682:	f001 f953 	bl	800292c <HAL_ADC_GetValue>
 8001686:	0003      	movs	r3, r0
}
 8001688:	0018      	movs	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	b005      	add	sp, #20
 800168e:	bd90      	pop	{r4, r7, pc}
 8001690:	20000084 	.word	0x20000084

08001694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001698:	f000 fe50 	bl	800233c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800169c:	f000 f83c 	bl	8001718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a0:	f000 f9d0 	bl	8001a44 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016a4:	f000 f922 	bl	80018ec <MX_I2C1_Init>
  MX_ADC_Init();
 80016a8:	f000 f8ac 	bl	8001804 <MX_ADC_Init>
  MX_TIM6_Init();
 80016ac:	f000 f95e 	bl	800196c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80016b0:	f000 f998 	bl	80019e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80016b4:	f000 fbde 	bl	8001e74 <ssd1306_Init>
  ssd1306_Fill(Black);
 80016b8:	2000      	movs	r0, #0
 80016ba:	f000 fc47 	bl	8001f4c <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80016be:	f000 fc69 	bl	8001f94 <ssd1306_UpdateScreen>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80016c2:	2380      	movs	r3, #128	@ 0x80
 80016c4:	0219      	lsls	r1, r3, #8
 80016c6:	23a0      	movs	r3, #160	@ 0xa0
 80016c8:	05db      	lsls	r3, r3, #23
 80016ca:	2201      	movs	r2, #1
 80016cc:	0018      	movs	r0, r3
 80016ce:	f001 fe02 	bl	80032d6 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <main+0x78>)
 80016d4:	0018      	movs	r0, r3
 80016d6:	f003 fa9b 	bl	8004c10 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  rotary_state = HAL_GPIO_ReadPin(ROT_CHA_GPIO_Port, ROT_CHA_Pin) << 1;
 80016da:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <main+0x7c>)
 80016dc:	2120      	movs	r1, #32
 80016de:	0018      	movs	r0, r3
 80016e0:	f001 fddc 	bl	800329c <HAL_GPIO_ReadPin>
 80016e4:	0003      	movs	r3, r0
 80016e6:	18db      	adds	r3, r3, r3
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <main+0x80>)
 80016ec:	701a      	strb	r2, [r3, #0]
  rotary_state += HAL_GPIO_ReadPin(ROT_CHB_GPIO_Port, ROT_CHB_Pin);
 80016ee:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <main+0x7c>)
 80016f0:	2110      	movs	r1, #16
 80016f2:	0018      	movs	r0, r3
 80016f4:	f001 fdd2 	bl	800329c <HAL_GPIO_ReadPin>
 80016f8:	0003      	movs	r3, r0
 80016fa:	001a      	movs	r2, r3
 80016fc:	4b05      	ldr	r3, [pc, #20]	@ (8001714 <main+0x80>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	18d3      	adds	r3, r2, r3
 8001702:	b2da      	uxtb	r2, r3
 8001704:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <main+0x80>)
 8001706:	701a      	strb	r2, [r3, #0]
  while (1)
 8001708:	46c0      	nop			@ (mov r8, r8)
 800170a:	e7fd      	b.n	8001708 <main+0x74>
 800170c:	20000134 	.word	0x20000134
 8001710:	50000400 	.word	0x50000400
 8001714:	200001fc 	.word	0x200001fc

08001718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b09d      	sub	sp, #116	@ 0x74
 800171c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171e:	2438      	movs	r4, #56	@ 0x38
 8001720:	193b      	adds	r3, r7, r4
 8001722:	0018      	movs	r0, r3
 8001724:	2338      	movs	r3, #56	@ 0x38
 8001726:	001a      	movs	r2, r3
 8001728:	2100      	movs	r1, #0
 800172a:	f004 fa3f 	bl	8005bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800172e:	2324      	movs	r3, #36	@ 0x24
 8001730:	18fb      	adds	r3, r7, r3
 8001732:	0018      	movs	r0, r3
 8001734:	2314      	movs	r3, #20
 8001736:	001a      	movs	r2, r3
 8001738:	2100      	movs	r1, #0
 800173a:	f004 fa37 	bl	8005bac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	0018      	movs	r0, r3
 8001742:	2320      	movs	r3, #32
 8001744:	001a      	movs	r2, r3
 8001746:	2100      	movs	r1, #0
 8001748:	f004 fa30 	bl	8005bac <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800174c:	4b2b      	ldr	r3, [pc, #172]	@ (80017fc <SystemClock_Config+0xe4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a2b      	ldr	r2, [pc, #172]	@ (8001800 <SystemClock_Config+0xe8>)
 8001752:	401a      	ands	r2, r3
 8001754:	4b29      	ldr	r3, [pc, #164]	@ (80017fc <SystemClock_Config+0xe4>)
 8001756:	2180      	movs	r1, #128	@ 0x80
 8001758:	0109      	lsls	r1, r1, #4
 800175a:	430a      	orrs	r2, r1
 800175c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800175e:	0021      	movs	r1, r4
 8001760:	187b      	adds	r3, r7, r1
 8001762:	2202      	movs	r2, #2
 8001764:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001766:	187b      	adds	r3, r7, r1
 8001768:	2201      	movs	r2, #1
 800176a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800176c:	187b      	adds	r3, r7, r1
 800176e:	2210      	movs	r2, #16
 8001770:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001772:	187b      	adds	r3, r7, r1
 8001774:	2202      	movs	r2, #2
 8001776:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001778:	187b      	adds	r3, r7, r1
 800177a:	2200      	movs	r2, #0
 800177c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800177e:	187b      	adds	r3, r7, r1
 8001780:	2280      	movs	r2, #128	@ 0x80
 8001782:	02d2      	lsls	r2, r2, #11
 8001784:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001786:	187b      	adds	r3, r7, r1
 8001788:	2280      	movs	r2, #128	@ 0x80
 800178a:	03d2      	lsls	r2, r2, #15
 800178c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178e:	187b      	adds	r3, r7, r1
 8001790:	0018      	movs	r0, r3
 8001792:	f002 fae9 	bl	8003d68 <HAL_RCC_OscConfig>
 8001796:	1e03      	subs	r3, r0, #0
 8001798:	d001      	beq.n	800179e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800179a:	f000 f9bb 	bl	8001b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800179e:	2124      	movs	r1, #36	@ 0x24
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	220f      	movs	r2, #15
 80017a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a6:	187b      	adds	r3, r7, r1
 80017a8:	2203      	movs	r2, #3
 80017aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ac:	187b      	adds	r3, r7, r1
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017b2:	187b      	adds	r3, r7, r1
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b8:	187b      	adds	r3, r7, r1
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017be:	187b      	adds	r3, r7, r1
 80017c0:	2101      	movs	r1, #1
 80017c2:	0018      	movs	r0, r3
 80017c4:	f002 fe94 	bl	80044f0 <HAL_RCC_ClockConfig>
 80017c8:	1e03      	subs	r3, r0, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80017cc:	f000 f9a2 	bl	8001b14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	2209      	movs	r2, #9
 80017d4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2200      	movs	r2, #0
 80017e0:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	0018      	movs	r0, r3
 80017e6:	f003 f887 	bl	80048f8 <HAL_RCCEx_PeriphCLKConfig>
 80017ea:	1e03      	subs	r3, r0, #0
 80017ec:	d001      	beq.n	80017f2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80017ee:	f000 f991 	bl	8001b14 <Error_Handler>
  }
}
 80017f2:	46c0      	nop			@ (mov r8, r8)
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b01d      	add	sp, #116	@ 0x74
 80017f8:	bd90      	pop	{r4, r7, pc}
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	40007000 	.word	0x40007000
 8001800:	ffffe7ff 	.word	0xffffe7ff

08001804 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800180a:	003b      	movs	r3, r7
 800180c:	0018      	movs	r0, r3
 800180e:	2308      	movs	r3, #8
 8001810:	001a      	movs	r2, r3
 8001812:	2100      	movs	r1, #0
 8001814:	f004 f9ca 	bl	8005bac <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001818:	4b30      	ldr	r3, [pc, #192]	@ (80018dc <MX_ADC_Init+0xd8>)
 800181a:	4a31      	ldr	r2, [pc, #196]	@ (80018e0 <MX_ADC_Init+0xdc>)
 800181c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800181e:	4b2f      	ldr	r3, [pc, #188]	@ (80018dc <MX_ADC_Init+0xd8>)
 8001820:	2200      	movs	r2, #0
 8001822:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001824:	4b2d      	ldr	r3, [pc, #180]	@ (80018dc <MX_ADC_Init+0xd8>)
 8001826:	2280      	movs	r2, #128	@ 0x80
 8001828:	05d2      	lsls	r2, r2, #23
 800182a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800182c:	4b2b      	ldr	r3, [pc, #172]	@ (80018dc <MX_ADC_Init+0xd8>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001832:	4b2a      	ldr	r3, [pc, #168]	@ (80018dc <MX_ADC_Init+0xd8>)
 8001834:	2200      	movs	r2, #0
 8001836:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001838:	4b28      	ldr	r3, [pc, #160]	@ (80018dc <MX_ADC_Init+0xd8>)
 800183a:	2201      	movs	r2, #1
 800183c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800183e:	4b27      	ldr	r3, [pc, #156]	@ (80018dc <MX_ADC_Init+0xd8>)
 8001840:	2200      	movs	r2, #0
 8001842:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001844:	4b25      	ldr	r3, [pc, #148]	@ (80018dc <MX_ADC_Init+0xd8>)
 8001846:	2220      	movs	r2, #32
 8001848:	2100      	movs	r1, #0
 800184a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800184c:	4b23      	ldr	r3, [pc, #140]	@ (80018dc <MX_ADC_Init+0xd8>)
 800184e:	2221      	movs	r2, #33	@ 0x21
 8001850:	2100      	movs	r1, #0
 8001852:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001854:	4b21      	ldr	r3, [pc, #132]	@ (80018dc <MX_ADC_Init+0xd8>)
 8001856:	2200      	movs	r2, #0
 8001858:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800185a:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <MX_ADC_Init+0xd8>)
 800185c:	22c2      	movs	r2, #194	@ 0xc2
 800185e:	32ff      	adds	r2, #255	@ 0xff
 8001860:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001862:	4b1e      	ldr	r3, [pc, #120]	@ (80018dc <MX_ADC_Init+0xd8>)
 8001864:	222c      	movs	r2, #44	@ 0x2c
 8001866:	2100      	movs	r1, #0
 8001868:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800186a:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <MX_ADC_Init+0xd8>)
 800186c:	2204      	movs	r2, #4
 800186e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001870:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <MX_ADC_Init+0xd8>)
 8001872:	2200      	movs	r2, #0
 8001874:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001876:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <MX_ADC_Init+0xd8>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800187c:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <MX_ADC_Init+0xd8>)
 800187e:	2200      	movs	r2, #0
 8001880:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001882:	4b16      	ldr	r3, [pc, #88]	@ (80018dc <MX_ADC_Init+0xd8>)
 8001884:	2200      	movs	r2, #0
 8001886:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001888:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <MX_ADC_Init+0xd8>)
 800188a:	0018      	movs	r0, r3
 800188c:	f000 fdea 	bl	8002464 <HAL_ADC_Init>
 8001890:	1e03      	subs	r3, r0, #0
 8001892:	d001      	beq.n	8001898 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001894:	f000 f93e 	bl	8001b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001898:	003b      	movs	r3, r7
 800189a:	4a12      	ldr	r2, [pc, #72]	@ (80018e4 <MX_ADC_Init+0xe0>)
 800189c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800189e:	003b      	movs	r3, r7
 80018a0:	2280      	movs	r2, #128	@ 0x80
 80018a2:	0152      	lsls	r2, r2, #5
 80018a4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80018a6:	003a      	movs	r2, r7
 80018a8:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <MX_ADC_Init+0xd8>)
 80018aa:	0011      	movs	r1, r2
 80018ac:	0018      	movs	r0, r3
 80018ae:	f001 f849 	bl	8002944 <HAL_ADC_ConfigChannel>
 80018b2:	1e03      	subs	r3, r0, #0
 80018b4:	d001      	beq.n	80018ba <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80018b6:	f000 f92d 	bl	8001b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80018ba:	003b      	movs	r3, r7
 80018bc:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <MX_ADC_Init+0xe4>)
 80018be:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80018c0:	003a      	movs	r2, r7
 80018c2:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <MX_ADC_Init+0xd8>)
 80018c4:	0011      	movs	r1, r2
 80018c6:	0018      	movs	r0, r3
 80018c8:	f001 f83c 	bl	8002944 <HAL_ADC_ConfigChannel>
 80018cc:	1e03      	subs	r3, r0, #0
 80018ce:	d001      	beq.n	80018d4 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80018d0:	f000 f920 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80018d4:	46c0      	nop			@ (mov r8, r8)
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b002      	add	sp, #8
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000084 	.word	0x20000084
 80018e0:	40012400 	.word	0x40012400
 80018e4:	0c000008 	.word	0x0c000008
 80018e8:	10000010 	.word	0x10000010

080018ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <MX_I2C1_Init+0x74>)
 80018f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001964 <MX_I2C1_Init+0x78>)
 80018f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001960 <MX_I2C1_Init+0x74>)
 80018f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001968 <MX_I2C1_Init+0x7c>)
 80018fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018fc:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <MX_I2C1_Init+0x74>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001902:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <MX_I2C1_Init+0x74>)
 8001904:	2201      	movs	r2, #1
 8001906:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001908:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <MX_I2C1_Init+0x74>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800190e:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <MX_I2C1_Init+0x74>)
 8001910:	2200      	movs	r2, #0
 8001912:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001914:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <MX_I2C1_Init+0x74>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800191a:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <MX_I2C1_Init+0x74>)
 800191c:	2200      	movs	r2, #0
 800191e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001920:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <MX_I2C1_Init+0x74>)
 8001922:	2200      	movs	r2, #0
 8001924:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <MX_I2C1_Init+0x74>)
 8001928:	0018      	movs	r0, r3
 800192a:	f001 fd17 	bl	800335c <HAL_I2C_Init>
 800192e:	1e03      	subs	r3, r0, #0
 8001930:	d001      	beq.n	8001936 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001932:	f000 f8ef 	bl	8001b14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001936:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <MX_I2C1_Init+0x74>)
 8001938:	2100      	movs	r1, #0
 800193a:	0018      	movs	r0, r3
 800193c:	f002 f97c 	bl	8003c38 <HAL_I2CEx_ConfigAnalogFilter>
 8001940:	1e03      	subs	r3, r0, #0
 8001942:	d001      	beq.n	8001948 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001944:	f000 f8e6 	bl	8001b14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001948:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <MX_I2C1_Init+0x74>)
 800194a:	2100      	movs	r1, #0
 800194c:	0018      	movs	r0, r3
 800194e:	f002 f9bf 	bl	8003cd0 <HAL_I2CEx_ConfigDigitalFilter>
 8001952:	1e03      	subs	r3, r0, #0
 8001954:	d001      	beq.n	800195a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001956:	f000 f8dd 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800195a:	46c0      	nop			@ (mov r8, r8)
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200000e0 	.word	0x200000e0
 8001964:	40005400 	.word	0x40005400
 8001968:	00b07cb4 	.word	0x00b07cb4

0800196c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001972:	003b      	movs	r3, r7
 8001974:	0018      	movs	r0, r3
 8001976:	2308      	movs	r3, #8
 8001978:	001a      	movs	r2, r3
 800197a:	2100      	movs	r1, #0
 800197c:	f004 f916 	bl	8005bac <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001980:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <MX_TIM6_Init+0x6c>)
 8001982:	4a16      	ldr	r2, [pc, #88]	@ (80019dc <MX_TIM6_Init+0x70>)
 8001984:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2096;
 8001986:	4b14      	ldr	r3, [pc, #80]	@ (80019d8 <MX_TIM6_Init+0x6c>)
 8001988:	2283      	movs	r2, #131	@ 0x83
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198e:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <MX_TIM6_Init+0x6c>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001994:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <MX_TIM6_Init+0x6c>)
 8001996:	4a12      	ldr	r2, [pc, #72]	@ (80019e0 <MX_TIM6_Init+0x74>)
 8001998:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199a:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <MX_TIM6_Init+0x6c>)
 800199c:	2200      	movs	r2, #0
 800199e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019a0:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <MX_TIM6_Init+0x6c>)
 80019a2:	0018      	movs	r0, r3
 80019a4:	f003 f8f4 	bl	8004b90 <HAL_TIM_Base_Init>
 80019a8:	1e03      	subs	r3, r0, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 80019ac:	f000 f8b2 	bl	8001b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b0:	003b      	movs	r3, r7
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b6:	003b      	movs	r3, r7
 80019b8:	2200      	movs	r2, #0
 80019ba:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019bc:	003a      	movs	r2, r7
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <MX_TIM6_Init+0x6c>)
 80019c0:	0011      	movs	r1, r2
 80019c2:	0018      	movs	r0, r3
 80019c4:	f003 fabe 	bl	8004f44 <HAL_TIMEx_MasterConfigSynchronization>
 80019c8:	1e03      	subs	r3, r0, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 80019cc:	f000 f8a2 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019d0:	46c0      	nop			@ (mov r8, r8)
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b002      	add	sp, #8
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000134 	.word	0x20000134
 80019dc:	40001000 	.word	0x40001000
 80019e0:	000003e7 	.word	0x000003e7

080019e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019e8:	4b14      	ldr	r3, [pc, #80]	@ (8001a3c <MX_USART1_UART_Init+0x58>)
 80019ea:	4a15      	ldr	r2, [pc, #84]	@ (8001a40 <MX_USART1_UART_Init+0x5c>)
 80019ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019ee:	4b13      	ldr	r3, [pc, #76]	@ (8001a3c <MX_USART1_UART_Init+0x58>)
 80019f0:	22e1      	movs	r2, #225	@ 0xe1
 80019f2:	0252      	lsls	r2, r2, #9
 80019f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019f6:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <MX_USART1_UART_Init+0x58>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <MX_USART1_UART_Init+0x58>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <MX_USART1_UART_Init+0x58>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <MX_USART1_UART_Init+0x58>)
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <MX_USART1_UART_Init+0x58>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a14:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <MX_USART1_UART_Init+0x58>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a1a:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <MX_USART1_UART_Init+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a20:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <MX_USART1_UART_Init+0x58>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a26:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <MX_USART1_UART_Init+0x58>)
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f003 fae3 	bl	8004ff4 <HAL_UART_Init>
 8001a2e:	1e03      	subs	r3, r0, #0
 8001a30:	d001      	beq.n	8001a36 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a32:	f000 f86f 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a36:	46c0      	nop			@ (mov r8, r8)
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000174 	.word	0x20000174
 8001a40:	40013800 	.word	0x40013800

08001a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b089      	sub	sp, #36	@ 0x24
 8001a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4a:	240c      	movs	r4, #12
 8001a4c:	193b      	adds	r3, r7, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	2314      	movs	r3, #20
 8001a52:	001a      	movs	r2, r3
 8001a54:	2100      	movs	r1, #0
 8001a56:	f004 f8a9 	bl	8005bac <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	4b2c      	ldr	r3, [pc, #176]	@ (8001b0c <MX_GPIO_Init+0xc8>)
 8001a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b0c <MX_GPIO_Init+0xc8>)
 8001a60:	2101      	movs	r1, #1
 8001a62:	430a      	orrs	r2, r1
 8001a64:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a66:	4b29      	ldr	r3, [pc, #164]	@ (8001b0c <MX_GPIO_Init+0xc8>)
 8001a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a72:	4b26      	ldr	r3, [pc, #152]	@ (8001b0c <MX_GPIO_Init+0xc8>)
 8001a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a76:	4b25      	ldr	r3, [pc, #148]	@ (8001b0c <MX_GPIO_Init+0xc8>)
 8001a78:	2102      	movs	r1, #2
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a7e:	4b23      	ldr	r3, [pc, #140]	@ (8001b0c <MX_GPIO_Init+0xc8>)
 8001a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a82:	2202      	movs	r2, #2
 8001a84:	4013      	ands	r3, r2
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001a8a:	2380      	movs	r3, #128	@ 0x80
 8001a8c:	0219      	lsls	r1, r3, #8
 8001a8e:	23a0      	movs	r3, #160	@ 0xa0
 8001a90:	05db      	lsls	r3, r3, #23
 8001a92:	2200      	movs	r2, #0
 8001a94:	0018      	movs	r0, r3
 8001a96:	f001 fc1e 	bl	80032d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001a9a:	193b      	adds	r3, r7, r4
 8001a9c:	2280      	movs	r2, #128	@ 0x80
 8001a9e:	0212      	lsls	r2, r2, #8
 8001aa0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa2:	193b      	adds	r3, r7, r4
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	193b      	adds	r3, r7, r4
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	193b      	adds	r3, r7, r4
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	193a      	adds	r2, r7, r4
 8001ab6:	23a0      	movs	r3, #160	@ 0xa0
 8001ab8:	05db      	lsls	r3, r3, #23
 8001aba:	0011      	movs	r1, r2
 8001abc:	0018      	movs	r0, r3
 8001abe:	f001 fa77 	bl	8002fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_BUTTON_Pin ROT_CHB_Pin ROT_CHA_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|ROT_CHB_Pin|ROT_CHA_Pin;
 8001ac2:	0021      	movs	r1, r4
 8001ac4:	187b      	adds	r3, r7, r1
 8001ac6:	2238      	movs	r2, #56	@ 0x38
 8001ac8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001aca:	187b      	adds	r3, r7, r1
 8001acc:	22c4      	movs	r2, #196	@ 0xc4
 8001ace:	0392      	lsls	r2, r2, #14
 8001ad0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	187b      	adds	r3, r7, r1
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad8:	187b      	adds	r3, r7, r1
 8001ada:	4a0d      	ldr	r2, [pc, #52]	@ (8001b10 <MX_GPIO_Init+0xcc>)
 8001adc:	0019      	movs	r1, r3
 8001ade:	0010      	movs	r0, r2
 8001ae0:	f001 fa66 	bl	8002fb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 2, 0);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2102      	movs	r1, #2
 8001ae8:	2006      	movs	r0, #6
 8001aea:	f001 f8e5 	bl	8002cb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001aee:	2006      	movs	r0, #6
 8001af0:	f001 f8f7 	bl	8002ce2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2101      	movs	r1, #1
 8001af8:	2007      	movs	r0, #7
 8001afa:	f001 f8dd 	bl	8002cb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001afe:	2007      	movs	r0, #7
 8001b00:	f001 f8ef 	bl	8002ce2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b04:	46c0      	nop			@ (mov r8, r8)
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b009      	add	sp, #36	@ 0x24
 8001b0a:	bd90      	pop	{r4, r7, pc}
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	50000400 	.word	0x50000400

08001b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b18:	b672      	cpsid	i
}
 8001b1a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b1c:	46c0      	nop			@ (mov r8, r8)
 8001b1e:	e7fd      	b.n	8001b1c <Error_Handler+0x8>

08001b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b24:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <HAL_MspInit+0x24>)
 8001b26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_MspInit+0x24>)
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b30:	4b04      	ldr	r3, [pc, #16]	@ (8001b44 <HAL_MspInit+0x24>)
 8001b32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b34:	4b03      	ldr	r3, [pc, #12]	@ (8001b44 <HAL_MspInit+0x24>)
 8001b36:	2180      	movs	r1, #128	@ 0x80
 8001b38:	0549      	lsls	r1, r1, #21
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3e:	46c0      	nop			@ (mov r8, r8)
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000

08001b48 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b089      	sub	sp, #36	@ 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	240c      	movs	r4, #12
 8001b52:	193b      	adds	r3, r7, r4
 8001b54:	0018      	movs	r0, r3
 8001b56:	2314      	movs	r3, #20
 8001b58:	001a      	movs	r2, r3
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	f004 f826 	bl	8005bac <memset>
  if(hadc->Instance==ADC1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a14      	ldr	r2, [pc, #80]	@ (8001bb8 <HAL_ADC_MspInit+0x70>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d122      	bne.n	8001bb0 <HAL_ADC_MspInit+0x68>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b6a:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <HAL_ADC_MspInit+0x74>)
 8001b6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b6e:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <HAL_ADC_MspInit+0x74>)
 8001b70:	2180      	movs	r1, #128	@ 0x80
 8001b72:	0089      	lsls	r1, r1, #2
 8001b74:	430a      	orrs	r2, r1
 8001b76:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b78:	4b10      	ldr	r3, [pc, #64]	@ (8001bbc <HAL_ADC_MspInit+0x74>)
 8001b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <HAL_ADC_MspInit+0x74>)
 8001b7e:	2101      	movs	r1, #1
 8001b80:	430a      	orrs	r2, r1
 8001b82:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b84:	4b0d      	ldr	r3, [pc, #52]	@ (8001bbc <HAL_ADC_MspInit+0x74>)
 8001b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = CURRENT_IN_Pin|VOLTAGE_IN_Pin;
 8001b90:	193b      	adds	r3, r7, r4
 8001b92:	2218      	movs	r2, #24
 8001b94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b96:	193b      	adds	r3, r7, r4
 8001b98:	2203      	movs	r2, #3
 8001b9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	193b      	adds	r3, r7, r4
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba2:	193a      	adds	r2, r7, r4
 8001ba4:	23a0      	movs	r3, #160	@ 0xa0
 8001ba6:	05db      	lsls	r3, r3, #23
 8001ba8:	0011      	movs	r1, r2
 8001baa:	0018      	movs	r0, r3
 8001bac:	f001 fa00 	bl	8002fb0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001bb0:	46c0      	nop			@ (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b009      	add	sp, #36	@ 0x24
 8001bb6:	bd90      	pop	{r4, r7, pc}
 8001bb8:	40012400 	.word	0x40012400
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b089      	sub	sp, #36	@ 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	240c      	movs	r4, #12
 8001bca:	193b      	adds	r3, r7, r4
 8001bcc:	0018      	movs	r0, r3
 8001bce:	2314      	movs	r3, #20
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	f003 ffea 	bl	8005bac <memset>
  if(hi2c->Instance==I2C1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a17      	ldr	r2, [pc, #92]	@ (8001c3c <HAL_I2C_MspInit+0x7c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d128      	bne.n	8001c34 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	4b17      	ldr	r3, [pc, #92]	@ (8001c40 <HAL_I2C_MspInit+0x80>)
 8001be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001be6:	4b16      	ldr	r3, [pc, #88]	@ (8001c40 <HAL_I2C_MspInit+0x80>)
 8001be8:	2102      	movs	r1, #2
 8001bea:	430a      	orrs	r2, r1
 8001bec:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001bee:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <HAL_I2C_MspInit+0x80>)
 8001bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bfa:	0021      	movs	r1, r4
 8001bfc:	187b      	adds	r3, r7, r1
 8001bfe:	22c0      	movs	r2, #192	@ 0xc0
 8001c00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c02:	187b      	adds	r3, r7, r1
 8001c04:	2212      	movs	r2, #18
 8001c06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	187b      	adds	r3, r7, r1
 8001c10:	2203      	movs	r2, #3
 8001c12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001c14:	187b      	adds	r3, r7, r1
 8001c16:	2201      	movs	r2, #1
 8001c18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1a:	187b      	adds	r3, r7, r1
 8001c1c:	4a09      	ldr	r2, [pc, #36]	@ (8001c44 <HAL_I2C_MspInit+0x84>)
 8001c1e:	0019      	movs	r1, r3
 8001c20:	0010      	movs	r0, r2
 8001c22:	f001 f9c5 	bl	8002fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c26:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_I2C_MspInit+0x80>)
 8001c28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c2a:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <HAL_I2C_MspInit+0x80>)
 8001c2c:	2180      	movs	r1, #128	@ 0x80
 8001c2e:	0389      	lsls	r1, r1, #14
 8001c30:	430a      	orrs	r2, r1
 8001c32:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c34:	46c0      	nop			@ (mov r8, r8)
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b009      	add	sp, #36	@ 0x24
 8001c3a:	bd90      	pop	{r4, r7, pc}
 8001c3c:	40005400 	.word	0x40005400
 8001c40:	40021000 	.word	0x40021000
 8001c44:	50000400 	.word	0x50000400

08001c48 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0a      	ldr	r2, [pc, #40]	@ (8001c80 <HAL_TIM_Base_MspInit+0x38>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d10d      	bne.n	8001c76 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <HAL_TIM_Base_MspInit+0x3c>)
 8001c5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c5e:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <HAL_TIM_Base_MspInit+0x3c>)
 8001c60:	2110      	movs	r1, #16
 8001c62:	430a      	orrs	r2, r1
 8001c64:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2103      	movs	r1, #3
 8001c6a:	2011      	movs	r0, #17
 8001c6c:	f001 f824 	bl	8002cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c70:	2011      	movs	r0, #17
 8001c72:	f001 f836 	bl	8002ce2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001c76:	46c0      	nop			@ (mov r8, r8)
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	b002      	add	sp, #8
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	46c0      	nop			@ (mov r8, r8)
 8001c80:	40001000 	.word	0x40001000
 8001c84:	40021000 	.word	0x40021000

08001c88 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b089      	sub	sp, #36	@ 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	240c      	movs	r4, #12
 8001c92:	193b      	adds	r3, r7, r4
 8001c94:	0018      	movs	r0, r3
 8001c96:	2314      	movs	r3, #20
 8001c98:	001a      	movs	r2, r3
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	f003 ff86 	bl	8005bac <memset>
  if(huart->Instance==USART1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a18      	ldr	r2, [pc, #96]	@ (8001d08 <HAL_UART_MspInit+0x80>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d12a      	bne.n	8001d00 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001caa:	4b18      	ldr	r3, [pc, #96]	@ (8001d0c <HAL_UART_MspInit+0x84>)
 8001cac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cae:	4b17      	ldr	r3, [pc, #92]	@ (8001d0c <HAL_UART_MspInit+0x84>)
 8001cb0:	2180      	movs	r1, #128	@ 0x80
 8001cb2:	01c9      	lsls	r1, r1, #7
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb8:	4b14      	ldr	r3, [pc, #80]	@ (8001d0c <HAL_UART_MspInit+0x84>)
 8001cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cbc:	4b13      	ldr	r3, [pc, #76]	@ (8001d0c <HAL_UART_MspInit+0x84>)
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001cc4:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <HAL_UART_MspInit+0x84>)
 8001cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc8:	2201      	movs	r2, #1
 8001cca:	4013      	ands	r3, r2
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cd0:	193b      	adds	r3, r7, r4
 8001cd2:	22c0      	movs	r2, #192	@ 0xc0
 8001cd4:	00d2      	lsls	r2, r2, #3
 8001cd6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	0021      	movs	r1, r4
 8001cda:	187b      	adds	r3, r7, r1
 8001cdc:	2202      	movs	r2, #2
 8001cde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	187b      	adds	r3, r7, r1
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce6:	187b      	adds	r3, r7, r1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	2204      	movs	r2, #4
 8001cf0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	187a      	adds	r2, r7, r1
 8001cf4:	23a0      	movs	r3, #160	@ 0xa0
 8001cf6:	05db      	lsls	r3, r3, #23
 8001cf8:	0011      	movs	r1, r2
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f001 f958 	bl	8002fb0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001d00:	46c0      	nop			@ (mov r8, r8)
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b009      	add	sp, #36	@ 0x24
 8001d06:	bd90      	pop	{r4, r7, pc}
 8001d08:	40013800 	.word	0x40013800
 8001d0c:	40021000 	.word	0x40021000

08001d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d14:	46c0      	nop			@ (mov r8, r8)
 8001d16:	e7fd      	b.n	8001d14 <NMI_Handler+0x4>

08001d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1c:	46c0      	nop			@ (mov r8, r8)
 8001d1e:	e7fd      	b.n	8001d1c <HardFault_Handler+0x4>

08001d20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d24:	46c0      	nop			@ (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d38:	f000 fb54 	bl	80023e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d3c:	46c0      	nop			@ (mov r8, r8)
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */
  User_Button_Interrupt_Handler();
 8001d46:	f7ff fb83 	bl	8001450 <User_Button_Interrupt_Handler>
  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001d4a:	2008      	movs	r0, #8
 8001d4c:	f001 fae0 	bl	8003310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001d50:	46c0      	nop			@ (mov r8, r8)
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
  Rotary_Encoder_Interrupt_Handler();
 8001d5a:	f7ff fb91 	bl	8001480 <Rotary_Encoder_Interrupt_Handler>
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROT_CHB_Pin);
 8001d5e:	2010      	movs	r0, #16
 8001d60:	f001 fad6 	bl	8003310 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ROT_CHA_Pin);
 8001d64:	2020      	movs	r0, #32
 8001d66:	f001 fad3 	bl	8003310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001d6a:	46c0      	nop			@ (mov r8, r8)
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  Timer_Interrupt_Handler();
 8001d74:	f7ff fb58 	bl	8001428 <Timer_Interrupt_Handler>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d78:	4b03      	ldr	r3, [pc, #12]	@ (8001d88 <TIM6_DAC_IRQHandler+0x18>)
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f002 ff94 	bl	8004ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d80:	46c0      	nop			@ (mov r8, r8)
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	46c0      	nop			@ (mov r8, r8)
 8001d88:	20000134 	.word	0x20000134

08001d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d94:	4a14      	ldr	r2, [pc, #80]	@ (8001de8 <_sbrk+0x5c>)
 8001d96:	4b15      	ldr	r3, [pc, #84]	@ (8001dec <_sbrk+0x60>)
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da0:	4b13      	ldr	r3, [pc, #76]	@ (8001df0 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da8:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <_sbrk+0x64>)
 8001daa:	4a12      	ldr	r2, [pc, #72]	@ (8001df4 <_sbrk+0x68>)
 8001dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dae:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	18d3      	adds	r3, r2, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d207      	bcs.n	8001dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dbc:	f003 fefe 	bl	8005bbc <__errno>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	425b      	negs	r3, r3
 8001dca:	e009      	b.n	8001de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dcc:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <_sbrk+0x64>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd2:	4b07      	ldr	r3, [pc, #28]	@ (8001df0 <_sbrk+0x64>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	18d2      	adds	r2, r2, r3
 8001dda:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <_sbrk+0x64>)
 8001ddc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001dde:	68fb      	ldr	r3, [r7, #12]
}
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b006      	add	sp, #24
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20002000 	.word	0x20002000
 8001dec:	00000400 	.word	0x00000400
 8001df0:	200002a4 	.word	0x200002a4
 8001df4:	20000618 	.word	0x20000618

08001df8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dfc:	46c0      	nop			@ (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001e02:	b580      	push	{r7, lr}
 8001e04:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af04      	add	r7, sp, #16
 8001e12:	0002      	movs	r2, r0
 8001e14:	1dfb      	adds	r3, r7, #7
 8001e16:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001e18:	4808      	ldr	r0, [pc, #32]	@ (8001e3c <ssd1306_WriteCommand+0x30>)
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	425b      	negs	r3, r3
 8001e1e:	9302      	str	r3, [sp, #8]
 8001e20:	2301      	movs	r3, #1
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	1dfb      	adds	r3, r7, #7
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2301      	movs	r3, #1
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2178      	movs	r1, #120	@ 0x78
 8001e2e:	f001 fb3b 	bl	80034a8 <HAL_I2C_Mem_Write>
}
 8001e32:	46c0      	nop			@ (mov r8, r8)
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b002      	add	sp, #8
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	46c0      	nop			@ (mov r8, r8)
 8001e3c:	200000e0 	.word	0x200000e0

08001e40 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af04      	add	r7, sp, #16
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	4808      	ldr	r0, [pc, #32]	@ (8001e70 <ssd1306_WriteData+0x30>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	4252      	negs	r2, r2
 8001e54:	9202      	str	r2, [sp, #8]
 8001e56:	9301      	str	r3, [sp, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	2240      	movs	r2, #64	@ 0x40
 8001e60:	2178      	movs	r1, #120	@ 0x78
 8001e62:	f001 fb21 	bl	80034a8 <HAL_I2C_Mem_Write>
}
 8001e66:	46c0      	nop			@ (mov r8, r8)
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b002      	add	sp, #8
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	46c0      	nop			@ (mov r8, r8)
 8001e70:	200000e0 	.word	0x200000e0

08001e74 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001e78:	f7ff ffc3 	bl	8001e02 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001e7c:	2064      	movs	r0, #100	@ 0x64
 8001e7e:	f000 facd 	bl	800241c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001e82:	2000      	movs	r0, #0
 8001e84:	f000 fa0a 	bl	800229c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001e88:	2020      	movs	r0, #32
 8001e8a:	f7ff ffbf 	bl	8001e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f7ff ffbc 	bl	8001e0c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001e94:	20b0      	movs	r0, #176	@ 0xb0
 8001e96:	f7ff ffb9 	bl	8001e0c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001e9a:	20c8      	movs	r0, #200	@ 0xc8
 8001e9c:	f7ff ffb6 	bl	8001e0c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f7ff ffb3 	bl	8001e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001ea6:	2010      	movs	r0, #16
 8001ea8:	f7ff ffb0 	bl	8001e0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001eac:	2040      	movs	r0, #64	@ 0x40
 8001eae:	f7ff ffad 	bl	8001e0c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001eb2:	20ff      	movs	r0, #255	@ 0xff
 8001eb4:	f000 f9da 	bl	800226c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001eb8:	20a1      	movs	r0, #161	@ 0xa1
 8001eba:	f7ff ffa7 	bl	8001e0c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001ebe:	20a6      	movs	r0, #166	@ 0xa6
 8001ec0:	f7ff ffa4 	bl	8001e0c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001ec4:	20a8      	movs	r0, #168	@ 0xa8
 8001ec6:	f7ff ffa1 	bl	8001e0c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8001eca:	201f      	movs	r0, #31
 8001ecc:	f7ff ff9e 	bl	8001e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001ed0:	20a4      	movs	r0, #164	@ 0xa4
 8001ed2:	f7ff ff9b 	bl	8001e0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001ed6:	20d3      	movs	r0, #211	@ 0xd3
 8001ed8:	f7ff ff98 	bl	8001e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001edc:	2000      	movs	r0, #0
 8001ede:	f7ff ff95 	bl	8001e0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ee2:	20d5      	movs	r0, #213	@ 0xd5
 8001ee4:	f7ff ff92 	bl	8001e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001ee8:	20f0      	movs	r0, #240	@ 0xf0
 8001eea:	f7ff ff8f 	bl	8001e0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001eee:	20d9      	movs	r0, #217	@ 0xd9
 8001ef0:	f7ff ff8c 	bl	8001e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001ef4:	2022      	movs	r0, #34	@ 0x22
 8001ef6:	f7ff ff89 	bl	8001e0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001efa:	20da      	movs	r0, #218	@ 0xda
 8001efc:	f7ff ff86 	bl	8001e0c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8001f00:	2002      	movs	r0, #2
 8001f02:	f7ff ff83 	bl	8001e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001f06:	20db      	movs	r0, #219	@ 0xdb
 8001f08:	f7ff ff80 	bl	8001e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001f0c:	2020      	movs	r0, #32
 8001f0e:	f7ff ff7d 	bl	8001e0c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001f12:	208d      	movs	r0, #141	@ 0x8d
 8001f14:	f7ff ff7a 	bl	8001e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001f18:	2014      	movs	r0, #20
 8001f1a:	f7ff ff77 	bl	8001e0c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f000 f9bc 	bl	800229c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001f24:	2000      	movs	r0, #0
 8001f26:	f000 f811 	bl	8001f4c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001f2a:	f000 f833 	bl	8001f94 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001f2e:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <ssd1306_Init+0xd4>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001f34:	4b04      	ldr	r3, [pc, #16]	@ (8001f48 <ssd1306_Init+0xd4>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001f3a:	4b03      	ldr	r3, [pc, #12]	@ (8001f48 <ssd1306_Init+0xd4>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	711a      	strb	r2, [r3, #4]
}
 8001f40:	46c0      	nop			@ (mov r8, r8)
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	46c0      	nop			@ (mov r8, r8)
 8001f48:	200004a8 	.word	0x200004a8

08001f4c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	0002      	movs	r2, r0
 8001f54:	1dfb      	adds	r3, r7, #7
 8001f56:	701a      	strb	r2, [r3, #0]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	e00e      	b.n	8001f7c <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001f5e:	1dfb      	adds	r3, r7, #7
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <ssd1306_Fill+0x1e>
 8001f66:	2100      	movs	r1, #0
 8001f68:	e000      	b.n	8001f6c <ssd1306_Fill+0x20>
 8001f6a:	21ff      	movs	r1, #255	@ 0xff
 8001f6c:	4a08      	ldr	r2, [pc, #32]	@ (8001f90 <ssd1306_Fill+0x44>)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	18d3      	adds	r3, r2, r3
 8001f72:	1c0a      	adds	r2, r1, #0
 8001f74:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	2380      	movs	r3, #128	@ 0x80
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d3eb      	bcc.n	8001f5e <ssd1306_Fill+0x12>
    }
}
 8001f86:	46c0      	nop			@ (mov r8, r8)
 8001f88:	46c0      	nop			@ (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b004      	add	sp, #16
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	200002a8 	.word	0x200002a8

08001f94 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001f9a:	1dfb      	adds	r3, r7, #7
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
 8001fa0:	e01a      	b.n	8001fd8 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001fa2:	1dfb      	adds	r3, r7, #7
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	3b50      	subs	r3, #80	@ 0x50
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	0018      	movs	r0, r3
 8001fac:	f7ff ff2e 	bl	8001e0c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f7ff ff2b 	bl	8001e0c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001fb6:	2010      	movs	r0, #16
 8001fb8:	f7ff ff28 	bl	8001e0c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001fbc:	1dfb      	adds	r3, r7, #7
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	01da      	lsls	r2, r3, #7
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <ssd1306_UpdateScreen+0x58>)
 8001fc4:	18d3      	adds	r3, r2, r3
 8001fc6:	2180      	movs	r1, #128	@ 0x80
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f7ff ff39 	bl	8001e40 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001fce:	1dfb      	adds	r3, r7, #7
 8001fd0:	781a      	ldrb	r2, [r3, #0]
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	3201      	adds	r2, #1
 8001fd6:	701a      	strb	r2, [r3, #0]
 8001fd8:	1dfb      	adds	r3, r7, #7
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d9e0      	bls.n	8001fa2 <ssd1306_UpdateScreen+0xe>
    }
}
 8001fe0:	46c0      	nop			@ (mov r8, r8)
 8001fe2:	46c0      	nop			@ (mov r8, r8)
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b002      	add	sp, #8
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	46c0      	nop			@ (mov r8, r8)
 8001fec:	200002a8 	.word	0x200002a8

08001ff0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	0004      	movs	r4, r0
 8001ff8:	0008      	movs	r0, r1
 8001ffa:	0011      	movs	r1, r2
 8001ffc:	1dfb      	adds	r3, r7, #7
 8001ffe:	1c22      	adds	r2, r4, #0
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	1dbb      	adds	r3, r7, #6
 8002004:	1c02      	adds	r2, r0, #0
 8002006:	701a      	strb	r2, [r3, #0]
 8002008:	1d7b      	adds	r3, r7, #5
 800200a:	1c0a      	adds	r2, r1, #0
 800200c:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800200e:	1dfb      	adds	r3, r7, #7
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	b25b      	sxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	db47      	blt.n	80020a8 <ssd1306_DrawPixel+0xb8>
 8002018:	1dbb      	adds	r3, r7, #6
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b1f      	cmp	r3, #31
 800201e:	d843      	bhi.n	80020a8 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002020:	1d7b      	adds	r3, r7, #5
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d11e      	bne.n	8002066 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002028:	1dfb      	adds	r3, r7, #7
 800202a:	781a      	ldrb	r2, [r3, #0]
 800202c:	1dbb      	adds	r3, r7, #6
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	08db      	lsrs	r3, r3, #3
 8002032:	b2d8      	uxtb	r0, r3
 8002034:	0003      	movs	r3, r0
 8002036:	01db      	lsls	r3, r3, #7
 8002038:	18d3      	adds	r3, r2, r3
 800203a:	4a1d      	ldr	r2, [pc, #116]	@ (80020b0 <ssd1306_DrawPixel+0xc0>)
 800203c:	5cd3      	ldrb	r3, [r2, r3]
 800203e:	b25a      	sxtb	r2, r3
 8002040:	1dbb      	adds	r3, r7, #6
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2107      	movs	r1, #7
 8002046:	400b      	ands	r3, r1
 8002048:	2101      	movs	r1, #1
 800204a:	4099      	lsls	r1, r3
 800204c:	000b      	movs	r3, r1
 800204e:	b25b      	sxtb	r3, r3
 8002050:	4313      	orrs	r3, r2
 8002052:	b259      	sxtb	r1, r3
 8002054:	1dfb      	adds	r3, r7, #7
 8002056:	781a      	ldrb	r2, [r3, #0]
 8002058:	0003      	movs	r3, r0
 800205a:	01db      	lsls	r3, r3, #7
 800205c:	18d3      	adds	r3, r2, r3
 800205e:	b2c9      	uxtb	r1, r1
 8002060:	4a13      	ldr	r2, [pc, #76]	@ (80020b0 <ssd1306_DrawPixel+0xc0>)
 8002062:	54d1      	strb	r1, [r2, r3]
 8002064:	e021      	b.n	80020aa <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002066:	1dfb      	adds	r3, r7, #7
 8002068:	781a      	ldrb	r2, [r3, #0]
 800206a:	1dbb      	adds	r3, r7, #6
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	08db      	lsrs	r3, r3, #3
 8002070:	b2d8      	uxtb	r0, r3
 8002072:	0003      	movs	r3, r0
 8002074:	01db      	lsls	r3, r3, #7
 8002076:	18d3      	adds	r3, r2, r3
 8002078:	4a0d      	ldr	r2, [pc, #52]	@ (80020b0 <ssd1306_DrawPixel+0xc0>)
 800207a:	5cd3      	ldrb	r3, [r2, r3]
 800207c:	b25b      	sxtb	r3, r3
 800207e:	1dba      	adds	r2, r7, #6
 8002080:	7812      	ldrb	r2, [r2, #0]
 8002082:	2107      	movs	r1, #7
 8002084:	400a      	ands	r2, r1
 8002086:	2101      	movs	r1, #1
 8002088:	4091      	lsls	r1, r2
 800208a:	000a      	movs	r2, r1
 800208c:	b252      	sxtb	r2, r2
 800208e:	43d2      	mvns	r2, r2
 8002090:	b252      	sxtb	r2, r2
 8002092:	4013      	ands	r3, r2
 8002094:	b259      	sxtb	r1, r3
 8002096:	1dfb      	adds	r3, r7, #7
 8002098:	781a      	ldrb	r2, [r3, #0]
 800209a:	0003      	movs	r3, r0
 800209c:	01db      	lsls	r3, r3, #7
 800209e:	18d3      	adds	r3, r2, r3
 80020a0:	b2c9      	uxtb	r1, r1
 80020a2:	4a03      	ldr	r2, [pc, #12]	@ (80020b0 <ssd1306_DrawPixel+0xc0>)
 80020a4:	54d1      	strb	r1, [r2, r3]
 80020a6:	e000      	b.n	80020aa <ssd1306_DrawPixel+0xba>
        return;
 80020a8:	46c0      	nop			@ (mov r8, r8)
    }
}
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b003      	add	sp, #12
 80020ae:	bd90      	pop	{r4, r7, pc}
 80020b0:	200002a8 	.word	0x200002a8

080020b4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b089      	sub	sp, #36	@ 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	0004      	movs	r4, r0
 80020bc:	1d38      	adds	r0, r7, #4
 80020be:	6001      	str	r1, [r0, #0]
 80020c0:	6042      	str	r2, [r0, #4]
 80020c2:	0019      	movs	r1, r3
 80020c4:	200f      	movs	r0, #15
 80020c6:	183b      	adds	r3, r7, r0
 80020c8:	1c22      	adds	r2, r4, #0
 80020ca:	701a      	strb	r2, [r3, #0]
 80020cc:	230e      	movs	r3, #14
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	1c0a      	adds	r2, r1, #0
 80020d2:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80020d4:	183b      	adds	r3, r7, r0
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b1f      	cmp	r3, #31
 80020da:	d903      	bls.n	80020e4 <ssd1306_WriteChar+0x30>
 80020dc:	183b      	adds	r3, r7, r0
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b7e      	cmp	r3, #126	@ 0x7e
 80020e2:	d901      	bls.n	80020e8 <ssd1306_WriteChar+0x34>
        return 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	e077      	b.n	80021d8 <ssd1306_WriteChar+0x124>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80020e8:	4b3d      	ldr	r3, [pc, #244]	@ (80021e0 <ssd1306_WriteChar+0x12c>)
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	001a      	movs	r2, r3
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	18d3      	adds	r3, r2, r3
 80020f4:	2b80      	cmp	r3, #128	@ 0x80
 80020f6:	dc07      	bgt.n	8002108 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80020f8:	4b39      	ldr	r3, [pc, #228]	@ (80021e0 <ssd1306_WriteChar+0x12c>)
 80020fa:	885b      	ldrh	r3, [r3, #2]
 80020fc:	001a      	movs	r2, r3
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	785b      	ldrb	r3, [r3, #1]
 8002102:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002104:	2b20      	cmp	r3, #32
 8002106:	dd01      	ble.n	800210c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8002108:	2300      	movs	r3, #0
 800210a:	e065      	b.n	80021d8 <ssd1306_WriteChar+0x124>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
 8002110:	e051      	b.n	80021b6 <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	230f      	movs	r3, #15
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	3b20      	subs	r3, #32
 800211e:	1d39      	adds	r1, r7, #4
 8002120:	7849      	ldrb	r1, [r1, #1]
 8002122:	434b      	muls	r3, r1
 8002124:	0019      	movs	r1, r3
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	18cb      	adds	r3, r1, r3
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	18d3      	adds	r3, r2, r3
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	e035      	b.n	80021a4 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	409a      	lsls	r2, r3
 800213e:	2380      	movs	r3, #128	@ 0x80
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	4013      	ands	r3, r2
 8002144:	d014      	beq.n	8002170 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002146:	4b26      	ldr	r3, [pc, #152]	@ (80021e0 <ssd1306_WriteChar+0x12c>)
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	18d3      	adds	r3, r2, r3
 8002152:	b2d8      	uxtb	r0, r3
 8002154:	4b22      	ldr	r3, [pc, #136]	@ (80021e0 <ssd1306_WriteChar+0x12c>)
 8002156:	885b      	ldrh	r3, [r3, #2]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	18d3      	adds	r3, r2, r3
 8002160:	b2d9      	uxtb	r1, r3
 8002162:	230e      	movs	r3, #14
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	001a      	movs	r2, r3
 800216a:	f7ff ff41 	bl	8001ff0 <ssd1306_DrawPixel>
 800216e:	e016      	b.n	800219e <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002170:	4b1b      	ldr	r3, [pc, #108]	@ (80021e0 <ssd1306_WriteChar+0x12c>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	18d3      	adds	r3, r2, r3
 800217c:	b2d8      	uxtb	r0, r3
 800217e:	4b18      	ldr	r3, [pc, #96]	@ (80021e0 <ssd1306_WriteChar+0x12c>)
 8002180:	885b      	ldrh	r3, [r3, #2]
 8002182:	b2da      	uxtb	r2, r3
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	18d3      	adds	r3, r2, r3
 800218a:	b2d9      	uxtb	r1, r3
 800218c:	230e      	movs	r3, #14
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	425a      	negs	r2, r3
 8002194:	4153      	adcs	r3, r2
 8002196:	b2db      	uxtb	r3, r3
 8002198:	001a      	movs	r2, r3
 800219a:	f7ff ff29 	bl	8001ff0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	3301      	adds	r3, #1
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	001a      	movs	r2, r3
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d3c3      	bcc.n	8002138 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	3301      	adds	r3, #1
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	785b      	ldrb	r3, [r3, #1]
 80021ba:	001a      	movs	r2, r3
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	4293      	cmp	r3, r2
 80021c0:	d3a7      	bcc.n	8002112 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80021c2:	4b07      	ldr	r3, [pc, #28]	@ (80021e0 <ssd1306_WriteChar+0x12c>)
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	1d3a      	adds	r2, r7, #4
 80021c8:	7812      	ldrb	r2, [r2, #0]
 80021ca:	189b      	adds	r3, r3, r2
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	4b04      	ldr	r3, [pc, #16]	@ (80021e0 <ssd1306_WriteChar+0x12c>)
 80021d0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80021d2:	230f      	movs	r3, #15
 80021d4:	18fb      	adds	r3, r7, r3
 80021d6:	781b      	ldrb	r3, [r3, #0]
}
 80021d8:	0018      	movs	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	b009      	add	sp, #36	@ 0x24
 80021de:	bd90      	pop	{r4, r7, pc}
 80021e0:	200004a8 	.word	0x200004a8

080021e4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	1d38      	adds	r0, r7, #4
 80021ee:	6001      	str	r1, [r0, #0]
 80021f0:	6042      	str	r2, [r0, #4]
 80021f2:	001a      	movs	r2, r3
 80021f4:	1cfb      	adds	r3, r7, #3
 80021f6:	701a      	strb	r2, [r3, #0]
    while (*str) {
 80021f8:	e014      	b.n	8002224 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	7818      	ldrb	r0, [r3, #0]
 80021fe:	1cfb      	adds	r3, r7, #3
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	1d3a      	adds	r2, r7, #4
 8002204:	6811      	ldr	r1, [r2, #0]
 8002206:	6852      	ldr	r2, [r2, #4]
 8002208:	f7ff ff54 	bl	80020b4 <ssd1306_WriteChar>
 800220c:	0003      	movs	r3, r0
 800220e:	001a      	movs	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d002      	beq.n	800221e <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	e008      	b.n	8002230 <ssd1306_WriteString+0x4c>
        }
        str++;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3301      	adds	r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1e6      	bne.n	80021fa <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	781b      	ldrb	r3, [r3, #0]
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	b004      	add	sp, #16
 8002236:	bd80      	pop	{r7, pc}

08002238 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	0002      	movs	r2, r0
 8002240:	1dfb      	adds	r3, r7, #7
 8002242:	701a      	strb	r2, [r3, #0]
 8002244:	1dbb      	adds	r3, r7, #6
 8002246:	1c0a      	adds	r2, r1, #0
 8002248:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 800224a:	1dfb      	adds	r3, r7, #7
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	b29a      	uxth	r2, r3
 8002250:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <ssd1306_SetCursor+0x30>)
 8002252:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002254:	1dbb      	adds	r3, r7, #6
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	b29a      	uxth	r2, r3
 800225a:	4b03      	ldr	r3, [pc, #12]	@ (8002268 <ssd1306_SetCursor+0x30>)
 800225c:	805a      	strh	r2, [r3, #2]
}
 800225e:	46c0      	nop			@ (mov r8, r8)
 8002260:	46bd      	mov	sp, r7
 8002262:	b002      	add	sp, #8
 8002264:	bd80      	pop	{r7, pc}
 8002266:	46c0      	nop			@ (mov r8, r8)
 8002268:	200004a8 	.word	0x200004a8

0800226c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	0002      	movs	r2, r0
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002278:	210f      	movs	r1, #15
 800227a:	187b      	adds	r3, r7, r1
 800227c:	2281      	movs	r2, #129	@ 0x81
 800227e:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002280:	187b      	adds	r3, r7, r1
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	0018      	movs	r0, r3
 8002286:	f7ff fdc1 	bl	8001e0c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800228a:	1dfb      	adds	r3, r7, #7
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	0018      	movs	r0, r3
 8002290:	f7ff fdbc 	bl	8001e0c <ssd1306_WriteCommand>
}
 8002294:	46c0      	nop			@ (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b004      	add	sp, #16
 800229a:	bd80      	pop	{r7, pc}

0800229c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	0002      	movs	r2, r0
 80022a4:	1dfb      	adds	r3, r7, #7
 80022a6:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 80022a8:	1dfb      	adds	r3, r7, #7
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 80022b0:	230f      	movs	r3, #15
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	22af      	movs	r2, #175	@ 0xaf
 80022b6:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 80022b8:	4b0a      	ldr	r3, [pc, #40]	@ (80022e4 <ssd1306_SetDisplayOn+0x48>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	715a      	strb	r2, [r3, #5]
 80022be:	e006      	b.n	80022ce <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 80022c0:	230f      	movs	r3, #15
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	22ae      	movs	r2, #174	@ 0xae
 80022c6:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 80022c8:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <ssd1306_SetDisplayOn+0x48>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80022ce:	230f      	movs	r3, #15
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	0018      	movs	r0, r3
 80022d6:	f7ff fd99 	bl	8001e0c <ssd1306_WriteCommand>
}
 80022da:	46c0      	nop			@ (mov r8, r8)
 80022dc:	46bd      	mov	sp, r7
 80022de:	b004      	add	sp, #16
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			@ (mov r8, r8)
 80022e4:	200004a8 	.word	0x200004a8

080022e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80022e8:	480d      	ldr	r0, [pc, #52]	@ (8002320 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80022ea:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80022ec:	f7ff fd84 	bl	8001df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022f0:	480c      	ldr	r0, [pc, #48]	@ (8002324 <LoopForever+0x6>)
  ldr r1, =_edata
 80022f2:	490d      	ldr	r1, [pc, #52]	@ (8002328 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022f4:	4a0d      	ldr	r2, [pc, #52]	@ (800232c <LoopForever+0xe>)
  movs r3, #0
 80022f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f8:	e002      	b.n	8002300 <LoopCopyDataInit>

080022fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022fe:	3304      	adds	r3, #4

08002300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002304:	d3f9      	bcc.n	80022fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002306:	4a0a      	ldr	r2, [pc, #40]	@ (8002330 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002308:	4c0a      	ldr	r4, [pc, #40]	@ (8002334 <LoopForever+0x16>)
  movs r3, #0
 800230a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800230c:	e001      	b.n	8002312 <LoopFillZerobss>

0800230e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800230e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002310:	3204      	adds	r2, #4

08002312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002314:	d3fb      	bcc.n	800230e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002316:	f003 fc57 	bl	8005bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800231a:	f7ff f9bb 	bl	8001694 <main>

0800231e <LoopForever>:

LoopForever:
    b LoopForever
 800231e:	e7fe      	b.n	800231e <LoopForever>
   ldr   r0, =_estack
 8002320:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002328:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800232c:	08006ee0 	.word	0x08006ee0
  ldr r2, =_sbss
 8002330:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002334:	20000614 	.word	0x20000614

08002338 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002338:	e7fe      	b.n	8002338 <ADC1_COMP_IRQHandler>
	...

0800233c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002342:	1dfb      	adds	r3, r7, #7
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002348:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <HAL_Init+0x3c>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <HAL_Init+0x3c>)
 800234e:	2140      	movs	r1, #64	@ 0x40
 8002350:	430a      	orrs	r2, r1
 8002352:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002354:	2000      	movs	r0, #0
 8002356:	f000 f811 	bl	800237c <HAL_InitTick>
 800235a:	1e03      	subs	r3, r0, #0
 800235c:	d003      	beq.n	8002366 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800235e:	1dfb      	adds	r3, r7, #7
 8002360:	2201      	movs	r2, #1
 8002362:	701a      	strb	r2, [r3, #0]
 8002364:	e001      	b.n	800236a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002366:	f7ff fbdb 	bl	8001b20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800236a:	1dfb      	adds	r3, r7, #7
 800236c:	781b      	ldrb	r3, [r3, #0]
}
 800236e:	0018      	movs	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	b002      	add	sp, #8
 8002374:	bd80      	pop	{r7, pc}
 8002376:	46c0      	nop			@ (mov r8, r8)
 8002378:	40022000 	.word	0x40022000

0800237c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800237c:	b590      	push	{r4, r7, lr}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002384:	4b14      	ldr	r3, [pc, #80]	@ (80023d8 <HAL_InitTick+0x5c>)
 8002386:	681c      	ldr	r4, [r3, #0]
 8002388:	4b14      	ldr	r3, [pc, #80]	@ (80023dc <HAL_InitTick+0x60>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	0019      	movs	r1, r3
 800238e:	23fa      	movs	r3, #250	@ 0xfa
 8002390:	0098      	lsls	r0, r3, #2
 8002392:	f7fd fec3 	bl	800011c <__udivsi3>
 8002396:	0003      	movs	r3, r0
 8002398:	0019      	movs	r1, r3
 800239a:	0020      	movs	r0, r4
 800239c:	f7fd febe 	bl	800011c <__udivsi3>
 80023a0:	0003      	movs	r3, r0
 80023a2:	0018      	movs	r0, r3
 80023a4:	f000 fcad 	bl	8002d02 <HAL_SYSTICK_Config>
 80023a8:	1e03      	subs	r3, r0, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e00f      	b.n	80023d0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d80b      	bhi.n	80023ce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	2301      	movs	r3, #1
 80023ba:	425b      	negs	r3, r3
 80023bc:	2200      	movs	r2, #0
 80023be:	0018      	movs	r0, r3
 80023c0:	f000 fc7a 	bl	8002cb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023c4:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <HAL_InitTick+0x64>)
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e000      	b.n	80023d0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
}
 80023d0:	0018      	movs	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b003      	add	sp, #12
 80023d6:	bd90      	pop	{r4, r7, pc}
 80023d8:	20000004 	.word	0x20000004
 80023dc:	20000014 	.word	0x20000014
 80023e0:	20000010 	.word	0x20000010

080023e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <HAL_IncTick+0x1c>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	001a      	movs	r2, r3
 80023ee:	4b05      	ldr	r3, [pc, #20]	@ (8002404 <HAL_IncTick+0x20>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	18d2      	adds	r2, r2, r3
 80023f4:	4b03      	ldr	r3, [pc, #12]	@ (8002404 <HAL_IncTick+0x20>)
 80023f6:	601a      	str	r2, [r3, #0]
}
 80023f8:	46c0      	nop			@ (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	20000014 	.word	0x20000014
 8002404:	200004b0 	.word	0x200004b0

08002408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  return uwTick;
 800240c:	4b02      	ldr	r3, [pc, #8]	@ (8002418 <HAL_GetTick+0x10>)
 800240e:	681b      	ldr	r3, [r3, #0]
}
 8002410:	0018      	movs	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	46c0      	nop			@ (mov r8, r8)
 8002418:	200004b0 	.word	0x200004b0

0800241c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002424:	f7ff fff0 	bl	8002408 <HAL_GetTick>
 8002428:	0003      	movs	r3, r0
 800242a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3301      	adds	r3, #1
 8002434:	d005      	beq.n	8002442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002436:	4b0a      	ldr	r3, [pc, #40]	@ (8002460 <HAL_Delay+0x44>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	001a      	movs	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	189b      	adds	r3, r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	f7ff ffe0 	bl	8002408 <HAL_GetTick>
 8002448:	0002      	movs	r2, r0
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	429a      	cmp	r2, r3
 8002452:	d8f7      	bhi.n	8002444 <HAL_Delay+0x28>
  {
  }
}
 8002454:	46c0      	nop			@ (mov r8, r8)
 8002456:	46c0      	nop			@ (mov r8, r8)
 8002458:	46bd      	mov	sp, r7
 800245a:	b004      	add	sp, #16
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			@ (mov r8, r8)
 8002460:	20000014 	.word	0x20000014

08002464 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e159      	b.n	800272a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10a      	bne.n	8002494 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2250      	movs	r2, #80	@ 0x50
 8002488:	2100      	movs	r1, #0
 800248a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	0018      	movs	r0, r3
 8002490:	f7ff fb5a 	bl	8001b48 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002498:	2210      	movs	r2, #16
 800249a:	4013      	ands	r3, r2
 800249c:	2b10      	cmp	r3, #16
 800249e:	d005      	beq.n	80024ac <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2204      	movs	r2, #4
 80024a8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80024aa:	d00b      	beq.n	80024c4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b0:	2210      	movs	r2, #16
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2250      	movs	r2, #80	@ 0x50
 80024bc:	2100      	movs	r1, #0
 80024be:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e132      	b.n	800272a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c8:	4a9a      	ldr	r2, [pc, #616]	@ (8002734 <HAL_ADC_Init+0x2d0>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	2202      	movs	r2, #2
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2203      	movs	r2, #3
 80024dc:	4013      	ands	r3, r2
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d108      	bne.n	80024f4 <HAL_ADC_Init+0x90>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2201      	movs	r2, #1
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_ADC_Init+0x90>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <HAL_ADC_Init+0x92>
 80024f4:	2300      	movs	r3, #0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d149      	bne.n	800258e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	23c0      	movs	r3, #192	@ 0xc0
 8002500:	061b      	lsls	r3, r3, #24
 8002502:	429a      	cmp	r2, r3
 8002504:	d00b      	beq.n	800251e <HAL_ADC_Init+0xba>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	2380      	movs	r3, #128	@ 0x80
 800250c:	05db      	lsls	r3, r3, #23
 800250e:	429a      	cmp	r2, r3
 8002510:	d005      	beq.n	800251e <HAL_ADC_Init+0xba>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	2380      	movs	r3, #128	@ 0x80
 8002518:	061b      	lsls	r3, r3, #24
 800251a:	429a      	cmp	r2, r3
 800251c:	d111      	bne.n	8002542 <HAL_ADC_Init+0xde>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	691a      	ldr	r2, [r3, #16]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	0092      	lsls	r2, r2, #2
 800252a:	0892      	lsrs	r2, r2, #2
 800252c:	611a      	str	r2, [r3, #16]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6919      	ldr	r1, [r3, #16]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	611a      	str	r2, [r3, #16]
 8002540:	e014      	b.n	800256c <HAL_ADC_Init+0x108>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	0092      	lsls	r2, r2, #2
 800254e:	0892      	lsrs	r2, r2, #2
 8002550:	611a      	str	r2, [r3, #16]
 8002552:	4b79      	ldr	r3, [pc, #484]	@ (8002738 <HAL_ADC_Init+0x2d4>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	4b78      	ldr	r3, [pc, #480]	@ (8002738 <HAL_ADC_Init+0x2d4>)
 8002558:	4978      	ldr	r1, [pc, #480]	@ (800273c <HAL_ADC_Init+0x2d8>)
 800255a:	400a      	ands	r2, r1
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	4b76      	ldr	r3, [pc, #472]	@ (8002738 <HAL_ADC_Init+0x2d4>)
 8002560:	6819      	ldr	r1, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	4b74      	ldr	r3, [pc, #464]	@ (8002738 <HAL_ADC_Init+0x2d4>)
 8002568:	430a      	orrs	r2, r1
 800256a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2118      	movs	r1, #24
 8002578:	438a      	bics	r2, r1
 800257a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68d9      	ldr	r1, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800258e:	4b6a      	ldr	r3, [pc, #424]	@ (8002738 <HAL_ADC_Init+0x2d4>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4b69      	ldr	r3, [pc, #420]	@ (8002738 <HAL_ADC_Init+0x2d4>)
 8002594:	496a      	ldr	r1, [pc, #424]	@ (8002740 <HAL_ADC_Init+0x2dc>)
 8002596:	400a      	ands	r2, r1
 8002598:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800259a:	4b67      	ldr	r3, [pc, #412]	@ (8002738 <HAL_ADC_Init+0x2d4>)
 800259c:	6819      	ldr	r1, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a2:	065a      	lsls	r2, r3, #25
 80025a4:	4b64      	ldr	r3, [pc, #400]	@ (8002738 <HAL_ADC_Init+0x2d4>)
 80025a6:	430a      	orrs	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	2380      	movs	r3, #128	@ 0x80
 80025b2:	055b      	lsls	r3, r3, #21
 80025b4:	4013      	ands	r3, r2
 80025b6:	d108      	bne.n	80025ca <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2180      	movs	r1, #128	@ 0x80
 80025c4:	0549      	lsls	r1, r1, #21
 80025c6:	430a      	orrs	r2, r1
 80025c8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	495b      	ldr	r1, [pc, #364]	@ (8002744 <HAL_ADC_Init+0x2e0>)
 80025d6:	400a      	ands	r2, r1
 80025d8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68d9      	ldr	r1, [r3, #12]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d101      	bne.n	80025f0 <HAL_ADC_Init+0x18c>
 80025ec:	2304      	movs	r3, #4
 80025ee:	e000      	b.n	80025f2 <HAL_ADC_Init+0x18e>
 80025f0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80025f2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2020      	movs	r0, #32
 80025f8:	5c1b      	ldrb	r3, [r3, r0]
 80025fa:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80025fc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	202c      	movs	r0, #44	@ 0x2c
 8002602:	5c1b      	ldrb	r3, [r3, r0]
 8002604:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002606:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800260c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002614:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800261c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800262a:	23c2      	movs	r3, #194	@ 0xc2
 800262c:	33ff      	adds	r3, #255	@ 0xff
 800262e:	429a      	cmp	r2, r3
 8002630:	d00b      	beq.n	800264a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68d9      	ldr	r1, [r3, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2221      	movs	r2, #33	@ 0x21
 800264e:	5c9b      	ldrb	r3, [r3, r2]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d11a      	bne.n	800268a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2220      	movs	r2, #32
 8002658:	5c9b      	ldrb	r3, [r3, r2]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2180      	movs	r1, #128	@ 0x80
 800266a:	0249      	lsls	r1, r1, #9
 800266c:	430a      	orrs	r2, r1
 800266e:	60da      	str	r2, [r3, #12]
 8002670:	e00b      	b.n	800268a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002676:	2220      	movs	r2, #32
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002682:	2201      	movs	r2, #1
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800268e:	2b01      	cmp	r3, #1
 8002690:	d11f      	bne.n	80026d2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	492a      	ldr	r1, [pc, #168]	@ (8002748 <HAL_ADC_Init+0x2e4>)
 800269e:	400a      	ands	r2, r1
 80026a0:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6919      	ldr	r1, [r3, #16]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80026b0:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80026b6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691a      	ldr	r2, [r3, #16]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2101      	movs	r1, #1
 80026cc:	430a      	orrs	r2, r1
 80026ce:	611a      	str	r2, [r3, #16]
 80026d0:	e00e      	b.n	80026f0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	2201      	movs	r2, #1
 80026da:	4013      	ands	r3, r2
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d107      	bne.n	80026f0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2101      	movs	r1, #1
 80026ec:	438a      	bics	r2, r1
 80026ee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2107      	movs	r1, #7
 80026fc:	438a      	bics	r2, r1
 80026fe:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6959      	ldr	r1, [r3, #20]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271c:	2203      	movs	r2, #3
 800271e:	4393      	bics	r3, r2
 8002720:	2201      	movs	r2, #1
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b002      	add	sp, #8
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			@ (mov r8, r8)
 8002734:	fffffefd 	.word	0xfffffefd
 8002738:	40012708 	.word	0x40012708
 800273c:	ffc3ffff 	.word	0xffc3ffff
 8002740:	fdffffff 	.word	0xfdffffff
 8002744:	fffe0219 	.word	0xfffe0219
 8002748:	fffffc03 	.word	0xfffffc03

0800274c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800274c:	b590      	push	{r4, r7, lr}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002754:	230f      	movs	r3, #15
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2204      	movs	r2, #4
 8002764:	4013      	ands	r3, r2
 8002766:	d138      	bne.n	80027da <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2250      	movs	r2, #80	@ 0x50
 800276c:	5c9b      	ldrb	r3, [r3, r2]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_ADC_Start+0x2a>
 8002772:	2302      	movs	r3, #2
 8002774:	e038      	b.n	80027e8 <HAL_ADC_Start+0x9c>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2250      	movs	r2, #80	@ 0x50
 800277a:	2101      	movs	r1, #1
 800277c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d007      	beq.n	8002796 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002786:	230f      	movs	r3, #15
 8002788:	18fc      	adds	r4, r7, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	0018      	movs	r0, r3
 800278e:	f000 f95f 	bl	8002a50 <ADC_Enable>
 8002792:	0003      	movs	r3, r0
 8002794:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002796:	230f      	movs	r3, #15
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d120      	bne.n	80027e2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a4:	4a12      	ldr	r2, [pc, #72]	@ (80027f0 <HAL_ADC_Start+0xa4>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	2280      	movs	r2, #128	@ 0x80
 80027aa:	0052      	lsls	r2, r2, #1
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2250      	movs	r2, #80	@ 0x50
 80027bc:	2100      	movs	r1, #0
 80027be:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	221c      	movs	r2, #28
 80027c6:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2104      	movs	r1, #4
 80027d4:	430a      	orrs	r2, r1
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	e003      	b.n	80027e2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027da:	230f      	movs	r3, #15
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	2202      	movs	r2, #2
 80027e0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80027e2:	230f      	movs	r3, #15
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	781b      	ldrb	r3, [r3, #0]
}
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b005      	add	sp, #20
 80027ee:	bd90      	pop	{r4, r7, pc}
 80027f0:	fffff0fe 	.word	0xfffff0fe

080027f4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	2b08      	cmp	r3, #8
 800280c:	d102      	bne.n	8002814 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800280e:	2308      	movs	r3, #8
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	e014      	b.n	800283e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2201      	movs	r2, #1
 800281c:	4013      	ands	r3, r2
 800281e:	2b01      	cmp	r3, #1
 8002820:	d10b      	bne.n	800283a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002826:	2220      	movs	r2, #32
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2250      	movs	r2, #80	@ 0x50
 8002832:	2100      	movs	r1, #0
 8002834:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e072      	b.n	8002920 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800283a:	230c      	movs	r3, #12
 800283c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800283e:	f7ff fde3 	bl	8002408 <HAL_GetTick>
 8002842:	0003      	movs	r3, r0
 8002844:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002846:	e01f      	b.n	8002888 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	3301      	adds	r3, #1
 800284c:	d01c      	beq.n	8002888 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d007      	beq.n	8002864 <HAL_ADC_PollForConversion+0x70>
 8002854:	f7ff fdd8 	bl	8002408 <HAL_GetTick>
 8002858:	0002      	movs	r2, r0
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d211      	bcs.n	8002888 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4013      	ands	r3, r2
 800286e:	d10b      	bne.n	8002888 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002874:	2204      	movs	r2, #4
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2250      	movs	r2, #80	@ 0x50
 8002880:	2100      	movs	r1, #0
 8002882:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e04b      	b.n	8002920 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4013      	ands	r3, r2
 8002892:	d0d9      	beq.n	8002848 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002898:	2280      	movs	r2, #128	@ 0x80
 800289a:	0092      	lsls	r2, r2, #2
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	23c0      	movs	r3, #192	@ 0xc0
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	4013      	ands	r3, r2
 80028ae:	d12e      	bne.n	800290e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2220      	movs	r2, #32
 80028b4:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d129      	bne.n	800290e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2208      	movs	r2, #8
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d122      	bne.n	800290e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2204      	movs	r2, #4
 80028d0:	4013      	ands	r3, r2
 80028d2:	d110      	bne.n	80028f6 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	210c      	movs	r1, #12
 80028e0:	438a      	bics	r2, r1
 80028e2:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002928 <HAL_ADC_PollForConversion+0x134>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	2201      	movs	r2, #1
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	655a      	str	r2, [r3, #84]	@ 0x54
 80028f4:	e00b      	b.n	800290e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fa:	2220      	movs	r2, #32
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002906:	2201      	movs	r2, #1
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d103      	bne.n	800291e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	220c      	movs	r2, #12
 800291c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	0018      	movs	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	b004      	add	sp, #16
 8002926:	bd80      	pop	{r7, pc}
 8002928:	fffffefe 	.word	0xfffffefe

0800292c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800293a:	0018      	movs	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	b002      	add	sp, #8
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2250      	movs	r2, #80	@ 0x50
 8002952:	5c9b      	ldrb	r3, [r3, r2]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_ADC_ConfigChannel+0x18>
 8002958:	2302      	movs	r3, #2
 800295a:	e06c      	b.n	8002a36 <HAL_ADC_ConfigChannel+0xf2>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2250      	movs	r2, #80	@ 0x50
 8002960:	2101      	movs	r1, #1
 8002962:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2204      	movs	r2, #4
 800296c:	4013      	ands	r3, r2
 800296e:	d00b      	beq.n	8002988 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002974:	2220      	movs	r2, #32
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2250      	movs	r2, #80	@ 0x50
 8002980:	2100      	movs	r1, #0
 8002982:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e056      	b.n	8002a36 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4a2c      	ldr	r2, [pc, #176]	@ (8002a40 <HAL_ADC_ConfigChannel+0xfc>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d028      	beq.n	80029e4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	035b      	lsls	r3, r3, #13
 800299e:	0b5a      	lsrs	r2, r3, #13
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	2380      	movs	r3, #128	@ 0x80
 80029ae:	02db      	lsls	r3, r3, #11
 80029b0:	4013      	ands	r3, r2
 80029b2:	d009      	beq.n	80029c8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80029b4:	4b23      	ldr	r3, [pc, #140]	@ (8002a44 <HAL_ADC_ConfigChannel+0x100>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b22      	ldr	r3, [pc, #136]	@ (8002a44 <HAL_ADC_ConfigChannel+0x100>)
 80029ba:	2180      	movs	r1, #128	@ 0x80
 80029bc:	0409      	lsls	r1, r1, #16
 80029be:	430a      	orrs	r2, r1
 80029c0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80029c2:	200a      	movs	r0, #10
 80029c4:	f000 f8ac 	bl	8002b20 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	2380      	movs	r3, #128	@ 0x80
 80029ce:	029b      	lsls	r3, r3, #10
 80029d0:	4013      	ands	r3, r2
 80029d2:	d02b      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80029d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a44 <HAL_ADC_ConfigChannel+0x100>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a44 <HAL_ADC_ConfigChannel+0x100>)
 80029da:	2180      	movs	r1, #128	@ 0x80
 80029dc:	03c9      	lsls	r1, r1, #15
 80029de:	430a      	orrs	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	e023      	b.n	8002a2c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	035b      	lsls	r3, r3, #13
 80029f0:	0b5b      	lsrs	r3, r3, #13
 80029f2:	43d9      	mvns	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	400a      	ands	r2, r1
 80029fa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	2380      	movs	r3, #128	@ 0x80
 8002a02:	02db      	lsls	r3, r3, #11
 8002a04:	4013      	ands	r3, r2
 8002a06:	d005      	beq.n	8002a14 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8002a08:	4b0e      	ldr	r3, [pc, #56]	@ (8002a44 <HAL_ADC_ConfigChannel+0x100>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a44 <HAL_ADC_ConfigChannel+0x100>)
 8002a0e:	490e      	ldr	r1, [pc, #56]	@ (8002a48 <HAL_ADC_ConfigChannel+0x104>)
 8002a10:	400a      	ands	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	2380      	movs	r3, #128	@ 0x80
 8002a1a:	029b      	lsls	r3, r3, #10
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d005      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8002a20:	4b08      	ldr	r3, [pc, #32]	@ (8002a44 <HAL_ADC_ConfigChannel+0x100>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b07      	ldr	r3, [pc, #28]	@ (8002a44 <HAL_ADC_ConfigChannel+0x100>)
 8002a26:	4909      	ldr	r1, [pc, #36]	@ (8002a4c <HAL_ADC_ConfigChannel+0x108>)
 8002a28:	400a      	ands	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2250      	movs	r2, #80	@ 0x50
 8002a30:	2100      	movs	r1, #0
 8002a32:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	0018      	movs	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b002      	add	sp, #8
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	46c0      	nop			@ (mov r8, r8)
 8002a40:	00001001 	.word	0x00001001
 8002a44:	40012708 	.word	0x40012708
 8002a48:	ff7fffff 	.word	0xff7fffff
 8002a4c:	ffbfffff 	.word	0xffbfffff

08002a50 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2203      	movs	r2, #3
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d108      	bne.n	8002a7c <ADC_Enable+0x2c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2201      	movs	r2, #1
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <ADC_Enable+0x2c>
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <ADC_Enable+0x2e>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d146      	bne.n	8002b10 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4a24      	ldr	r2, [pc, #144]	@ (8002b1c <ADC_Enable+0xcc>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d00d      	beq.n	8002aaa <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a92:	2210      	movs	r2, #16
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e033      	b.n	8002b12 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002aba:	2001      	movs	r0, #1
 8002abc:	f000 f830 	bl	8002b20 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ac0:	f7ff fca2 	bl	8002408 <HAL_GetTick>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ac8:	e01b      	b.n	8002b02 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002aca:	f7ff fc9d 	bl	8002408 <HAL_GetTick>
 8002ace:	0002      	movs	r2, r0
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b0a      	cmp	r3, #10
 8002ad6:	d914      	bls.n	8002b02 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d00d      	beq.n	8002b02 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aea:	2210      	movs	r2, #16
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af6:	2201      	movs	r2, #1
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e007      	b.n	8002b12 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d1dc      	bne.n	8002aca <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	0018      	movs	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b004      	add	sp, #16
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	46c0      	nop			@ (mov r8, r8)
 8002b1c:	80000017 	.word	0x80000017

08002b20 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002b28:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <ADC_DelayMicroSecond+0x38>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	490b      	ldr	r1, [pc, #44]	@ (8002b5c <ADC_DelayMicroSecond+0x3c>)
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f7fd faf4 	bl	800011c <__udivsi3>
 8002b34:	0003      	movs	r3, r0
 8002b36:	001a      	movs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4353      	muls	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8002b3e:	e002      	b.n	8002b46 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f9      	bne.n	8002b40 <ADC_DelayMicroSecond+0x20>
  }
}
 8002b4c:	46c0      	nop			@ (mov r8, r8)
 8002b4e:	46c0      	nop			@ (mov r8, r8)
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b004      	add	sp, #16
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	46c0      	nop			@ (mov r8, r8)
 8002b58:	20000004 	.word	0x20000004
 8002b5c:	000f4240 	.word	0x000f4240

08002b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	0002      	movs	r2, r0
 8002b68:	1dfb      	adds	r3, r7, #7
 8002b6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b6c:	1dfb      	adds	r3, r7, #7
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b72:	d809      	bhi.n	8002b88 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b74:	1dfb      	adds	r3, r7, #7
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	001a      	movs	r2, r3
 8002b7a:	231f      	movs	r3, #31
 8002b7c:	401a      	ands	r2, r3
 8002b7e:	4b04      	ldr	r3, [pc, #16]	@ (8002b90 <__NVIC_EnableIRQ+0x30>)
 8002b80:	2101      	movs	r1, #1
 8002b82:	4091      	lsls	r1, r2
 8002b84:	000a      	movs	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]
  }
}
 8002b88:	46c0      	nop			@ (mov r8, r8)
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b002      	add	sp, #8
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	e000e100 	.word	0xe000e100

08002b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	6039      	str	r1, [r7, #0]
 8002b9e:	1dfb      	adds	r3, r7, #7
 8002ba0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ba2:	1dfb      	adds	r3, r7, #7
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ba8:	d828      	bhi.n	8002bfc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002baa:	4a2f      	ldr	r2, [pc, #188]	@ (8002c68 <__NVIC_SetPriority+0xd4>)
 8002bac:	1dfb      	adds	r3, r7, #7
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	089b      	lsrs	r3, r3, #2
 8002bb4:	33c0      	adds	r3, #192	@ 0xc0
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	589b      	ldr	r3, [r3, r2]
 8002bba:	1dfa      	adds	r2, r7, #7
 8002bbc:	7812      	ldrb	r2, [r2, #0]
 8002bbe:	0011      	movs	r1, r2
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	400a      	ands	r2, r1
 8002bc4:	00d2      	lsls	r2, r2, #3
 8002bc6:	21ff      	movs	r1, #255	@ 0xff
 8002bc8:	4091      	lsls	r1, r2
 8002bca:	000a      	movs	r2, r1
 8002bcc:	43d2      	mvns	r2, r2
 8002bce:	401a      	ands	r2, r3
 8002bd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	019b      	lsls	r3, r3, #6
 8002bd6:	22ff      	movs	r2, #255	@ 0xff
 8002bd8:	401a      	ands	r2, r3
 8002bda:	1dfb      	adds	r3, r7, #7
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	0018      	movs	r0, r3
 8002be0:	2303      	movs	r3, #3
 8002be2:	4003      	ands	r3, r0
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002be8:	481f      	ldr	r0, [pc, #124]	@ (8002c68 <__NVIC_SetPriority+0xd4>)
 8002bea:	1dfb      	adds	r3, r7, #7
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	b25b      	sxtb	r3, r3
 8002bf0:	089b      	lsrs	r3, r3, #2
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	33c0      	adds	r3, #192	@ 0xc0
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002bfa:	e031      	b.n	8002c60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c6c <__NVIC_SetPriority+0xd8>)
 8002bfe:	1dfb      	adds	r3, r7, #7
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	0019      	movs	r1, r3
 8002c04:	230f      	movs	r3, #15
 8002c06:	400b      	ands	r3, r1
 8002c08:	3b08      	subs	r3, #8
 8002c0a:	089b      	lsrs	r3, r3, #2
 8002c0c:	3306      	adds	r3, #6
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	18d3      	adds	r3, r2, r3
 8002c12:	3304      	adds	r3, #4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	1dfa      	adds	r2, r7, #7
 8002c18:	7812      	ldrb	r2, [r2, #0]
 8002c1a:	0011      	movs	r1, r2
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	400a      	ands	r2, r1
 8002c20:	00d2      	lsls	r2, r2, #3
 8002c22:	21ff      	movs	r1, #255	@ 0xff
 8002c24:	4091      	lsls	r1, r2
 8002c26:	000a      	movs	r2, r1
 8002c28:	43d2      	mvns	r2, r2
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	019b      	lsls	r3, r3, #6
 8002c32:	22ff      	movs	r2, #255	@ 0xff
 8002c34:	401a      	ands	r2, r3
 8002c36:	1dfb      	adds	r3, r7, #7
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	4003      	ands	r3, r0
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c44:	4809      	ldr	r0, [pc, #36]	@ (8002c6c <__NVIC_SetPriority+0xd8>)
 8002c46:	1dfb      	adds	r3, r7, #7
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	001c      	movs	r4, r3
 8002c4c:	230f      	movs	r3, #15
 8002c4e:	4023      	ands	r3, r4
 8002c50:	3b08      	subs	r3, #8
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	430a      	orrs	r2, r1
 8002c56:	3306      	adds	r3, #6
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	18c3      	adds	r3, r0, r3
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	601a      	str	r2, [r3, #0]
}
 8002c60:	46c0      	nop			@ (mov r8, r8)
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b003      	add	sp, #12
 8002c66:	bd90      	pop	{r4, r7, pc}
 8002c68:	e000e100 	.word	0xe000e100
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	1e5a      	subs	r2, r3, #1
 8002c7c:	2380      	movs	r3, #128	@ 0x80
 8002c7e:	045b      	lsls	r3, r3, #17
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d301      	bcc.n	8002c88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c84:	2301      	movs	r3, #1
 8002c86:	e010      	b.n	8002caa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c88:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb4 <SysTick_Config+0x44>)
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	3a01      	subs	r2, #1
 8002c8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c90:	2301      	movs	r3, #1
 8002c92:	425b      	negs	r3, r3
 8002c94:	2103      	movs	r1, #3
 8002c96:	0018      	movs	r0, r3
 8002c98:	f7ff ff7c 	bl	8002b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c9c:	4b05      	ldr	r3, [pc, #20]	@ (8002cb4 <SysTick_Config+0x44>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ca2:	4b04      	ldr	r3, [pc, #16]	@ (8002cb4 <SysTick_Config+0x44>)
 8002ca4:	2207      	movs	r2, #7
 8002ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	0018      	movs	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b002      	add	sp, #8
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	46c0      	nop			@ (mov r8, r8)
 8002cb4:	e000e010 	.word	0xe000e010

08002cb8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	210f      	movs	r1, #15
 8002cc4:	187b      	adds	r3, r7, r1
 8002cc6:	1c02      	adds	r2, r0, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	187b      	adds	r3, r7, r1
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	b25b      	sxtb	r3, r3
 8002cd2:	0011      	movs	r1, r2
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f7ff ff5d 	bl	8002b94 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8002cda:	46c0      	nop			@ (mov r8, r8)
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b004      	add	sp, #16
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	0002      	movs	r2, r0
 8002cea:	1dfb      	adds	r3, r7, #7
 8002cec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cee:	1dfb      	adds	r3, r7, #7
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	b25b      	sxtb	r3, r3
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f7ff ff33 	bl	8002b60 <__NVIC_EnableIRQ>
}
 8002cfa:	46c0      	nop			@ (mov r8, r8)
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	b002      	add	sp, #8
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f7ff ffaf 	bl	8002c70 <SysTick_Config>
 8002d12:	0003      	movs	r3, r0
}
 8002d14:	0018      	movs	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b002      	add	sp, #8
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002d24:	f7ff fb70 	bl	8002408 <HAL_GetTick>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002d2c:	e00f      	b.n	8002d4e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3301      	adds	r3, #1
 8002d32:	d00c      	beq.n	8002d4e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d007      	beq.n	8002d4a <FLASH_WaitForLastOperation+0x2e>
 8002d3a:	f7ff fb65 	bl	8002408 <HAL_GetTick>
 8002d3e:	0002      	movs	r2, r0
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d201      	bcs.n	8002d4e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e052      	b.n	8002df4 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002d4e:	4b2b      	ldr	r3, [pc, #172]	@ (8002dfc <FLASH_WaitForLastOperation+0xe0>)
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	2201      	movs	r2, #1
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d0e9      	beq.n	8002d2e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002d5a:	4b28      	ldr	r3, [pc, #160]	@ (8002dfc <FLASH_WaitForLastOperation+0xe0>)
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d102      	bne.n	8002d6c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002d66:	4b25      	ldr	r3, [pc, #148]	@ (8002dfc <FLASH_WaitForLastOperation+0xe0>)
 8002d68:	2202      	movs	r2, #2
 8002d6a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8002d6c:	4b23      	ldr	r3, [pc, #140]	@ (8002dfc <FLASH_WaitForLastOperation+0xe0>)
 8002d6e:	699a      	ldr	r2, [r3, #24]
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	401a      	ands	r2, r3
 8002d76:	2380      	movs	r3, #128	@ 0x80
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d035      	beq.n	8002dea <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8002d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8002dfc <FLASH_WaitForLastOperation+0xe0>)
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	2380      	movs	r3, #128	@ 0x80
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8002d88:	2380      	movs	r3, #128	@ 0x80
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d02c      	beq.n	8002dea <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8002d90:	4b1a      	ldr	r3, [pc, #104]	@ (8002dfc <FLASH_WaitForLastOperation+0xe0>)
 8002d92:	699a      	ldr	r2, [r3, #24]
 8002d94:	2380      	movs	r3, #128	@ 0x80
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8002d9a:	2380      	movs	r3, #128	@ 0x80
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d023      	beq.n	8002dea <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8002da2:	4b16      	ldr	r3, [pc, #88]	@ (8002dfc <FLASH_WaitForLastOperation+0xe0>)
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	2380      	movs	r3, #128	@ 0x80
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8002dac:	2380      	movs	r3, #128	@ 0x80
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d01a      	beq.n	8002dea <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8002db4:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <FLASH_WaitForLastOperation+0xe0>)
 8002db6:	699a      	ldr	r2, [r3, #24]
 8002db8:	2380      	movs	r3, #128	@ 0x80
 8002dba:	019b      	lsls	r3, r3, #6
 8002dbc:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8002dbe:	2380      	movs	r3, #128	@ 0x80
 8002dc0:	019b      	lsls	r3, r3, #6
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d011      	beq.n	8002dea <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002dfc <FLASH_WaitForLastOperation+0xe0>)
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	2380      	movs	r3, #128	@ 0x80
 8002dcc:	029b      	lsls	r3, r3, #10
 8002dce:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8002dd0:	2380      	movs	r3, #128	@ 0x80
 8002dd2:	029b      	lsls	r3, r3, #10
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d008      	beq.n	8002dea <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8002dd8:	4b08      	ldr	r3, [pc, #32]	@ (8002dfc <FLASH_WaitForLastOperation+0xe0>)
 8002dda:	699a      	ldr	r2, [r3, #24]
 8002ddc:	2380      	movs	r3, #128	@ 0x80
 8002dde:	025b      	lsls	r3, r3, #9
 8002de0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8002de2:	2380      	movs	r3, #128	@ 0x80
 8002de4:	025b      	lsls	r3, r3, #9
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d103      	bne.n	8002df2 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8002dea:	f000 f809 	bl	8002e00 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b004      	add	sp, #16
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40022000 	.word	0x40022000

08002e00 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002e0a:	4b49      	ldr	r3, [pc, #292]	@ (8002f30 <FLASH_SetErrorCode+0x130>)
 8002e0c:	699a      	ldr	r2, [r3, #24]
 8002e0e:	2380      	movs	r3, #128	@ 0x80
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	401a      	ands	r2, r3
 8002e14:	2380      	movs	r3, #128	@ 0x80
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d10a      	bne.n	8002e32 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002e1c:	4b45      	ldr	r3, [pc, #276]	@ (8002f34 <FLASH_SetErrorCode+0x134>)
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	2202      	movs	r2, #2
 8002e22:	431a      	orrs	r2, r3
 8002e24:	4b43      	ldr	r3, [pc, #268]	@ (8002f34 <FLASH_SetErrorCode+0x134>)
 8002e26:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2280      	movs	r2, #128	@ 0x80
 8002e2c:	0052      	lsls	r2, r2, #1
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8002e32:	4b3f      	ldr	r3, [pc, #252]	@ (8002f30 <FLASH_SetErrorCode+0x130>)
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	2380      	movs	r3, #128	@ 0x80
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	2380      	movs	r3, #128	@ 0x80
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d10a      	bne.n	8002e5a <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002e44:	4b3b      	ldr	r3, [pc, #236]	@ (8002f34 <FLASH_SetErrorCode+0x134>)
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	4b39      	ldr	r3, [pc, #228]	@ (8002f34 <FLASH_SetErrorCode+0x134>)
 8002e4e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2280      	movs	r2, #128	@ 0x80
 8002e54:	0092      	lsls	r2, r2, #2
 8002e56:	4313      	orrs	r3, r2
 8002e58:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8002e5a:	4b35      	ldr	r3, [pc, #212]	@ (8002f30 <FLASH_SetErrorCode+0x130>)
 8002e5c:	699a      	ldr	r2, [r3, #24]
 8002e5e:	2380      	movs	r3, #128	@ 0x80
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	401a      	ands	r2, r3
 8002e64:	2380      	movs	r3, #128	@ 0x80
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d10a      	bne.n	8002e82 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8002e6c:	4b31      	ldr	r3, [pc, #196]	@ (8002f34 <FLASH_SetErrorCode+0x134>)
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	2208      	movs	r2, #8
 8002e72:	431a      	orrs	r2, r3
 8002e74:	4b2f      	ldr	r3, [pc, #188]	@ (8002f34 <FLASH_SetErrorCode+0x134>)
 8002e76:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2280      	movs	r2, #128	@ 0x80
 8002e7c:	00d2      	lsls	r2, r2, #3
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002e82:	4b2b      	ldr	r3, [pc, #172]	@ (8002f30 <FLASH_SetErrorCode+0x130>)
 8002e84:	699a      	ldr	r2, [r3, #24]
 8002e86:	2380      	movs	r3, #128	@ 0x80
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	2380      	movs	r3, #128	@ 0x80
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d10a      	bne.n	8002eaa <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002e94:	4b27      	ldr	r3, [pc, #156]	@ (8002f34 <FLASH_SetErrorCode+0x134>)
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	2204      	movs	r2, #4
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	4b25      	ldr	r3, [pc, #148]	@ (8002f34 <FLASH_SetErrorCode+0x134>)
 8002e9e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2280      	movs	r2, #128	@ 0x80
 8002ea4:	0112      	lsls	r2, r2, #4
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8002eaa:	4b21      	ldr	r3, [pc, #132]	@ (8002f30 <FLASH_SetErrorCode+0x130>)
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	2380      	movs	r3, #128	@ 0x80
 8002eb0:	019b      	lsls	r3, r3, #6
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	2380      	movs	r3, #128	@ 0x80
 8002eb6:	019b      	lsls	r3, r3, #6
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d10a      	bne.n	8002ed2 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f34 <FLASH_SetErrorCode+0x134>)
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f34 <FLASH_SetErrorCode+0x134>)
 8002ec6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2280      	movs	r2, #128	@ 0x80
 8002ecc:	0192      	lsls	r2, r2, #6
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8002ed2:	4b17      	ldr	r3, [pc, #92]	@ (8002f30 <FLASH_SetErrorCode+0x130>)
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	2380      	movs	r3, #128	@ 0x80
 8002ed8:	029b      	lsls	r3, r3, #10
 8002eda:	401a      	ands	r2, r3
 8002edc:	2380      	movs	r3, #128	@ 0x80
 8002ede:	029b      	lsls	r3, r3, #10
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d109      	bne.n	8002ef8 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8002ee4:	4b13      	ldr	r3, [pc, #76]	@ (8002f34 <FLASH_SetErrorCode+0x134>)
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	431a      	orrs	r2, r3
 8002eec:	4b11      	ldr	r3, [pc, #68]	@ (8002f34 <FLASH_SetErrorCode+0x134>)
 8002eee:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8002ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f30 <FLASH_SetErrorCode+0x130>)
 8002efa:	699a      	ldr	r2, [r3, #24]
 8002efc:	2380      	movs	r3, #128	@ 0x80
 8002efe:	025b      	lsls	r3, r3, #9
 8002f00:	401a      	ands	r2, r3
 8002f02:	2380      	movs	r3, #128	@ 0x80
 8002f04:	025b      	lsls	r3, r3, #9
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d10a      	bne.n	8002f20 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f34 <FLASH_SetErrorCode+0x134>)
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	2240      	movs	r2, #64	@ 0x40
 8002f10:	431a      	orrs	r2, r3
 8002f12:	4b08      	ldr	r3, [pc, #32]	@ (8002f34 <FLASH_SetErrorCode+0x134>)
 8002f14:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2280      	movs	r2, #128	@ 0x80
 8002f1a:	0252      	lsls	r2, r2, #9
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002f20:	4b03      	ldr	r3, [pc, #12]	@ (8002f30 <FLASH_SetErrorCode+0x130>)
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	619a      	str	r2, [r3, #24]
}  
 8002f26:	46c0      	nop			@ (mov r8, r8)
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	b002      	add	sp, #8
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	40022000 	.word	0x40022000
 8002f34:	200004b4 	.word	0x200004b4

08002f38 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8002f3e:	4b12      	ldr	r3, [pc, #72]	@ (8002f88 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	4013      	ands	r3, r2
 8002f46:	d019      	beq.n	8002f7c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f48:	f3ef 8310 	mrs	r3, PRIMASK
 8002f4c:	607b      	str	r3, [r7, #4]
  return(result);
 8002f4e:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8002f50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f52:	b672      	cpsid	i
}
 8002f54:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8002f56:	4b0c      	ldr	r3, [pc, #48]	@ (8002f88 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8002f58:	4a0c      	ldr	r2, [pc, #48]	@ (8002f8c <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8002f5a:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f88 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8002f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8002f90 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f383 8810 	msr	PRIMASK, r3
}
 8002f6c:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8002f6e:	4b06      	ldr	r3, [pc, #24]	@ (8002f88 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	4013      	ands	r3, r2
 8002f76:	d001      	beq.n	8002f7c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b004      	add	sp, #16
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	40022000 	.word	0x40022000
 8002f8c:	89abcdef 	.word	0x89abcdef
 8002f90:	02030405 	.word	0x02030405

08002f94 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8002f98:	4b04      	ldr	r3, [pc, #16]	@ (8002fac <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	4b03      	ldr	r3, [pc, #12]	@ (8002fac <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40022000 	.word	0x40022000

08002fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002fc6:	e14f      	b.n	8003268 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2101      	movs	r1, #1
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4091      	lsls	r1, r2
 8002fd2:	000a      	movs	r2, r1
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d100      	bne.n	8002fe0 <HAL_GPIO_Init+0x30>
 8002fde:	e140      	b.n	8003262 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d005      	beq.n	8002ff8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d130      	bne.n	800305a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	2203      	movs	r2, #3
 8003004:	409a      	lsls	r2, r3
 8003006:	0013      	movs	r3, r2
 8003008:	43da      	mvns	r2, r3
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	409a      	lsls	r2, r3
 800301a:	0013      	movs	r3, r2
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800302e:	2201      	movs	r2, #1
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	409a      	lsls	r2, r3
 8003034:	0013      	movs	r3, r2
 8003036:	43da      	mvns	r2, r3
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4013      	ands	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	091b      	lsrs	r3, r3, #4
 8003044:	2201      	movs	r2, #1
 8003046:	401a      	ands	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	409a      	lsls	r2, r3
 800304c:	0013      	movs	r3, r2
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2203      	movs	r2, #3
 8003060:	4013      	ands	r3, r2
 8003062:	2b03      	cmp	r3, #3
 8003064:	d017      	beq.n	8003096 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	2203      	movs	r2, #3
 8003072:	409a      	lsls	r2, r3
 8003074:	0013      	movs	r3, r2
 8003076:	43da      	mvns	r2, r3
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4013      	ands	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	409a      	lsls	r2, r3
 8003088:	0013      	movs	r3, r2
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2203      	movs	r2, #3
 800309c:	4013      	ands	r3, r2
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d123      	bne.n	80030ea <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	08da      	lsrs	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3208      	adds	r2, #8
 80030aa:	0092      	lsls	r2, r2, #2
 80030ac:	58d3      	ldr	r3, [r2, r3]
 80030ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2207      	movs	r2, #7
 80030b4:	4013      	ands	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	220f      	movs	r2, #15
 80030ba:	409a      	lsls	r2, r3
 80030bc:	0013      	movs	r3, r2
 80030be:	43da      	mvns	r2, r3
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	691a      	ldr	r2, [r3, #16]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2107      	movs	r1, #7
 80030ce:	400b      	ands	r3, r1
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	409a      	lsls	r2, r3
 80030d4:	0013      	movs	r3, r2
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	08da      	lsrs	r2, r3, #3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3208      	adds	r2, #8
 80030e4:	0092      	lsls	r2, r2, #2
 80030e6:	6939      	ldr	r1, [r7, #16]
 80030e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	2203      	movs	r2, #3
 80030f6:	409a      	lsls	r2, r3
 80030f8:	0013      	movs	r3, r2
 80030fa:	43da      	mvns	r2, r3
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2203      	movs	r2, #3
 8003108:	401a      	ands	r2, r3
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	409a      	lsls	r2, r3
 8003110:	0013      	movs	r3, r2
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	23c0      	movs	r3, #192	@ 0xc0
 8003124:	029b      	lsls	r3, r3, #10
 8003126:	4013      	ands	r3, r2
 8003128:	d100      	bne.n	800312c <HAL_GPIO_Init+0x17c>
 800312a:	e09a      	b.n	8003262 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312c:	4b54      	ldr	r3, [pc, #336]	@ (8003280 <HAL_GPIO_Init+0x2d0>)
 800312e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003130:	4b53      	ldr	r3, [pc, #332]	@ (8003280 <HAL_GPIO_Init+0x2d0>)
 8003132:	2101      	movs	r1, #1
 8003134:	430a      	orrs	r2, r1
 8003136:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003138:	4a52      	ldr	r2, [pc, #328]	@ (8003284 <HAL_GPIO_Init+0x2d4>)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	089b      	lsrs	r3, r3, #2
 800313e:	3302      	adds	r3, #2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	589b      	ldr	r3, [r3, r2]
 8003144:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2203      	movs	r2, #3
 800314a:	4013      	ands	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	220f      	movs	r2, #15
 8003150:	409a      	lsls	r2, r3
 8003152:	0013      	movs	r3, r2
 8003154:	43da      	mvns	r2, r3
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4013      	ands	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	23a0      	movs	r3, #160	@ 0xa0
 8003160:	05db      	lsls	r3, r3, #23
 8003162:	429a      	cmp	r2, r3
 8003164:	d019      	beq.n	800319a <HAL_GPIO_Init+0x1ea>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a47      	ldr	r2, [pc, #284]	@ (8003288 <HAL_GPIO_Init+0x2d8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d013      	beq.n	8003196 <HAL_GPIO_Init+0x1e6>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a46      	ldr	r2, [pc, #280]	@ (800328c <HAL_GPIO_Init+0x2dc>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00d      	beq.n	8003192 <HAL_GPIO_Init+0x1e2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a45      	ldr	r2, [pc, #276]	@ (8003290 <HAL_GPIO_Init+0x2e0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d007      	beq.n	800318e <HAL_GPIO_Init+0x1de>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a44      	ldr	r2, [pc, #272]	@ (8003294 <HAL_GPIO_Init+0x2e4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d101      	bne.n	800318a <HAL_GPIO_Init+0x1da>
 8003186:	2305      	movs	r3, #5
 8003188:	e008      	b.n	800319c <HAL_GPIO_Init+0x1ec>
 800318a:	2306      	movs	r3, #6
 800318c:	e006      	b.n	800319c <HAL_GPIO_Init+0x1ec>
 800318e:	2303      	movs	r3, #3
 8003190:	e004      	b.n	800319c <HAL_GPIO_Init+0x1ec>
 8003192:	2302      	movs	r3, #2
 8003194:	e002      	b.n	800319c <HAL_GPIO_Init+0x1ec>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_GPIO_Init+0x1ec>
 800319a:	2300      	movs	r3, #0
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	2103      	movs	r1, #3
 80031a0:	400a      	ands	r2, r1
 80031a2:	0092      	lsls	r2, r2, #2
 80031a4:	4093      	lsls	r3, r2
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031ac:	4935      	ldr	r1, [pc, #212]	@ (8003284 <HAL_GPIO_Init+0x2d4>)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	089b      	lsrs	r3, r3, #2
 80031b2:	3302      	adds	r3, #2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ba:	4b37      	ldr	r3, [pc, #220]	@ (8003298 <HAL_GPIO_Init+0x2e8>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	43da      	mvns	r2, r3
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4013      	ands	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	2380      	movs	r3, #128	@ 0x80
 80031d0:	035b      	lsls	r3, r3, #13
 80031d2:	4013      	ands	r3, r2
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031de:	4b2e      	ldr	r3, [pc, #184]	@ (8003298 <HAL_GPIO_Init+0x2e8>)
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80031e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003298 <HAL_GPIO_Init+0x2e8>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	43da      	mvns	r2, r3
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4013      	ands	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	2380      	movs	r3, #128	@ 0x80
 80031fa:	039b      	lsls	r3, r3, #14
 80031fc:	4013      	ands	r3, r2
 80031fe:	d003      	beq.n	8003208 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003208:	4b23      	ldr	r3, [pc, #140]	@ (8003298 <HAL_GPIO_Init+0x2e8>)
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800320e:	4b22      	ldr	r3, [pc, #136]	@ (8003298 <HAL_GPIO_Init+0x2e8>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	43da      	mvns	r2, r3
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4013      	ands	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	2380      	movs	r3, #128	@ 0x80
 8003224:	029b      	lsls	r3, r3, #10
 8003226:	4013      	ands	r3, r2
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4313      	orrs	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003232:	4b19      	ldr	r3, [pc, #100]	@ (8003298 <HAL_GPIO_Init+0x2e8>)
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003238:	4b17      	ldr	r3, [pc, #92]	@ (8003298 <HAL_GPIO_Init+0x2e8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	43da      	mvns	r2, r3
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	2380      	movs	r3, #128	@ 0x80
 800324e:	025b      	lsls	r3, r3, #9
 8003250:	4013      	ands	r3, r2
 8003252:	d003      	beq.n	800325c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800325c:	4b0e      	ldr	r3, [pc, #56]	@ (8003298 <HAL_GPIO_Init+0x2e8>)
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	3301      	adds	r3, #1
 8003266:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	40da      	lsrs	r2, r3
 8003270:	1e13      	subs	r3, r2, #0
 8003272:	d000      	beq.n	8003276 <HAL_GPIO_Init+0x2c6>
 8003274:	e6a8      	b.n	8002fc8 <HAL_GPIO_Init+0x18>
  }
}
 8003276:	46c0      	nop			@ (mov r8, r8)
 8003278:	46c0      	nop			@ (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	b006      	add	sp, #24
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40021000 	.word	0x40021000
 8003284:	40010000 	.word	0x40010000
 8003288:	50000400 	.word	0x50000400
 800328c:	50000800 	.word	0x50000800
 8003290:	50000c00 	.word	0x50000c00
 8003294:	50001c00 	.word	0x50001c00
 8003298:	40010400 	.word	0x40010400

0800329c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	000a      	movs	r2, r1
 80032a6:	1cbb      	adds	r3, r7, #2
 80032a8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	1cba      	adds	r2, r7, #2
 80032b0:	8812      	ldrh	r2, [r2, #0]
 80032b2:	4013      	ands	r3, r2
 80032b4:	d004      	beq.n	80032c0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80032b6:	230f      	movs	r3, #15
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	2201      	movs	r2, #1
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	e003      	b.n	80032c8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032c0:	230f      	movs	r3, #15
 80032c2:	18fb      	adds	r3, r7, r3
 80032c4:	2200      	movs	r2, #0
 80032c6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80032c8:	230f      	movs	r3, #15
 80032ca:	18fb      	adds	r3, r7, r3
 80032cc:	781b      	ldrb	r3, [r3, #0]
}
 80032ce:	0018      	movs	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	b004      	add	sp, #16
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	0008      	movs	r0, r1
 80032e0:	0011      	movs	r1, r2
 80032e2:	1cbb      	adds	r3, r7, #2
 80032e4:	1c02      	adds	r2, r0, #0
 80032e6:	801a      	strh	r2, [r3, #0]
 80032e8:	1c7b      	adds	r3, r7, #1
 80032ea:	1c0a      	adds	r2, r1, #0
 80032ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032ee:	1c7b      	adds	r3, r7, #1
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d004      	beq.n	8003300 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032f6:	1cbb      	adds	r3, r7, #2
 80032f8:	881a      	ldrh	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80032fe:	e003      	b.n	8003308 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003300:	1cbb      	adds	r3, r7, #2
 8003302:	881a      	ldrh	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003308:	46c0      	nop			@ (mov r8, r8)
 800330a:	46bd      	mov	sp, r7
 800330c:	b002      	add	sp, #8
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	0002      	movs	r2, r0
 8003318:	1dbb      	adds	r3, r7, #6
 800331a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800331c:	4b09      	ldr	r3, [pc, #36]	@ (8003344 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	1dba      	adds	r2, r7, #6
 8003322:	8812      	ldrh	r2, [r2, #0]
 8003324:	4013      	ands	r3, r2
 8003326:	d008      	beq.n	800333a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003328:	4b06      	ldr	r3, [pc, #24]	@ (8003344 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800332a:	1dba      	adds	r2, r7, #6
 800332c:	8812      	ldrh	r2, [r2, #0]
 800332e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003330:	1dbb      	adds	r3, r7, #6
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	0018      	movs	r0, r3
 8003336:	f000 f807 	bl	8003348 <HAL_GPIO_EXTI_Callback>
  }
}
 800333a:	46c0      	nop			@ (mov r8, r8)
 800333c:	46bd      	mov	sp, r7
 800333e:	b002      	add	sp, #8
 8003340:	bd80      	pop	{r7, pc}
 8003342:	46c0      	nop			@ (mov r8, r8)
 8003344:	40010400 	.word	0x40010400

08003348 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	0002      	movs	r2, r0
 8003350:	1dbb      	adds	r3, r7, #6
 8003352:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003354:	46c0      	nop			@ (mov r8, r8)
 8003356:	46bd      	mov	sp, r7
 8003358:	b002      	add	sp, #8
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e08f      	b.n	800348e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2241      	movs	r2, #65	@ 0x41
 8003372:	5c9b      	ldrb	r3, [r3, r2]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d107      	bne.n	800338a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2240      	movs	r2, #64	@ 0x40
 800337e:	2100      	movs	r1, #0
 8003380:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	0018      	movs	r0, r3
 8003386:	f7fe fc1b 	bl	8001bc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2241      	movs	r2, #65	@ 0x41
 800338e:	2124      	movs	r1, #36	@ 0x24
 8003390:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2101      	movs	r1, #1
 800339e:	438a      	bics	r2, r1
 80033a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	493b      	ldr	r1, [pc, #236]	@ (8003498 <HAL_I2C_Init+0x13c>)
 80033ac:	400a      	ands	r2, r1
 80033ae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4938      	ldr	r1, [pc, #224]	@ (800349c <HAL_I2C_Init+0x140>)
 80033bc:	400a      	ands	r2, r1
 80033be:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d108      	bne.n	80033da <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2180      	movs	r1, #128	@ 0x80
 80033d2:	0209      	lsls	r1, r1, #8
 80033d4:	430a      	orrs	r2, r1
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	e007      	b.n	80033ea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2184      	movs	r1, #132	@ 0x84
 80033e4:	0209      	lsls	r1, r1, #8
 80033e6:	430a      	orrs	r2, r1
 80033e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d109      	bne.n	8003406 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2180      	movs	r1, #128	@ 0x80
 80033fe:	0109      	lsls	r1, r1, #4
 8003400:	430a      	orrs	r2, r1
 8003402:	605a      	str	r2, [r3, #4]
 8003404:	e007      	b.n	8003416 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4923      	ldr	r1, [pc, #140]	@ (80034a0 <HAL_I2C_Init+0x144>)
 8003412:	400a      	ands	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4920      	ldr	r1, [pc, #128]	@ (80034a4 <HAL_I2C_Init+0x148>)
 8003422:	430a      	orrs	r2, r1
 8003424:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	491a      	ldr	r1, [pc, #104]	@ (800349c <HAL_I2C_Init+0x140>)
 8003432:	400a      	ands	r2, r1
 8003434:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	431a      	orrs	r2, r3
 8003440:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69d9      	ldr	r1, [r3, #28]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1a      	ldr	r2, [r3, #32]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2101      	movs	r1, #1
 800346c:	430a      	orrs	r2, r1
 800346e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2241      	movs	r2, #65	@ 0x41
 800347a:	2120      	movs	r1, #32
 800347c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2242      	movs	r2, #66	@ 0x42
 8003488:	2100      	movs	r1, #0
 800348a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	0018      	movs	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	b002      	add	sp, #8
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			@ (mov r8, r8)
 8003498:	f0ffffff 	.word	0xf0ffffff
 800349c:	ffff7fff 	.word	0xffff7fff
 80034a0:	fffff7ff 	.word	0xfffff7ff
 80034a4:	02008000 	.word	0x02008000

080034a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a8:	b590      	push	{r4, r7, lr}
 80034aa:	b089      	sub	sp, #36	@ 0x24
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	000c      	movs	r4, r1
 80034b2:	0010      	movs	r0, r2
 80034b4:	0019      	movs	r1, r3
 80034b6:	230a      	movs	r3, #10
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	1c22      	adds	r2, r4, #0
 80034bc:	801a      	strh	r2, [r3, #0]
 80034be:	2308      	movs	r3, #8
 80034c0:	18fb      	adds	r3, r7, r3
 80034c2:	1c02      	adds	r2, r0, #0
 80034c4:	801a      	strh	r2, [r3, #0]
 80034c6:	1dbb      	adds	r3, r7, #6
 80034c8:	1c0a      	adds	r2, r1, #0
 80034ca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2241      	movs	r2, #65	@ 0x41
 80034d0:	5c9b      	ldrb	r3, [r3, r2]
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d000      	beq.n	80034da <HAL_I2C_Mem_Write+0x32>
 80034d8:	e10c      	b.n	80036f4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d004      	beq.n	80034ea <HAL_I2C_Mem_Write+0x42>
 80034e0:	232c      	movs	r3, #44	@ 0x2c
 80034e2:	18fb      	adds	r3, r7, r3
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d105      	bne.n	80034f6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2280      	movs	r2, #128	@ 0x80
 80034ee:	0092      	lsls	r2, r2, #2
 80034f0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e0ff      	b.n	80036f6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2240      	movs	r2, #64	@ 0x40
 80034fa:	5c9b      	ldrb	r3, [r3, r2]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_I2C_Mem_Write+0x5c>
 8003500:	2302      	movs	r3, #2
 8003502:	e0f8      	b.n	80036f6 <HAL_I2C_Mem_Write+0x24e>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2240      	movs	r2, #64	@ 0x40
 8003508:	2101      	movs	r1, #1
 800350a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800350c:	f7fe ff7c 	bl	8002408 <HAL_GetTick>
 8003510:	0003      	movs	r3, r0
 8003512:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003514:	2380      	movs	r3, #128	@ 0x80
 8003516:	0219      	lsls	r1, r3, #8
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	2319      	movs	r3, #25
 8003520:	2201      	movs	r2, #1
 8003522:	f000 f975 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 8003526:	1e03      	subs	r3, r0, #0
 8003528:	d001      	beq.n	800352e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e0e3      	b.n	80036f6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2241      	movs	r2, #65	@ 0x41
 8003532:	2121      	movs	r1, #33	@ 0x21
 8003534:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2242      	movs	r2, #66	@ 0x42
 800353a:	2140      	movs	r1, #64	@ 0x40
 800353c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003548:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	222c      	movs	r2, #44	@ 0x2c
 800354e:	18ba      	adds	r2, r7, r2
 8003550:	8812      	ldrh	r2, [r2, #0]
 8003552:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800355a:	1dbb      	adds	r3, r7, #6
 800355c:	881c      	ldrh	r4, [r3, #0]
 800355e:	2308      	movs	r3, #8
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	881a      	ldrh	r2, [r3, #0]
 8003564:	230a      	movs	r3, #10
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	8819      	ldrh	r1, [r3, #0]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	9301      	str	r3, [sp, #4]
 8003570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	0023      	movs	r3, r4
 8003576:	f000 f8c5 	bl	8003704 <I2C_RequestMemoryWrite>
 800357a:	1e03      	subs	r3, r0, #0
 800357c:	d005      	beq.n	800358a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2240      	movs	r2, #64	@ 0x40
 8003582:	2100      	movs	r1, #0
 8003584:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e0b5      	b.n	80036f6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	2bff      	cmp	r3, #255	@ 0xff
 8003592:	d911      	bls.n	80035b8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	22ff      	movs	r2, #255	@ 0xff
 8003598:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	2380      	movs	r3, #128	@ 0x80
 80035a2:	045c      	lsls	r4, r3, #17
 80035a4:	230a      	movs	r3, #10
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	8819      	ldrh	r1, [r3, #0]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	2300      	movs	r3, #0
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	0023      	movs	r3, r4
 80035b2:	f000 fb07 	bl	8003bc4 <I2C_TransferConfig>
 80035b6:	e012      	b.n	80035de <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	2380      	movs	r3, #128	@ 0x80
 80035ca:	049c      	lsls	r4, r3, #18
 80035cc:	230a      	movs	r3, #10
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	8819      	ldrh	r1, [r3, #0]
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	2300      	movs	r3, #0
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	0023      	movs	r3, r4
 80035da:	f000 faf3 	bl	8003bc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	0018      	movs	r0, r3
 80035e6:	f000 f96b 	bl	80038c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80035ea:	1e03      	subs	r3, r0, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e081      	b.n	80036f6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	781a      	ldrb	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d03a      	beq.n	80036a2 <HAL_I2C_Mem_Write+0x1fa>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003630:	2b00      	cmp	r3, #0
 8003632:	d136      	bne.n	80036a2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003634:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	0013      	movs	r3, r2
 800363e:	2200      	movs	r2, #0
 8003640:	2180      	movs	r1, #128	@ 0x80
 8003642:	f000 f8e5 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 8003646:	1e03      	subs	r3, r0, #0
 8003648:	d001      	beq.n	800364e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e053      	b.n	80036f6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003652:	b29b      	uxth	r3, r3
 8003654:	2bff      	cmp	r3, #255	@ 0xff
 8003656:	d911      	bls.n	800367c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	22ff      	movs	r2, #255	@ 0xff
 800365c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003662:	b2da      	uxtb	r2, r3
 8003664:	2380      	movs	r3, #128	@ 0x80
 8003666:	045c      	lsls	r4, r3, #17
 8003668:	230a      	movs	r3, #10
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	8819      	ldrh	r1, [r3, #0]
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	2300      	movs	r3, #0
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	0023      	movs	r3, r4
 8003676:	f000 faa5 	bl	8003bc4 <I2C_TransferConfig>
 800367a:	e012      	b.n	80036a2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368a:	b2da      	uxtb	r2, r3
 800368c:	2380      	movs	r3, #128	@ 0x80
 800368e:	049c      	lsls	r4, r3, #18
 8003690:	230a      	movs	r3, #10
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	8819      	ldrh	r1, [r3, #0]
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	2300      	movs	r3, #0
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	0023      	movs	r3, r4
 800369e:	f000 fa91 	bl	8003bc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d198      	bne.n	80035de <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	0018      	movs	r0, r3
 80036b4:	f000 f94a 	bl	800394c <I2C_WaitOnSTOPFlagUntilTimeout>
 80036b8:	1e03      	subs	r3, r0, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e01a      	b.n	80036f6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2220      	movs	r2, #32
 80036c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	490b      	ldr	r1, [pc, #44]	@ (8003700 <HAL_I2C_Mem_Write+0x258>)
 80036d4:	400a      	ands	r2, r1
 80036d6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2241      	movs	r2, #65	@ 0x41
 80036dc:	2120      	movs	r1, #32
 80036de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2242      	movs	r2, #66	@ 0x42
 80036e4:	2100      	movs	r1, #0
 80036e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2240      	movs	r2, #64	@ 0x40
 80036ec:	2100      	movs	r1, #0
 80036ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e000      	b.n	80036f6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80036f4:	2302      	movs	r3, #2
  }
}
 80036f6:	0018      	movs	r0, r3
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b007      	add	sp, #28
 80036fc:	bd90      	pop	{r4, r7, pc}
 80036fe:	46c0      	nop			@ (mov r8, r8)
 8003700:	fe00e800 	.word	0xfe00e800

08003704 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003704:	b5b0      	push	{r4, r5, r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	000c      	movs	r4, r1
 800370e:	0010      	movs	r0, r2
 8003710:	0019      	movs	r1, r3
 8003712:	250a      	movs	r5, #10
 8003714:	197b      	adds	r3, r7, r5
 8003716:	1c22      	adds	r2, r4, #0
 8003718:	801a      	strh	r2, [r3, #0]
 800371a:	2308      	movs	r3, #8
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	1c02      	adds	r2, r0, #0
 8003720:	801a      	strh	r2, [r3, #0]
 8003722:	1dbb      	adds	r3, r7, #6
 8003724:	1c0a      	adds	r2, r1, #0
 8003726:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003728:	1dbb      	adds	r3, r7, #6
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	b2da      	uxtb	r2, r3
 800372e:	2380      	movs	r3, #128	@ 0x80
 8003730:	045c      	lsls	r4, r3, #17
 8003732:	197b      	adds	r3, r7, r5
 8003734:	8819      	ldrh	r1, [r3, #0]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	4b23      	ldr	r3, [pc, #140]	@ (80037c8 <I2C_RequestMemoryWrite+0xc4>)
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	0023      	movs	r3, r4
 800373e:	f000 fa41 	bl	8003bc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003744:	6a39      	ldr	r1, [r7, #32]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	0018      	movs	r0, r3
 800374a:	f000 f8b9 	bl	80038c0 <I2C_WaitOnTXISFlagUntilTimeout>
 800374e:	1e03      	subs	r3, r0, #0
 8003750:	d001      	beq.n	8003756 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e033      	b.n	80037be <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003756:	1dbb      	adds	r3, r7, #6
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d107      	bne.n	800376e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800375e:	2308      	movs	r3, #8
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	629a      	str	r2, [r3, #40]	@ 0x28
 800376c:	e019      	b.n	80037a2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800376e:	2308      	movs	r3, #8
 8003770:	18fb      	adds	r3, r7, r3
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	0a1b      	lsrs	r3, r3, #8
 8003776:	b29b      	uxth	r3, r3
 8003778:	b2da      	uxtb	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003782:	6a39      	ldr	r1, [r7, #32]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	0018      	movs	r0, r3
 8003788:	f000 f89a 	bl	80038c0 <I2C_WaitOnTXISFlagUntilTimeout>
 800378c:	1e03      	subs	r3, r0, #0
 800378e:	d001      	beq.n	8003794 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e014      	b.n	80037be <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003794:	2308      	movs	r3, #8
 8003796:	18fb      	adds	r3, r7, r3
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	b2da      	uxtb	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80037a2:	6a3a      	ldr	r2, [r7, #32]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	0013      	movs	r3, r2
 80037ac:	2200      	movs	r2, #0
 80037ae:	2180      	movs	r1, #128	@ 0x80
 80037b0:	f000 f82e 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 80037b4:	1e03      	subs	r3, r0, #0
 80037b6:	d001      	beq.n	80037bc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b004      	add	sp, #16
 80037c4:	bdb0      	pop	{r4, r5, r7, pc}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	80002000 	.word	0x80002000

080037cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2202      	movs	r2, #2
 80037dc:	4013      	ands	r3, r2
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d103      	bne.n	80037ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2200      	movs	r2, #0
 80037e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	2201      	movs	r2, #1
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d007      	beq.n	8003808 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699a      	ldr	r2, [r3, #24]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2101      	movs	r1, #1
 8003804:	430a      	orrs	r2, r1
 8003806:	619a      	str	r2, [r3, #24]
  }
}
 8003808:	46c0      	nop			@ (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	b002      	add	sp, #8
 800380e:	bd80      	pop	{r7, pc}

08003810 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	1dfb      	adds	r3, r7, #7
 800381e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003820:	e03a      	b.n	8003898 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	6839      	ldr	r1, [r7, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	0018      	movs	r0, r3
 800382a:	f000 f8d3 	bl	80039d4 <I2C_IsErrorOccurred>
 800382e:	1e03      	subs	r3, r0, #0
 8003830:	d001      	beq.n	8003836 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e040      	b.n	80038b8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	3301      	adds	r3, #1
 800383a:	d02d      	beq.n	8003898 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383c:	f7fe fde4 	bl	8002408 <HAL_GetTick>
 8003840:	0002      	movs	r2, r0
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d302      	bcc.n	8003852 <I2C_WaitOnFlagUntilTimeout+0x42>
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d122      	bne.n	8003898 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	4013      	ands	r3, r2
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	425a      	negs	r2, r3
 8003862:	4153      	adcs	r3, r2
 8003864:	b2db      	uxtb	r3, r3
 8003866:	001a      	movs	r2, r3
 8003868:	1dfb      	adds	r3, r7, #7
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d113      	bne.n	8003898 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003874:	2220      	movs	r2, #32
 8003876:	431a      	orrs	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2241      	movs	r2, #65	@ 0x41
 8003880:	2120      	movs	r1, #32
 8003882:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2242      	movs	r2, #66	@ 0x42
 8003888:	2100      	movs	r1, #0
 800388a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2240      	movs	r2, #64	@ 0x40
 8003890:	2100      	movs	r1, #0
 8003892:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e00f      	b.n	80038b8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	4013      	ands	r3, r2
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	425a      	negs	r2, r3
 80038a8:	4153      	adcs	r3, r2
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	001a      	movs	r2, r3
 80038ae:	1dfb      	adds	r3, r7, #7
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d0b5      	beq.n	8003822 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	0018      	movs	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	b004      	add	sp, #16
 80038be:	bd80      	pop	{r7, pc}

080038c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038cc:	e032      	b.n	8003934 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	68b9      	ldr	r1, [r7, #8]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	0018      	movs	r0, r3
 80038d6:	f000 f87d 	bl	80039d4 <I2C_IsErrorOccurred>
 80038da:	1e03      	subs	r3, r0, #0
 80038dc:	d001      	beq.n	80038e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e030      	b.n	8003944 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	3301      	adds	r3, #1
 80038e6:	d025      	beq.n	8003934 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e8:	f7fe fd8e 	bl	8002408 <HAL_GetTick>
 80038ec:	0002      	movs	r2, r0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d302      	bcc.n	80038fe <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d11a      	bne.n	8003934 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	2202      	movs	r2, #2
 8003906:	4013      	ands	r3, r2
 8003908:	2b02      	cmp	r3, #2
 800390a:	d013      	beq.n	8003934 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003910:	2220      	movs	r2, #32
 8003912:	431a      	orrs	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2241      	movs	r2, #65	@ 0x41
 800391c:	2120      	movs	r1, #32
 800391e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2242      	movs	r2, #66	@ 0x42
 8003924:	2100      	movs	r1, #0
 8003926:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2240      	movs	r2, #64	@ 0x40
 800392c:	2100      	movs	r1, #0
 800392e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e007      	b.n	8003944 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	2202      	movs	r2, #2
 800393c:	4013      	ands	r3, r2
 800393e:	2b02      	cmp	r3, #2
 8003940:	d1c5      	bne.n	80038ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	0018      	movs	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	b004      	add	sp, #16
 800394a:	bd80      	pop	{r7, pc}

0800394c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003958:	e02f      	b.n	80039ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	0018      	movs	r0, r3
 8003962:	f000 f837 	bl	80039d4 <I2C_IsErrorOccurred>
 8003966:	1e03      	subs	r3, r0, #0
 8003968:	d001      	beq.n	800396e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e02d      	b.n	80039ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800396e:	f7fe fd4b 	bl	8002408 <HAL_GetTick>
 8003972:	0002      	movs	r2, r0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	429a      	cmp	r2, r3
 800397c:	d302      	bcc.n	8003984 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d11a      	bne.n	80039ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2220      	movs	r2, #32
 800398c:	4013      	ands	r3, r2
 800398e:	2b20      	cmp	r3, #32
 8003990:	d013      	beq.n	80039ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	2220      	movs	r2, #32
 8003998:	431a      	orrs	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2241      	movs	r2, #65	@ 0x41
 80039a2:	2120      	movs	r1, #32
 80039a4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2242      	movs	r2, #66	@ 0x42
 80039aa:	2100      	movs	r1, #0
 80039ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2240      	movs	r2, #64	@ 0x40
 80039b2:	2100      	movs	r1, #0
 80039b4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e007      	b.n	80039ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	2220      	movs	r2, #32
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d1c8      	bne.n	800395a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	0018      	movs	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b004      	add	sp, #16
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08a      	sub	sp, #40	@ 0x28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e0:	2327      	movs	r3, #39	@ 0x27
 80039e2:	18fb      	adds	r3, r7, r3
 80039e4:	2200      	movs	r2, #0
 80039e6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2210      	movs	r2, #16
 80039fc:	4013      	ands	r3, r2
 80039fe:	d100      	bne.n	8003a02 <I2C_IsErrorOccurred+0x2e>
 8003a00:	e079      	b.n	8003af6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2210      	movs	r2, #16
 8003a08:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a0a:	e057      	b.n	8003abc <I2C_IsErrorOccurred+0xe8>
 8003a0c:	2227      	movs	r2, #39	@ 0x27
 8003a0e:	18bb      	adds	r3, r7, r2
 8003a10:	18ba      	adds	r2, r7, r2
 8003a12:	7812      	ldrb	r2, [r2, #0]
 8003a14:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	d04f      	beq.n	8003abc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a1c:	f7fe fcf4 	bl	8002408 <HAL_GetTick>
 8003a20:	0002      	movs	r2, r0
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d302      	bcc.n	8003a32 <I2C_IsErrorOccurred+0x5e>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d144      	bne.n	8003abc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	2380      	movs	r3, #128	@ 0x80
 8003a3a:	01db      	lsls	r3, r3, #7
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a40:	2013      	movs	r0, #19
 8003a42:	183b      	adds	r3, r7, r0
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	2142      	movs	r1, #66	@ 0x42
 8003a48:	5c52      	ldrb	r2, [r2, r1]
 8003a4a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	2380      	movs	r3, #128	@ 0x80
 8003a54:	021b      	lsls	r3, r3, #8
 8003a56:	401a      	ands	r2, r3
 8003a58:	2380      	movs	r3, #128	@ 0x80
 8003a5a:	021b      	lsls	r3, r3, #8
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d126      	bne.n	8003aae <I2C_IsErrorOccurred+0xda>
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	2380      	movs	r3, #128	@ 0x80
 8003a64:	01db      	lsls	r3, r3, #7
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d021      	beq.n	8003aae <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003a6a:	183b      	adds	r3, r7, r0
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	d01d      	beq.n	8003aae <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2180      	movs	r1, #128	@ 0x80
 8003a7e:	01c9      	lsls	r1, r1, #7
 8003a80:	430a      	orrs	r2, r1
 8003a82:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a84:	f7fe fcc0 	bl	8002408 <HAL_GetTick>
 8003a88:	0003      	movs	r3, r0
 8003a8a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a8c:	e00f      	b.n	8003aae <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a8e:	f7fe fcbb 	bl	8002408 <HAL_GetTick>
 8003a92:	0002      	movs	r2, r0
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b19      	cmp	r3, #25
 8003a9a:	d908      	bls.n	8003aae <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003aa4:	2327      	movs	r3, #39	@ 0x27
 8003aa6:	18fb      	adds	r3, r7, r3
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	701a      	strb	r2, [r3, #0]

              break;
 8003aac:	e006      	b.n	8003abc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d1e8      	bne.n	8003a8e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d004      	beq.n	8003ad4 <I2C_IsErrorOccurred+0x100>
 8003aca:	2327      	movs	r3, #39	@ 0x27
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d09b      	beq.n	8003a0c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ad4:	2327      	movs	r3, #39	@ 0x27
 8003ad6:	18fb      	adds	r3, r7, r3
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d103      	bne.n	8003ae6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	2204      	movs	r2, #4
 8003aea:	4313      	orrs	r3, r2
 8003aec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003aee:	2327      	movs	r3, #39	@ 0x27
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	2201      	movs	r2, #1
 8003af4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	2380      	movs	r3, #128	@ 0x80
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	4013      	ands	r3, r2
 8003b06:	d00c      	beq.n	8003b22 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2280      	movs	r2, #128	@ 0x80
 8003b16:	0052      	lsls	r2, r2, #1
 8003b18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b1a:	2327      	movs	r3, #39	@ 0x27
 8003b1c:	18fb      	adds	r3, r7, r3
 8003b1e:	2201      	movs	r2, #1
 8003b20:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	2380      	movs	r3, #128	@ 0x80
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d00c      	beq.n	8003b46 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	2208      	movs	r2, #8
 8003b30:	4313      	orrs	r3, r2
 8003b32:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2280      	movs	r2, #128	@ 0x80
 8003b3a:	00d2      	lsls	r2, r2, #3
 8003b3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b3e:	2327      	movs	r3, #39	@ 0x27
 8003b40:	18fb      	adds	r3, r7, r3
 8003b42:	2201      	movs	r2, #1
 8003b44:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	2380      	movs	r3, #128	@ 0x80
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d00c      	beq.n	8003b6a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	2202      	movs	r2, #2
 8003b54:	4313      	orrs	r3, r2
 8003b56:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2280      	movs	r2, #128	@ 0x80
 8003b5e:	0092      	lsls	r2, r2, #2
 8003b60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b62:	2327      	movs	r3, #39	@ 0x27
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	2201      	movs	r2, #1
 8003b68:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003b6a:	2327      	movs	r3, #39	@ 0x27
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01d      	beq.n	8003bb0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f7ff fe28 	bl	80037cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	490e      	ldr	r1, [pc, #56]	@ (8003bc0 <I2C_IsErrorOccurred+0x1ec>)
 8003b88:	400a      	ands	r2, r1
 8003b8a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2241      	movs	r2, #65	@ 0x41
 8003b9c:	2120      	movs	r1, #32
 8003b9e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2242      	movs	r2, #66	@ 0x42
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2240      	movs	r2, #64	@ 0x40
 8003bac:	2100      	movs	r1, #0
 8003bae:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003bb0:	2327      	movs	r3, #39	@ 0x27
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	781b      	ldrb	r3, [r3, #0]
}
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	b00a      	add	sp, #40	@ 0x28
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	46c0      	nop			@ (mov r8, r8)
 8003bc0:	fe00e800 	.word	0xfe00e800

08003bc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bc4:	b590      	push	{r4, r7, lr}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	0008      	movs	r0, r1
 8003bce:	0011      	movs	r1, r2
 8003bd0:	607b      	str	r3, [r7, #4]
 8003bd2:	240a      	movs	r4, #10
 8003bd4:	193b      	adds	r3, r7, r4
 8003bd6:	1c02      	adds	r2, r0, #0
 8003bd8:	801a      	strh	r2, [r3, #0]
 8003bda:	2009      	movs	r0, #9
 8003bdc:	183b      	adds	r3, r7, r0
 8003bde:	1c0a      	adds	r2, r1, #0
 8003be0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003be2:	193b      	adds	r3, r7, r4
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	059b      	lsls	r3, r3, #22
 8003be8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bea:	183b      	adds	r3, r7, r0
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	0419      	lsls	r1, r3, #16
 8003bf0:	23ff      	movs	r3, #255	@ 0xff
 8003bf2:	041b      	lsls	r3, r3, #16
 8003bf4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bf6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	085b      	lsrs	r3, r3, #1
 8003c04:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c0e:	0d51      	lsrs	r1, r2, #21
 8003c10:	2280      	movs	r2, #128	@ 0x80
 8003c12:	00d2      	lsls	r2, r2, #3
 8003c14:	400a      	ands	r2, r1
 8003c16:	4907      	ldr	r1, [pc, #28]	@ (8003c34 <I2C_TransferConfig+0x70>)
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	43d2      	mvns	r2, r2
 8003c1c:	401a      	ands	r2, r3
 8003c1e:	0011      	movs	r1, r2
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c2a:	46c0      	nop			@ (mov r8, r8)
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b007      	add	sp, #28
 8003c30:	bd90      	pop	{r4, r7, pc}
 8003c32:	46c0      	nop			@ (mov r8, r8)
 8003c34:	03ff63ff 	.word	0x03ff63ff

08003c38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2241      	movs	r2, #65	@ 0x41
 8003c46:	5c9b      	ldrb	r3, [r3, r2]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	d138      	bne.n	8003cc0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2240      	movs	r2, #64	@ 0x40
 8003c52:	5c9b      	ldrb	r3, [r3, r2]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e032      	b.n	8003cc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2240      	movs	r2, #64	@ 0x40
 8003c60:	2101      	movs	r1, #1
 8003c62:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2241      	movs	r2, #65	@ 0x41
 8003c68:	2124      	movs	r1, #36	@ 0x24
 8003c6a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2101      	movs	r1, #1
 8003c78:	438a      	bics	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4911      	ldr	r1, [pc, #68]	@ (8003ccc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003c88:	400a      	ands	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6819      	ldr	r1, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2241      	movs	r2, #65	@ 0x41
 8003cb0:	2120      	movs	r1, #32
 8003cb2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2240      	movs	r2, #64	@ 0x40
 8003cb8:	2100      	movs	r1, #0
 8003cba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	e000      	b.n	8003cc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cc0:	2302      	movs	r3, #2
  }
}
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b002      	add	sp, #8
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	46c0      	nop			@ (mov r8, r8)
 8003ccc:	ffffefff 	.word	0xffffefff

08003cd0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2241      	movs	r2, #65	@ 0x41
 8003cde:	5c9b      	ldrb	r3, [r3, r2]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d139      	bne.n	8003d5a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2240      	movs	r2, #64	@ 0x40
 8003cea:	5c9b      	ldrb	r3, [r3, r2]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e033      	b.n	8003d5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2240      	movs	r2, #64	@ 0x40
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2241      	movs	r2, #65	@ 0x41
 8003d00:	2124      	movs	r1, #36	@ 0x24
 8003d02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2101      	movs	r1, #1
 8003d10:	438a      	bics	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4a11      	ldr	r2, [pc, #68]	@ (8003d64 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2101      	movs	r1, #1
 8003d42:	430a      	orrs	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2241      	movs	r2, #65	@ 0x41
 8003d4a:	2120      	movs	r1, #32
 8003d4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2240      	movs	r2, #64	@ 0x40
 8003d52:	2100      	movs	r1, #0
 8003d54:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	e000      	b.n	8003d5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d5a:	2302      	movs	r3, #2
  }
}
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b004      	add	sp, #16
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	fffff0ff 	.word	0xfffff0ff

08003d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d68:	b5b0      	push	{r4, r5, r7, lr}
 8003d6a:	b08a      	sub	sp, #40	@ 0x28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d102      	bne.n	8003d7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f000 fbaf 	bl	80044da <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d7c:	4bcf      	ldr	r3, [pc, #828]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	220c      	movs	r2, #12
 8003d82:	4013      	ands	r3, r2
 8003d84:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d86:	4bcd      	ldr	r3, [pc, #820]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	2380      	movs	r3, #128	@ 0x80
 8003d8c:	025b      	lsls	r3, r3, #9
 8003d8e:	4013      	ands	r3, r2
 8003d90:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2201      	movs	r2, #1
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d100      	bne.n	8003d9e <HAL_RCC_OscConfig+0x36>
 8003d9c:	e07e      	b.n	8003e9c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d007      	beq.n	8003db4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	2b0c      	cmp	r3, #12
 8003da8:	d112      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x68>
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	2380      	movs	r3, #128	@ 0x80
 8003dae:	025b      	lsls	r3, r3, #9
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d10d      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db4:	4bc1      	ldr	r3, [pc, #772]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	2380      	movs	r3, #128	@ 0x80
 8003dba:	029b      	lsls	r3, r3, #10
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	d100      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x5a>
 8003dc0:	e06b      	b.n	8003e9a <HAL_RCC_OscConfig+0x132>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d167      	bne.n	8003e9a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	f000 fb85 	bl	80044da <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	2380      	movs	r3, #128	@ 0x80
 8003dd6:	025b      	lsls	r3, r3, #9
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d107      	bne.n	8003dec <HAL_RCC_OscConfig+0x84>
 8003ddc:	4bb7      	ldr	r3, [pc, #732]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4bb6      	ldr	r3, [pc, #728]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003de2:	2180      	movs	r1, #128	@ 0x80
 8003de4:	0249      	lsls	r1, r1, #9
 8003de6:	430a      	orrs	r2, r1
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	e027      	b.n	8003e3c <HAL_RCC_OscConfig+0xd4>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	23a0      	movs	r3, #160	@ 0xa0
 8003df2:	02db      	lsls	r3, r3, #11
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d10e      	bne.n	8003e16 <HAL_RCC_OscConfig+0xae>
 8003df8:	4bb0      	ldr	r3, [pc, #704]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	4baf      	ldr	r3, [pc, #700]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003dfe:	2180      	movs	r1, #128	@ 0x80
 8003e00:	02c9      	lsls	r1, r1, #11
 8003e02:	430a      	orrs	r2, r1
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	4bad      	ldr	r3, [pc, #692]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4bac      	ldr	r3, [pc, #688]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003e0c:	2180      	movs	r1, #128	@ 0x80
 8003e0e:	0249      	lsls	r1, r1, #9
 8003e10:	430a      	orrs	r2, r1
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	e012      	b.n	8003e3c <HAL_RCC_OscConfig+0xd4>
 8003e16:	4ba9      	ldr	r3, [pc, #676]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	4ba8      	ldr	r3, [pc, #672]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003e1c:	49a8      	ldr	r1, [pc, #672]	@ (80040c0 <HAL_RCC_OscConfig+0x358>)
 8003e1e:	400a      	ands	r2, r1
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	4ba6      	ldr	r3, [pc, #664]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	2380      	movs	r3, #128	@ 0x80
 8003e28:	025b      	lsls	r3, r3, #9
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4ba2      	ldr	r3, [pc, #648]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	4ba1      	ldr	r3, [pc, #644]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003e36:	49a3      	ldr	r1, [pc, #652]	@ (80040c4 <HAL_RCC_OscConfig+0x35c>)
 8003e38:	400a      	ands	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d015      	beq.n	8003e70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e44:	f7fe fae0 	bl	8002408 <HAL_GetTick>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e4c:	e009      	b.n	8003e62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e4e:	f7fe fadb 	bl	8002408 <HAL_GetTick>
 8003e52:	0002      	movs	r2, r0
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b64      	cmp	r3, #100	@ 0x64
 8003e5a:	d902      	bls.n	8003e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	f000 fb3c 	bl	80044da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e62:	4b96      	ldr	r3, [pc, #600]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	2380      	movs	r3, #128	@ 0x80
 8003e68:	029b      	lsls	r3, r3, #10
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d0ef      	beq.n	8003e4e <HAL_RCC_OscConfig+0xe6>
 8003e6e:	e015      	b.n	8003e9c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e70:	f7fe faca 	bl	8002408 <HAL_GetTick>
 8003e74:	0003      	movs	r3, r0
 8003e76:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e7a:	f7fe fac5 	bl	8002408 <HAL_GetTick>
 8003e7e:	0002      	movs	r2, r0
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b64      	cmp	r3, #100	@ 0x64
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e326      	b.n	80044da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e8c:	4b8b      	ldr	r3, [pc, #556]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	2380      	movs	r3, #128	@ 0x80
 8003e92:	029b      	lsls	r3, r3, #10
 8003e94:	4013      	ands	r3, r2
 8003e96:	d1f0      	bne.n	8003e7a <HAL_RCC_OscConfig+0x112>
 8003e98:	e000      	b.n	8003e9c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e9a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	d100      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x140>
 8003ea6:	e08b      	b.n	8003fc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	2b0c      	cmp	r3, #12
 8003eb8:	d13e      	bne.n	8003f38 <HAL_RCC_OscConfig+0x1d0>
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d13b      	bne.n	8003f38 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003ec0:	4b7e      	ldr	r3, [pc, #504]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d004      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x16c>
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e302      	b.n	80044da <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed4:	4b79      	ldr	r3, [pc, #484]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	4a7b      	ldr	r2, [pc, #492]	@ (80040c8 <HAL_RCC_OscConfig+0x360>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	0019      	movs	r1, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	021a      	lsls	r2, r3, #8
 8003ee4:	4b75      	ldr	r3, [pc, #468]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003eea:	4b74      	ldr	r3, [pc, #464]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2209      	movs	r2, #9
 8003ef0:	4393      	bics	r3, r2
 8003ef2:	0019      	movs	r1, r3
 8003ef4:	4b71      	ldr	r3, [pc, #452]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003efc:	f000 fc40 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 8003f00:	0001      	movs	r1, r0
 8003f02:	4b6e      	ldr	r3, [pc, #440]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	091b      	lsrs	r3, r3, #4
 8003f08:	220f      	movs	r2, #15
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	4a6f      	ldr	r2, [pc, #444]	@ (80040cc <HAL_RCC_OscConfig+0x364>)
 8003f0e:	5cd3      	ldrb	r3, [r2, r3]
 8003f10:	000a      	movs	r2, r1
 8003f12:	40da      	lsrs	r2, r3
 8003f14:	4b6e      	ldr	r3, [pc, #440]	@ (80040d0 <HAL_RCC_OscConfig+0x368>)
 8003f16:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003f18:	4b6e      	ldr	r3, [pc, #440]	@ (80040d4 <HAL_RCC_OscConfig+0x36c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2513      	movs	r5, #19
 8003f1e:	197c      	adds	r4, r7, r5
 8003f20:	0018      	movs	r0, r3
 8003f22:	f7fe fa2b 	bl	800237c <HAL_InitTick>
 8003f26:	0003      	movs	r3, r0
 8003f28:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003f2a:	197b      	adds	r3, r7, r5
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d046      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8003f32:	197b      	adds	r3, r7, r5
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	e2d0      	b.n	80044da <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d027      	beq.n	8003f8e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f3e:	4b5f      	ldr	r3, [pc, #380]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2209      	movs	r2, #9
 8003f44:	4393      	bics	r3, r2
 8003f46:	0019      	movs	r1, r3
 8003f48:	4b5c      	ldr	r3, [pc, #368]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f50:	f7fe fa5a 	bl	8002408 <HAL_GetTick>
 8003f54:	0003      	movs	r3, r0
 8003f56:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f5a:	f7fe fa55 	bl	8002408 <HAL_GetTick>
 8003f5e:	0002      	movs	r2, r0
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e2b6      	b.n	80044da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f6c:	4b53      	ldr	r3, [pc, #332]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2204      	movs	r2, #4
 8003f72:	4013      	ands	r3, r2
 8003f74:	d0f1      	beq.n	8003f5a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f76:	4b51      	ldr	r3, [pc, #324]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4a53      	ldr	r2, [pc, #332]	@ (80040c8 <HAL_RCC_OscConfig+0x360>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	0019      	movs	r1, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	021a      	lsls	r2, r3, #8
 8003f86:	4b4d      	ldr	r3, [pc, #308]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	605a      	str	r2, [r3, #4]
 8003f8c:	e018      	b.n	8003fc0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f8e:	4b4b      	ldr	r3, [pc, #300]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	4b4a      	ldr	r3, [pc, #296]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003f94:	2101      	movs	r1, #1
 8003f96:	438a      	bics	r2, r1
 8003f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9a:	f7fe fa35 	bl	8002408 <HAL_GetTick>
 8003f9e:	0003      	movs	r3, r0
 8003fa0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fa4:	f7fe fa30 	bl	8002408 <HAL_GetTick>
 8003fa8:	0002      	movs	r2, r0
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e291      	b.n	80044da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fb6:	4b41      	ldr	r3, [pc, #260]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2204      	movs	r2, #4
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d1f1      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2210      	movs	r2, #16
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d100      	bne.n	8003fcc <HAL_RCC_OscConfig+0x264>
 8003fca:	e0a1      	b.n	8004110 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d140      	bne.n	8004054 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fd2:	4b3a      	ldr	r3, [pc, #232]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	2380      	movs	r3, #128	@ 0x80
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d005      	beq.n	8003fea <HAL_RCC_OscConfig+0x282>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e277      	b.n	80044da <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fea:	4b34      	ldr	r3, [pc, #208]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	4a3a      	ldr	r2, [pc, #232]	@ (80040d8 <HAL_RCC_OscConfig+0x370>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	0019      	movs	r1, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ff8:	4b30      	ldr	r3, [pc, #192]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	021b      	lsls	r3, r3, #8
 8004004:	0a19      	lsrs	r1, r3, #8
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	061a      	lsls	r2, r3, #24
 800400c:	4b2b      	ldr	r3, [pc, #172]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004016:	0b5b      	lsrs	r3, r3, #13
 8004018:	3301      	adds	r3, #1
 800401a:	2280      	movs	r2, #128	@ 0x80
 800401c:	0212      	lsls	r2, r2, #8
 800401e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004020:	4b26      	ldr	r3, [pc, #152]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	091b      	lsrs	r3, r3, #4
 8004026:	210f      	movs	r1, #15
 8004028:	400b      	ands	r3, r1
 800402a:	4928      	ldr	r1, [pc, #160]	@ (80040cc <HAL_RCC_OscConfig+0x364>)
 800402c:	5ccb      	ldrb	r3, [r1, r3]
 800402e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004030:	4b27      	ldr	r3, [pc, #156]	@ (80040d0 <HAL_RCC_OscConfig+0x368>)
 8004032:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004034:	4b27      	ldr	r3, [pc, #156]	@ (80040d4 <HAL_RCC_OscConfig+0x36c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2513      	movs	r5, #19
 800403a:	197c      	adds	r4, r7, r5
 800403c:	0018      	movs	r0, r3
 800403e:	f7fe f99d 	bl	800237c <HAL_InitTick>
 8004042:	0003      	movs	r3, r0
 8004044:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004046:	197b      	adds	r3, r7, r5
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d060      	beq.n	8004110 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800404e:	197b      	adds	r3, r7, r5
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	e242      	b.n	80044da <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d03f      	beq.n	80040dc <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800405c:	4b17      	ldr	r3, [pc, #92]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b16      	ldr	r3, [pc, #88]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8004062:	2180      	movs	r1, #128	@ 0x80
 8004064:	0049      	lsls	r1, r1, #1
 8004066:	430a      	orrs	r2, r1
 8004068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406a:	f7fe f9cd 	bl	8002408 <HAL_GetTick>
 800406e:	0003      	movs	r3, r0
 8004070:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004074:	f7fe f9c8 	bl	8002408 <HAL_GetTick>
 8004078:	0002      	movs	r2, r0
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e229      	b.n	80044da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004086:	4b0d      	ldr	r3, [pc, #52]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	2380      	movs	r3, #128	@ 0x80
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4013      	ands	r3, r2
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004092:	4b0a      	ldr	r3, [pc, #40]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	4a10      	ldr	r2, [pc, #64]	@ (80040d8 <HAL_RCC_OscConfig+0x370>)
 8004098:	4013      	ands	r3, r2
 800409a:	0019      	movs	r1, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040a0:	4b06      	ldr	r3, [pc, #24]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 80040a2:	430a      	orrs	r2, r1
 80040a4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040a6:	4b05      	ldr	r3, [pc, #20]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	021b      	lsls	r3, r3, #8
 80040ac:	0a19      	lsrs	r1, r3, #8
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	061a      	lsls	r2, r3, #24
 80040b4:	4b01      	ldr	r3, [pc, #4]	@ (80040bc <HAL_RCC_OscConfig+0x354>)
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]
 80040ba:	e029      	b.n	8004110 <HAL_RCC_OscConfig+0x3a8>
 80040bc:	40021000 	.word	0x40021000
 80040c0:	fffeffff 	.word	0xfffeffff
 80040c4:	fffbffff 	.word	0xfffbffff
 80040c8:	ffffe0ff 	.word	0xffffe0ff
 80040cc:	080066c4 	.word	0x080066c4
 80040d0:	20000004 	.word	0x20000004
 80040d4:	20000010 	.word	0x20000010
 80040d8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040dc:	4bbd      	ldr	r3, [pc, #756]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	4bbc      	ldr	r3, [pc, #752]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 80040e2:	49bd      	ldr	r1, [pc, #756]	@ (80043d8 <HAL_RCC_OscConfig+0x670>)
 80040e4:	400a      	ands	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e8:	f7fe f98e 	bl	8002408 <HAL_GetTick>
 80040ec:	0003      	movs	r3, r0
 80040ee:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040f2:	f7fe f989 	bl	8002408 <HAL_GetTick>
 80040f6:	0002      	movs	r2, r0
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e1ea      	b.n	80044da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004104:	4bb3      	ldr	r3, [pc, #716]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	2380      	movs	r3, #128	@ 0x80
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4013      	ands	r3, r2
 800410e:	d1f0      	bne.n	80040f2 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2208      	movs	r2, #8
 8004116:	4013      	ands	r3, r2
 8004118:	d036      	beq.n	8004188 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d019      	beq.n	8004156 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004122:	4bac      	ldr	r3, [pc, #688]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 8004124:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004126:	4bab      	ldr	r3, [pc, #684]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 8004128:	2101      	movs	r1, #1
 800412a:	430a      	orrs	r2, r1
 800412c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412e:	f7fe f96b 	bl	8002408 <HAL_GetTick>
 8004132:	0003      	movs	r3, r0
 8004134:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004138:	f7fe f966 	bl	8002408 <HAL_GetTick>
 800413c:	0002      	movs	r2, r0
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e1c7      	b.n	80044da <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800414a:	4ba2      	ldr	r3, [pc, #648]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 800414c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800414e:	2202      	movs	r2, #2
 8004150:	4013      	ands	r3, r2
 8004152:	d0f1      	beq.n	8004138 <HAL_RCC_OscConfig+0x3d0>
 8004154:	e018      	b.n	8004188 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004156:	4b9f      	ldr	r3, [pc, #636]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 8004158:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800415a:	4b9e      	ldr	r3, [pc, #632]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 800415c:	2101      	movs	r1, #1
 800415e:	438a      	bics	r2, r1
 8004160:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004162:	f7fe f951 	bl	8002408 <HAL_GetTick>
 8004166:	0003      	movs	r3, r0
 8004168:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800416c:	f7fe f94c 	bl	8002408 <HAL_GetTick>
 8004170:	0002      	movs	r2, r0
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e1ad      	b.n	80044da <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800417e:	4b95      	ldr	r3, [pc, #596]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 8004180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004182:	2202      	movs	r2, #2
 8004184:	4013      	ands	r3, r2
 8004186:	d1f1      	bne.n	800416c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2204      	movs	r2, #4
 800418e:	4013      	ands	r3, r2
 8004190:	d100      	bne.n	8004194 <HAL_RCC_OscConfig+0x42c>
 8004192:	e0ae      	b.n	80042f2 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004194:	2027      	movs	r0, #39	@ 0x27
 8004196:	183b      	adds	r3, r7, r0
 8004198:	2200      	movs	r2, #0
 800419a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800419c:	4b8d      	ldr	r3, [pc, #564]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 800419e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041a0:	2380      	movs	r3, #128	@ 0x80
 80041a2:	055b      	lsls	r3, r3, #21
 80041a4:	4013      	ands	r3, r2
 80041a6:	d109      	bne.n	80041bc <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041a8:	4b8a      	ldr	r3, [pc, #552]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 80041aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041ac:	4b89      	ldr	r3, [pc, #548]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 80041ae:	2180      	movs	r1, #128	@ 0x80
 80041b0:	0549      	lsls	r1, r1, #21
 80041b2:	430a      	orrs	r2, r1
 80041b4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80041b6:	183b      	adds	r3, r7, r0
 80041b8:	2201      	movs	r2, #1
 80041ba:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041bc:	4b87      	ldr	r3, [pc, #540]	@ (80043dc <HAL_RCC_OscConfig+0x674>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	2380      	movs	r3, #128	@ 0x80
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	4013      	ands	r3, r2
 80041c6:	d11a      	bne.n	80041fe <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041c8:	4b84      	ldr	r3, [pc, #528]	@ (80043dc <HAL_RCC_OscConfig+0x674>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	4b83      	ldr	r3, [pc, #524]	@ (80043dc <HAL_RCC_OscConfig+0x674>)
 80041ce:	2180      	movs	r1, #128	@ 0x80
 80041d0:	0049      	lsls	r1, r1, #1
 80041d2:	430a      	orrs	r2, r1
 80041d4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041d6:	f7fe f917 	bl	8002408 <HAL_GetTick>
 80041da:	0003      	movs	r3, r0
 80041dc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e0:	f7fe f912 	bl	8002408 <HAL_GetTick>
 80041e4:	0002      	movs	r2, r0
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b64      	cmp	r3, #100	@ 0x64
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e173      	b.n	80044da <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f2:	4b7a      	ldr	r3, [pc, #488]	@ (80043dc <HAL_RCC_OscConfig+0x674>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	2380      	movs	r3, #128	@ 0x80
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4013      	ands	r3, r2
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	2380      	movs	r3, #128	@ 0x80
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	429a      	cmp	r2, r3
 8004208:	d107      	bne.n	800421a <HAL_RCC_OscConfig+0x4b2>
 800420a:	4b72      	ldr	r3, [pc, #456]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 800420c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800420e:	4b71      	ldr	r3, [pc, #452]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 8004210:	2180      	movs	r1, #128	@ 0x80
 8004212:	0049      	lsls	r1, r1, #1
 8004214:	430a      	orrs	r2, r1
 8004216:	651a      	str	r2, [r3, #80]	@ 0x50
 8004218:	e031      	b.n	800427e <HAL_RCC_OscConfig+0x516>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10c      	bne.n	800423c <HAL_RCC_OscConfig+0x4d4>
 8004222:	4b6c      	ldr	r3, [pc, #432]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 8004224:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004226:	4b6b      	ldr	r3, [pc, #428]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 8004228:	496b      	ldr	r1, [pc, #428]	@ (80043d8 <HAL_RCC_OscConfig+0x670>)
 800422a:	400a      	ands	r2, r1
 800422c:	651a      	str	r2, [r3, #80]	@ 0x50
 800422e:	4b69      	ldr	r3, [pc, #420]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 8004230:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004232:	4b68      	ldr	r3, [pc, #416]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 8004234:	496a      	ldr	r1, [pc, #424]	@ (80043e0 <HAL_RCC_OscConfig+0x678>)
 8004236:	400a      	ands	r2, r1
 8004238:	651a      	str	r2, [r3, #80]	@ 0x50
 800423a:	e020      	b.n	800427e <HAL_RCC_OscConfig+0x516>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	23a0      	movs	r3, #160	@ 0xa0
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	429a      	cmp	r2, r3
 8004246:	d10e      	bne.n	8004266 <HAL_RCC_OscConfig+0x4fe>
 8004248:	4b62      	ldr	r3, [pc, #392]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 800424a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800424c:	4b61      	ldr	r3, [pc, #388]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 800424e:	2180      	movs	r1, #128	@ 0x80
 8004250:	00c9      	lsls	r1, r1, #3
 8004252:	430a      	orrs	r2, r1
 8004254:	651a      	str	r2, [r3, #80]	@ 0x50
 8004256:	4b5f      	ldr	r3, [pc, #380]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 8004258:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800425a:	4b5e      	ldr	r3, [pc, #376]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 800425c:	2180      	movs	r1, #128	@ 0x80
 800425e:	0049      	lsls	r1, r1, #1
 8004260:	430a      	orrs	r2, r1
 8004262:	651a      	str	r2, [r3, #80]	@ 0x50
 8004264:	e00b      	b.n	800427e <HAL_RCC_OscConfig+0x516>
 8004266:	4b5b      	ldr	r3, [pc, #364]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 8004268:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800426a:	4b5a      	ldr	r3, [pc, #360]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 800426c:	495a      	ldr	r1, [pc, #360]	@ (80043d8 <HAL_RCC_OscConfig+0x670>)
 800426e:	400a      	ands	r2, r1
 8004270:	651a      	str	r2, [r3, #80]	@ 0x50
 8004272:	4b58      	ldr	r3, [pc, #352]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 8004274:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004276:	4b57      	ldr	r3, [pc, #348]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 8004278:	4959      	ldr	r1, [pc, #356]	@ (80043e0 <HAL_RCC_OscConfig+0x678>)
 800427a:	400a      	ands	r2, r1
 800427c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d015      	beq.n	80042b2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004286:	f7fe f8bf 	bl	8002408 <HAL_GetTick>
 800428a:	0003      	movs	r3, r0
 800428c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800428e:	e009      	b.n	80042a4 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004290:	f7fe f8ba 	bl	8002408 <HAL_GetTick>
 8004294:	0002      	movs	r2, r0
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	4a52      	ldr	r2, [pc, #328]	@ (80043e4 <HAL_RCC_OscConfig+0x67c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e11a      	b.n	80044da <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042a4:	4b4b      	ldr	r3, [pc, #300]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 80042a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042a8:	2380      	movs	r3, #128	@ 0x80
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4013      	ands	r3, r2
 80042ae:	d0ef      	beq.n	8004290 <HAL_RCC_OscConfig+0x528>
 80042b0:	e014      	b.n	80042dc <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b2:	f7fe f8a9 	bl	8002408 <HAL_GetTick>
 80042b6:	0003      	movs	r3, r0
 80042b8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042ba:	e009      	b.n	80042d0 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042bc:	f7fe f8a4 	bl	8002408 <HAL_GetTick>
 80042c0:	0002      	movs	r2, r0
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	4a47      	ldr	r2, [pc, #284]	@ (80043e4 <HAL_RCC_OscConfig+0x67c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e104      	b.n	80044da <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042d0:	4b40      	ldr	r3, [pc, #256]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 80042d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042d4:	2380      	movs	r3, #128	@ 0x80
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4013      	ands	r3, r2
 80042da:	d1ef      	bne.n	80042bc <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042dc:	2327      	movs	r3, #39	@ 0x27
 80042de:	18fb      	adds	r3, r7, r3
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d105      	bne.n	80042f2 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e6:	4b3b      	ldr	r3, [pc, #236]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 80042e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042ea:	4b3a      	ldr	r3, [pc, #232]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 80042ec:	493e      	ldr	r1, [pc, #248]	@ (80043e8 <HAL_RCC_OscConfig+0x680>)
 80042ee:	400a      	ands	r2, r1
 80042f0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2220      	movs	r2, #32
 80042f8:	4013      	ands	r3, r2
 80042fa:	d049      	beq.n	8004390 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d026      	beq.n	8004352 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004304:	4b33      	ldr	r3, [pc, #204]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	4b32      	ldr	r3, [pc, #200]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 800430a:	2101      	movs	r1, #1
 800430c:	430a      	orrs	r2, r1
 800430e:	609a      	str	r2, [r3, #8]
 8004310:	4b30      	ldr	r3, [pc, #192]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 8004312:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004314:	4b2f      	ldr	r3, [pc, #188]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 8004316:	2101      	movs	r1, #1
 8004318:	430a      	orrs	r2, r1
 800431a:	635a      	str	r2, [r3, #52]	@ 0x34
 800431c:	4b33      	ldr	r3, [pc, #204]	@ (80043ec <HAL_RCC_OscConfig+0x684>)
 800431e:	6a1a      	ldr	r2, [r3, #32]
 8004320:	4b32      	ldr	r3, [pc, #200]	@ (80043ec <HAL_RCC_OscConfig+0x684>)
 8004322:	2180      	movs	r1, #128	@ 0x80
 8004324:	0189      	lsls	r1, r1, #6
 8004326:	430a      	orrs	r2, r1
 8004328:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432a:	f7fe f86d 	bl	8002408 <HAL_GetTick>
 800432e:	0003      	movs	r3, r0
 8004330:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004334:	f7fe f868 	bl	8002408 <HAL_GetTick>
 8004338:	0002      	movs	r2, r0
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e0c9      	b.n	80044da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004346:	4b23      	ldr	r3, [pc, #140]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2202      	movs	r2, #2
 800434c:	4013      	ands	r3, r2
 800434e:	d0f1      	beq.n	8004334 <HAL_RCC_OscConfig+0x5cc>
 8004350:	e01e      	b.n	8004390 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004352:	4b20      	ldr	r3, [pc, #128]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	4b1f      	ldr	r3, [pc, #124]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 8004358:	2101      	movs	r1, #1
 800435a:	438a      	bics	r2, r1
 800435c:	609a      	str	r2, [r3, #8]
 800435e:	4b23      	ldr	r3, [pc, #140]	@ (80043ec <HAL_RCC_OscConfig+0x684>)
 8004360:	6a1a      	ldr	r2, [r3, #32]
 8004362:	4b22      	ldr	r3, [pc, #136]	@ (80043ec <HAL_RCC_OscConfig+0x684>)
 8004364:	4922      	ldr	r1, [pc, #136]	@ (80043f0 <HAL_RCC_OscConfig+0x688>)
 8004366:	400a      	ands	r2, r1
 8004368:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436a:	f7fe f84d 	bl	8002408 <HAL_GetTick>
 800436e:	0003      	movs	r3, r0
 8004370:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004374:	f7fe f848 	bl	8002408 <HAL_GetTick>
 8004378:	0002      	movs	r2, r0
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e0a9      	b.n	80044da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004386:	4b13      	ldr	r3, [pc, #76]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	2202      	movs	r2, #2
 800438c:	4013      	ands	r3, r2
 800438e:	d1f1      	bne.n	8004374 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004394:	2b00      	cmp	r3, #0
 8004396:	d100      	bne.n	800439a <HAL_RCC_OscConfig+0x632>
 8004398:	e09e      	b.n	80044d8 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	2b0c      	cmp	r3, #12
 800439e:	d100      	bne.n	80043a2 <HAL_RCC_OscConfig+0x63a>
 80043a0:	e077      	b.n	8004492 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d158      	bne.n	800445c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043aa:	4b0a      	ldr	r3, [pc, #40]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	4b09      	ldr	r3, [pc, #36]	@ (80043d4 <HAL_RCC_OscConfig+0x66c>)
 80043b0:	4910      	ldr	r1, [pc, #64]	@ (80043f4 <HAL_RCC_OscConfig+0x68c>)
 80043b2:	400a      	ands	r2, r1
 80043b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b6:	f7fe f827 	bl	8002408 <HAL_GetTick>
 80043ba:	0003      	movs	r3, r0
 80043bc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043be:	e01b      	b.n	80043f8 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fe f822 	bl	8002408 <HAL_GetTick>
 80043c4:	0002      	movs	r2, r0
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d914      	bls.n	80043f8 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e083      	b.n	80044da <HAL_RCC_OscConfig+0x772>
 80043d2:	46c0      	nop			@ (mov r8, r8)
 80043d4:	40021000 	.word	0x40021000
 80043d8:	fffffeff 	.word	0xfffffeff
 80043dc:	40007000 	.word	0x40007000
 80043e0:	fffffbff 	.word	0xfffffbff
 80043e4:	00001388 	.word	0x00001388
 80043e8:	efffffff 	.word	0xefffffff
 80043ec:	40010000 	.word	0x40010000
 80043f0:	ffffdfff 	.word	0xffffdfff
 80043f4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043f8:	4b3a      	ldr	r3, [pc, #232]	@ (80044e4 <HAL_RCC_OscConfig+0x77c>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	2380      	movs	r3, #128	@ 0x80
 80043fe:	049b      	lsls	r3, r3, #18
 8004400:	4013      	ands	r3, r2
 8004402:	d1dd      	bne.n	80043c0 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004404:	4b37      	ldr	r3, [pc, #220]	@ (80044e4 <HAL_RCC_OscConfig+0x77c>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	4a37      	ldr	r2, [pc, #220]	@ (80044e8 <HAL_RCC_OscConfig+0x780>)
 800440a:	4013      	ands	r3, r2
 800440c:	0019      	movs	r1, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800441c:	431a      	orrs	r2, r3
 800441e:	4b31      	ldr	r3, [pc, #196]	@ (80044e4 <HAL_RCC_OscConfig+0x77c>)
 8004420:	430a      	orrs	r2, r1
 8004422:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004424:	4b2f      	ldr	r3, [pc, #188]	@ (80044e4 <HAL_RCC_OscConfig+0x77c>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	4b2e      	ldr	r3, [pc, #184]	@ (80044e4 <HAL_RCC_OscConfig+0x77c>)
 800442a:	2180      	movs	r1, #128	@ 0x80
 800442c:	0449      	lsls	r1, r1, #17
 800442e:	430a      	orrs	r2, r1
 8004430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004432:	f7fd ffe9 	bl	8002408 <HAL_GetTick>
 8004436:	0003      	movs	r3, r0
 8004438:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800443c:	f7fd ffe4 	bl	8002408 <HAL_GetTick>
 8004440:	0002      	movs	r2, r0
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e045      	b.n	80044da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800444e:	4b25      	ldr	r3, [pc, #148]	@ (80044e4 <HAL_RCC_OscConfig+0x77c>)
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	2380      	movs	r3, #128	@ 0x80
 8004454:	049b      	lsls	r3, r3, #18
 8004456:	4013      	ands	r3, r2
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0x6d4>
 800445a:	e03d      	b.n	80044d8 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800445c:	4b21      	ldr	r3, [pc, #132]	@ (80044e4 <HAL_RCC_OscConfig+0x77c>)
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	4b20      	ldr	r3, [pc, #128]	@ (80044e4 <HAL_RCC_OscConfig+0x77c>)
 8004462:	4922      	ldr	r1, [pc, #136]	@ (80044ec <HAL_RCC_OscConfig+0x784>)
 8004464:	400a      	ands	r2, r1
 8004466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fd ffce 	bl	8002408 <HAL_GetTick>
 800446c:	0003      	movs	r3, r0
 800446e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004472:	f7fd ffc9 	bl	8002408 <HAL_GetTick>
 8004476:	0002      	movs	r2, r0
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e02a      	b.n	80044da <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004484:	4b17      	ldr	r3, [pc, #92]	@ (80044e4 <HAL_RCC_OscConfig+0x77c>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	2380      	movs	r3, #128	@ 0x80
 800448a:	049b      	lsls	r3, r3, #18
 800448c:	4013      	ands	r3, r2
 800448e:	d1f0      	bne.n	8004472 <HAL_RCC_OscConfig+0x70a>
 8004490:	e022      	b.n	80044d8 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004496:	2b01      	cmp	r3, #1
 8004498:	d101      	bne.n	800449e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e01d      	b.n	80044da <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800449e:	4b11      	ldr	r3, [pc, #68]	@ (80044e4 <HAL_RCC_OscConfig+0x77c>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a4:	69fa      	ldr	r2, [r7, #28]
 80044a6:	2380      	movs	r3, #128	@ 0x80
 80044a8:	025b      	lsls	r3, r3, #9
 80044aa:	401a      	ands	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d10f      	bne.n	80044d4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	23f0      	movs	r3, #240	@ 0xf0
 80044b8:	039b      	lsls	r3, r3, #14
 80044ba:	401a      	ands	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d107      	bne.n	80044d4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80044c4:	69fa      	ldr	r2, [r7, #28]
 80044c6:	23c0      	movs	r3, #192	@ 0xc0
 80044c8:	041b      	lsls	r3, r3, #16
 80044ca:	401a      	ands	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e000      	b.n	80044da <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	0018      	movs	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	b00a      	add	sp, #40	@ 0x28
 80044e0:	bdb0      	pop	{r4, r5, r7, pc}
 80044e2:	46c0      	nop			@ (mov r8, r8)
 80044e4:	40021000 	.word	0x40021000
 80044e8:	ff02ffff 	.word	0xff02ffff
 80044ec:	feffffff 	.word	0xfeffffff

080044f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044f0:	b5b0      	push	{r4, r5, r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e128      	b.n	8004756 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004504:	4b96      	ldr	r3, [pc, #600]	@ (8004760 <HAL_RCC_ClockConfig+0x270>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2201      	movs	r2, #1
 800450a:	4013      	ands	r3, r2
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d91e      	bls.n	8004550 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004512:	4b93      	ldr	r3, [pc, #588]	@ (8004760 <HAL_RCC_ClockConfig+0x270>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2201      	movs	r2, #1
 8004518:	4393      	bics	r3, r2
 800451a:	0019      	movs	r1, r3
 800451c:	4b90      	ldr	r3, [pc, #576]	@ (8004760 <HAL_RCC_ClockConfig+0x270>)
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004524:	f7fd ff70 	bl	8002408 <HAL_GetTick>
 8004528:	0003      	movs	r3, r0
 800452a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800452c:	e009      	b.n	8004542 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800452e:	f7fd ff6b 	bl	8002408 <HAL_GetTick>
 8004532:	0002      	movs	r2, r0
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	4a8a      	ldr	r2, [pc, #552]	@ (8004764 <HAL_RCC_ClockConfig+0x274>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e109      	b.n	8004756 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004542:	4b87      	ldr	r3, [pc, #540]	@ (8004760 <HAL_RCC_ClockConfig+0x270>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2201      	movs	r2, #1
 8004548:	4013      	ands	r3, r2
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	429a      	cmp	r2, r3
 800454e:	d1ee      	bne.n	800452e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2202      	movs	r2, #2
 8004556:	4013      	ands	r3, r2
 8004558:	d009      	beq.n	800456e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800455a:	4b83      	ldr	r3, [pc, #524]	@ (8004768 <HAL_RCC_ClockConfig+0x278>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	22f0      	movs	r2, #240	@ 0xf0
 8004560:	4393      	bics	r3, r2
 8004562:	0019      	movs	r1, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	4b7f      	ldr	r3, [pc, #508]	@ (8004768 <HAL_RCC_ClockConfig+0x278>)
 800456a:	430a      	orrs	r2, r1
 800456c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2201      	movs	r2, #1
 8004574:	4013      	ands	r3, r2
 8004576:	d100      	bne.n	800457a <HAL_RCC_ClockConfig+0x8a>
 8004578:	e089      	b.n	800468e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d107      	bne.n	8004592 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004582:	4b79      	ldr	r3, [pc, #484]	@ (8004768 <HAL_RCC_ClockConfig+0x278>)
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	2380      	movs	r3, #128	@ 0x80
 8004588:	029b      	lsls	r3, r3, #10
 800458a:	4013      	ands	r3, r2
 800458c:	d120      	bne.n	80045d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e0e1      	b.n	8004756 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b03      	cmp	r3, #3
 8004598:	d107      	bne.n	80045aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800459a:	4b73      	ldr	r3, [pc, #460]	@ (8004768 <HAL_RCC_ClockConfig+0x278>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	2380      	movs	r3, #128	@ 0x80
 80045a0:	049b      	lsls	r3, r3, #18
 80045a2:	4013      	ands	r3, r2
 80045a4:	d114      	bne.n	80045d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e0d5      	b.n	8004756 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d106      	bne.n	80045c0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004768 <HAL_RCC_ClockConfig+0x278>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2204      	movs	r2, #4
 80045b8:	4013      	ands	r3, r2
 80045ba:	d109      	bne.n	80045d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e0ca      	b.n	8004756 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045c0:	4b69      	ldr	r3, [pc, #420]	@ (8004768 <HAL_RCC_ClockConfig+0x278>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	2380      	movs	r3, #128	@ 0x80
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4013      	ands	r3, r2
 80045ca:	d101      	bne.n	80045d0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0c2      	b.n	8004756 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045d0:	4b65      	ldr	r3, [pc, #404]	@ (8004768 <HAL_RCC_ClockConfig+0x278>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	2203      	movs	r2, #3
 80045d6:	4393      	bics	r3, r2
 80045d8:	0019      	movs	r1, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	4b62      	ldr	r3, [pc, #392]	@ (8004768 <HAL_RCC_ClockConfig+0x278>)
 80045e0:	430a      	orrs	r2, r1
 80045e2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045e4:	f7fd ff10 	bl	8002408 <HAL_GetTick>
 80045e8:	0003      	movs	r3, r0
 80045ea:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d111      	bne.n	8004618 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80045f4:	e009      	b.n	800460a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f6:	f7fd ff07 	bl	8002408 <HAL_GetTick>
 80045fa:	0002      	movs	r2, r0
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	4a58      	ldr	r2, [pc, #352]	@ (8004764 <HAL_RCC_ClockConfig+0x274>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e0a5      	b.n	8004756 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800460a:	4b57      	ldr	r3, [pc, #348]	@ (8004768 <HAL_RCC_ClockConfig+0x278>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	220c      	movs	r2, #12
 8004610:	4013      	ands	r3, r2
 8004612:	2b08      	cmp	r3, #8
 8004614:	d1ef      	bne.n	80045f6 <HAL_RCC_ClockConfig+0x106>
 8004616:	e03a      	b.n	800468e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2b03      	cmp	r3, #3
 800461e:	d111      	bne.n	8004644 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004620:	e009      	b.n	8004636 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004622:	f7fd fef1 	bl	8002408 <HAL_GetTick>
 8004626:	0002      	movs	r2, r0
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	4a4d      	ldr	r2, [pc, #308]	@ (8004764 <HAL_RCC_ClockConfig+0x274>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e08f      	b.n	8004756 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004636:	4b4c      	ldr	r3, [pc, #304]	@ (8004768 <HAL_RCC_ClockConfig+0x278>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	220c      	movs	r2, #12
 800463c:	4013      	ands	r3, r2
 800463e:	2b0c      	cmp	r3, #12
 8004640:	d1ef      	bne.n	8004622 <HAL_RCC_ClockConfig+0x132>
 8004642:	e024      	b.n	800468e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d11b      	bne.n	8004684 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800464c:	e009      	b.n	8004662 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464e:	f7fd fedb 	bl	8002408 <HAL_GetTick>
 8004652:	0002      	movs	r2, r0
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	4a42      	ldr	r2, [pc, #264]	@ (8004764 <HAL_RCC_ClockConfig+0x274>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e079      	b.n	8004756 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004662:	4b41      	ldr	r3, [pc, #260]	@ (8004768 <HAL_RCC_ClockConfig+0x278>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	220c      	movs	r2, #12
 8004668:	4013      	ands	r3, r2
 800466a:	2b04      	cmp	r3, #4
 800466c:	d1ef      	bne.n	800464e <HAL_RCC_ClockConfig+0x15e>
 800466e:	e00e      	b.n	800468e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004670:	f7fd feca 	bl	8002408 <HAL_GetTick>
 8004674:	0002      	movs	r2, r0
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	4a3a      	ldr	r2, [pc, #232]	@ (8004764 <HAL_RCC_ClockConfig+0x274>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e068      	b.n	8004756 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004684:	4b38      	ldr	r3, [pc, #224]	@ (8004768 <HAL_RCC_ClockConfig+0x278>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	220c      	movs	r2, #12
 800468a:	4013      	ands	r3, r2
 800468c:	d1f0      	bne.n	8004670 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800468e:	4b34      	ldr	r3, [pc, #208]	@ (8004760 <HAL_RCC_ClockConfig+0x270>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2201      	movs	r2, #1
 8004694:	4013      	ands	r3, r2
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d21e      	bcs.n	80046da <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469c:	4b30      	ldr	r3, [pc, #192]	@ (8004760 <HAL_RCC_ClockConfig+0x270>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2201      	movs	r2, #1
 80046a2:	4393      	bics	r3, r2
 80046a4:	0019      	movs	r1, r3
 80046a6:	4b2e      	ldr	r3, [pc, #184]	@ (8004760 <HAL_RCC_ClockConfig+0x270>)
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046ae:	f7fd feab 	bl	8002408 <HAL_GetTick>
 80046b2:	0003      	movs	r3, r0
 80046b4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b6:	e009      	b.n	80046cc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b8:	f7fd fea6 	bl	8002408 <HAL_GetTick>
 80046bc:	0002      	movs	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	4a28      	ldr	r2, [pc, #160]	@ (8004764 <HAL_RCC_ClockConfig+0x274>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e044      	b.n	8004756 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046cc:	4b24      	ldr	r3, [pc, #144]	@ (8004760 <HAL_RCC_ClockConfig+0x270>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2201      	movs	r2, #1
 80046d2:	4013      	ands	r3, r2
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d1ee      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2204      	movs	r2, #4
 80046e0:	4013      	ands	r3, r2
 80046e2:	d009      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046e4:	4b20      	ldr	r3, [pc, #128]	@ (8004768 <HAL_RCC_ClockConfig+0x278>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4a20      	ldr	r2, [pc, #128]	@ (800476c <HAL_RCC_ClockConfig+0x27c>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	0019      	movs	r1, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004768 <HAL_RCC_ClockConfig+0x278>)
 80046f4:	430a      	orrs	r2, r1
 80046f6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2208      	movs	r2, #8
 80046fe:	4013      	ands	r3, r2
 8004700:	d00a      	beq.n	8004718 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004702:	4b19      	ldr	r3, [pc, #100]	@ (8004768 <HAL_RCC_ClockConfig+0x278>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	4a1a      	ldr	r2, [pc, #104]	@ (8004770 <HAL_RCC_ClockConfig+0x280>)
 8004708:	4013      	ands	r3, r2
 800470a:	0019      	movs	r1, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	00da      	lsls	r2, r3, #3
 8004712:	4b15      	ldr	r3, [pc, #84]	@ (8004768 <HAL_RCC_ClockConfig+0x278>)
 8004714:	430a      	orrs	r2, r1
 8004716:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004718:	f000 f832 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 800471c:	0001      	movs	r1, r0
 800471e:	4b12      	ldr	r3, [pc, #72]	@ (8004768 <HAL_RCC_ClockConfig+0x278>)
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	091b      	lsrs	r3, r3, #4
 8004724:	220f      	movs	r2, #15
 8004726:	4013      	ands	r3, r2
 8004728:	4a12      	ldr	r2, [pc, #72]	@ (8004774 <HAL_RCC_ClockConfig+0x284>)
 800472a:	5cd3      	ldrb	r3, [r2, r3]
 800472c:	000a      	movs	r2, r1
 800472e:	40da      	lsrs	r2, r3
 8004730:	4b11      	ldr	r3, [pc, #68]	@ (8004778 <HAL_RCC_ClockConfig+0x288>)
 8004732:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004734:	4b11      	ldr	r3, [pc, #68]	@ (800477c <HAL_RCC_ClockConfig+0x28c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	250b      	movs	r5, #11
 800473a:	197c      	adds	r4, r7, r5
 800473c:	0018      	movs	r0, r3
 800473e:	f7fd fe1d 	bl	800237c <HAL_InitTick>
 8004742:	0003      	movs	r3, r0
 8004744:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004746:	197b      	adds	r3, r7, r5
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800474e:	197b      	adds	r3, r7, r5
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	e000      	b.n	8004756 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	0018      	movs	r0, r3
 8004758:	46bd      	mov	sp, r7
 800475a:	b004      	add	sp, #16
 800475c:	bdb0      	pop	{r4, r5, r7, pc}
 800475e:	46c0      	nop			@ (mov r8, r8)
 8004760:	40022000 	.word	0x40022000
 8004764:	00001388 	.word	0x00001388
 8004768:	40021000 	.word	0x40021000
 800476c:	fffff8ff 	.word	0xfffff8ff
 8004770:	ffffc7ff 	.word	0xffffc7ff
 8004774:	080066c4 	.word	0x080066c4
 8004778:	20000004 	.word	0x20000004
 800477c:	20000010 	.word	0x20000010

08004780 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004786:	4b3c      	ldr	r3, [pc, #240]	@ (8004878 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	220c      	movs	r2, #12
 8004790:	4013      	ands	r3, r2
 8004792:	2b0c      	cmp	r3, #12
 8004794:	d013      	beq.n	80047be <HAL_RCC_GetSysClockFreq+0x3e>
 8004796:	d85c      	bhi.n	8004852 <HAL_RCC_GetSysClockFreq+0xd2>
 8004798:	2b04      	cmp	r3, #4
 800479a:	d002      	beq.n	80047a2 <HAL_RCC_GetSysClockFreq+0x22>
 800479c:	2b08      	cmp	r3, #8
 800479e:	d00b      	beq.n	80047b8 <HAL_RCC_GetSysClockFreq+0x38>
 80047a0:	e057      	b.n	8004852 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80047a2:	4b35      	ldr	r3, [pc, #212]	@ (8004878 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2210      	movs	r2, #16
 80047a8:	4013      	ands	r3, r2
 80047aa:	d002      	beq.n	80047b2 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80047ac:	4b33      	ldr	r3, [pc, #204]	@ (800487c <HAL_RCC_GetSysClockFreq+0xfc>)
 80047ae:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80047b0:	e05d      	b.n	800486e <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80047b2:	4b33      	ldr	r3, [pc, #204]	@ (8004880 <HAL_RCC_GetSysClockFreq+0x100>)
 80047b4:	613b      	str	r3, [r7, #16]
      break;
 80047b6:	e05a      	b.n	800486e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047b8:	4b32      	ldr	r3, [pc, #200]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x104>)
 80047ba:	613b      	str	r3, [r7, #16]
      break;
 80047bc:	e057      	b.n	800486e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	0c9b      	lsrs	r3, r3, #18
 80047c2:	220f      	movs	r2, #15
 80047c4:	4013      	ands	r3, r2
 80047c6:	4a30      	ldr	r2, [pc, #192]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x108>)
 80047c8:	5cd3      	ldrb	r3, [r2, r3]
 80047ca:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	0d9b      	lsrs	r3, r3, #22
 80047d0:	2203      	movs	r2, #3
 80047d2:	4013      	ands	r3, r2
 80047d4:	3301      	adds	r3, #1
 80047d6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047d8:	4b27      	ldr	r3, [pc, #156]	@ (8004878 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	2380      	movs	r3, #128	@ 0x80
 80047de:	025b      	lsls	r3, r3, #9
 80047e0:	4013      	ands	r3, r2
 80047e2:	d00f      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	000a      	movs	r2, r1
 80047e8:	0152      	lsls	r2, r2, #5
 80047ea:	1a52      	subs	r2, r2, r1
 80047ec:	0193      	lsls	r3, r2, #6
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	185b      	adds	r3, r3, r1
 80047f4:	025b      	lsls	r3, r3, #9
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	0018      	movs	r0, r3
 80047fa:	f7fb fc8f 	bl	800011c <__udivsi3>
 80047fe:	0003      	movs	r3, r0
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	e023      	b.n	800484c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004804:	4b1c      	ldr	r3, [pc, #112]	@ (8004878 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2210      	movs	r2, #16
 800480a:	4013      	ands	r3, r2
 800480c:	d00f      	beq.n	800482e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800480e:	68b9      	ldr	r1, [r7, #8]
 8004810:	000a      	movs	r2, r1
 8004812:	0152      	lsls	r2, r2, #5
 8004814:	1a52      	subs	r2, r2, r1
 8004816:	0193      	lsls	r3, r2, #6
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	185b      	adds	r3, r3, r1
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	0018      	movs	r0, r3
 8004824:	f7fb fc7a 	bl	800011c <__udivsi3>
 8004828:	0003      	movs	r3, r0
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	e00e      	b.n	800484c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800482e:	68b9      	ldr	r1, [r7, #8]
 8004830:	000a      	movs	r2, r1
 8004832:	0152      	lsls	r2, r2, #5
 8004834:	1a52      	subs	r2, r2, r1
 8004836:	0193      	lsls	r3, r2, #6
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	185b      	adds	r3, r3, r1
 800483e:	029b      	lsls	r3, r3, #10
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	0018      	movs	r0, r3
 8004844:	f7fb fc6a 	bl	800011c <__udivsi3>
 8004848:	0003      	movs	r3, r0
 800484a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	613b      	str	r3, [r7, #16]
      break;
 8004850:	e00d      	b.n	800486e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004852:	4b09      	ldr	r3, [pc, #36]	@ (8004878 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	0b5b      	lsrs	r3, r3, #13
 8004858:	2207      	movs	r2, #7
 800485a:	4013      	ands	r3, r2
 800485c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	3301      	adds	r3, #1
 8004862:	2280      	movs	r2, #128	@ 0x80
 8004864:	0212      	lsls	r2, r2, #8
 8004866:	409a      	lsls	r2, r3
 8004868:	0013      	movs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
      break;
 800486c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800486e:	693b      	ldr	r3, [r7, #16]
}
 8004870:	0018      	movs	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	b006      	add	sp, #24
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40021000 	.word	0x40021000
 800487c:	003d0900 	.word	0x003d0900
 8004880:	00f42400 	.word	0x00f42400
 8004884:	007a1200 	.word	0x007a1200
 8004888:	080066dc 	.word	0x080066dc

0800488c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004890:	4b02      	ldr	r3, [pc, #8]	@ (800489c <HAL_RCC_GetHCLKFreq+0x10>)
 8004892:	681b      	ldr	r3, [r3, #0]
}
 8004894:	0018      	movs	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	46c0      	nop			@ (mov r8, r8)
 800489c:	20000004 	.word	0x20000004

080048a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048a4:	f7ff fff2 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048a8:	0001      	movs	r1, r0
 80048aa:	4b06      	ldr	r3, [pc, #24]	@ (80048c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	0a1b      	lsrs	r3, r3, #8
 80048b0:	2207      	movs	r2, #7
 80048b2:	4013      	ands	r3, r2
 80048b4:	4a04      	ldr	r2, [pc, #16]	@ (80048c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048b6:	5cd3      	ldrb	r3, [r2, r3]
 80048b8:	40d9      	lsrs	r1, r3
 80048ba:	000b      	movs	r3, r1
}
 80048bc:	0018      	movs	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	46c0      	nop			@ (mov r8, r8)
 80048c4:	40021000 	.word	0x40021000
 80048c8:	080066d4 	.word	0x080066d4

080048cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048d0:	f7ff ffdc 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048d4:	0001      	movs	r1, r0
 80048d6:	4b06      	ldr	r3, [pc, #24]	@ (80048f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	0adb      	lsrs	r3, r3, #11
 80048dc:	2207      	movs	r2, #7
 80048de:	4013      	ands	r3, r2
 80048e0:	4a04      	ldr	r2, [pc, #16]	@ (80048f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048e2:	5cd3      	ldrb	r3, [r2, r3]
 80048e4:	40d9      	lsrs	r1, r3
 80048e6:	000b      	movs	r3, r1
}
 80048e8:	0018      	movs	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	46c0      	nop			@ (mov r8, r8)
 80048f0:	40021000 	.word	0x40021000
 80048f4:	080066d4 	.word	0x080066d4

080048f8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004900:	2017      	movs	r0, #23
 8004902:	183b      	adds	r3, r7, r0
 8004904:	2200      	movs	r2, #0
 8004906:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2220      	movs	r2, #32
 800490e:	4013      	ands	r3, r2
 8004910:	d100      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004912:	e0c7      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004914:	4b93      	ldr	r3, [pc, #588]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004916:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004918:	2380      	movs	r3, #128	@ 0x80
 800491a:	055b      	lsls	r3, r3, #21
 800491c:	4013      	ands	r3, r2
 800491e:	d109      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004920:	4b90      	ldr	r3, [pc, #576]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004922:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004924:	4b8f      	ldr	r3, [pc, #572]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004926:	2180      	movs	r1, #128	@ 0x80
 8004928:	0549      	lsls	r1, r1, #21
 800492a:	430a      	orrs	r2, r1
 800492c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800492e:	183b      	adds	r3, r7, r0
 8004930:	2201      	movs	r2, #1
 8004932:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004934:	4b8c      	ldr	r3, [pc, #560]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	2380      	movs	r3, #128	@ 0x80
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	4013      	ands	r3, r2
 800493e:	d11a      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004940:	4b89      	ldr	r3, [pc, #548]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	4b88      	ldr	r3, [pc, #544]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004946:	2180      	movs	r1, #128	@ 0x80
 8004948:	0049      	lsls	r1, r1, #1
 800494a:	430a      	orrs	r2, r1
 800494c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800494e:	f7fd fd5b 	bl	8002408 <HAL_GetTick>
 8004952:	0003      	movs	r3, r0
 8004954:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004956:	e008      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004958:	f7fd fd56 	bl	8002408 <HAL_GetTick>
 800495c:	0002      	movs	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b64      	cmp	r3, #100	@ 0x64
 8004964:	d901      	bls.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e0f7      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x262>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	2380      	movs	r3, #128	@ 0x80
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	4013      	ands	r3, r2
 8004974:	d0f0      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004976:	4b7b      	ldr	r3, [pc, #492]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	23c0      	movs	r3, #192	@ 0xc0
 800497c:	039b      	lsls	r3, r3, #14
 800497e:	4013      	ands	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	23c0      	movs	r3, #192	@ 0xc0
 8004988:	039b      	lsls	r3, r3, #14
 800498a:	4013      	ands	r3, r2
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	429a      	cmp	r2, r3
 8004990:	d013      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	23c0      	movs	r3, #192	@ 0xc0
 8004998:	029b      	lsls	r3, r3, #10
 800499a:	401a      	ands	r2, r3
 800499c:	23c0      	movs	r3, #192	@ 0xc0
 800499e:	029b      	lsls	r3, r3, #10
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d10a      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80049a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	2380      	movs	r3, #128	@ 0x80
 80049aa:	029b      	lsls	r3, r3, #10
 80049ac:	401a      	ands	r2, r3
 80049ae:	2380      	movs	r3, #128	@ 0x80
 80049b0:	029b      	lsls	r3, r3, #10
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d101      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e0cf      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x262>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80049ba:	4b6a      	ldr	r3, [pc, #424]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80049bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049be:	23c0      	movs	r3, #192	@ 0xc0
 80049c0:	029b      	lsls	r3, r3, #10
 80049c2:	4013      	ands	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d03b      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	23c0      	movs	r3, #192	@ 0xc0
 80049d2:	029b      	lsls	r3, r3, #10
 80049d4:	4013      	ands	r3, r2
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d033      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2220      	movs	r2, #32
 80049e2:	4013      	ands	r3, r2
 80049e4:	d02e      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80049e6:	4b5f      	ldr	r3, [pc, #380]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80049e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ea:	4a60      	ldr	r2, [pc, #384]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049f0:	4b5c      	ldr	r3, [pc, #368]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80049f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049f4:	4b5b      	ldr	r3, [pc, #364]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80049f6:	2180      	movs	r1, #128	@ 0x80
 80049f8:	0309      	lsls	r1, r1, #12
 80049fa:	430a      	orrs	r2, r1
 80049fc:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049fe:	4b59      	ldr	r3, [pc, #356]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004a00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a02:	4b58      	ldr	r3, [pc, #352]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004a04:	495a      	ldr	r1, [pc, #360]	@ (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004a06:	400a      	ands	r2, r1
 8004a08:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004a0a:	4b56      	ldr	r3, [pc, #344]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	2380      	movs	r3, #128	@ 0x80
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	4013      	ands	r3, r2
 8004a18:	d014      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1a:	f7fd fcf5 	bl	8002408 <HAL_GetTick>
 8004a1e:	0003      	movs	r3, r0
 8004a20:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a22:	e009      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a24:	f7fd fcf0 	bl	8002408 <HAL_GetTick>
 8004a28:	0002      	movs	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	4a51      	ldr	r2, [pc, #324]	@ (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e090      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x262>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a38:	4b4a      	ldr	r3, [pc, #296]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004a3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a3c:	2380      	movs	r3, #128	@ 0x80
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4013      	ands	r3, r2
 8004a42:	d0ef      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	d01f      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	23c0      	movs	r3, #192	@ 0xc0
 8004a54:	029b      	lsls	r3, r3, #10
 8004a56:	401a      	ands	r2, r3
 8004a58:	23c0      	movs	r3, #192	@ 0xc0
 8004a5a:	029b      	lsls	r3, r3, #10
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d10c      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004a60:	4b40      	ldr	r3, [pc, #256]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a44      	ldr	r2, [pc, #272]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	0019      	movs	r1, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	23c0      	movs	r3, #192	@ 0xc0
 8004a70:	039b      	lsls	r3, r3, #14
 8004a72:	401a      	ands	r2, r3
 8004a74:	4b3b      	ldr	r3, [pc, #236]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004a76:	430a      	orrs	r2, r1
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004a7c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	23c0      	movs	r3, #192	@ 0xc0
 8004a84:	029b      	lsls	r3, r3, #10
 8004a86:	401a      	ands	r2, r3
 8004a88:	4b36      	ldr	r3, [pc, #216]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a8e:	2317      	movs	r3, #23
 8004a90:	18fb      	adds	r3, r7, r3
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d105      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a98:	4b32      	ldr	r3, [pc, #200]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004a9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a9c:	4b31      	ldr	r3, [pc, #196]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004a9e:	4937      	ldr	r1, [pc, #220]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004aa0:	400a      	ands	r2, r1
 8004aa2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	4013      	ands	r3, r2
 8004aac:	d009      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004aae:	4b2d      	ldr	r3, [pc, #180]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ab2:	2203      	movs	r2, #3
 8004ab4:	4393      	bics	r3, r2
 8004ab6:	0019      	movs	r1, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	4b29      	ldr	r3, [pc, #164]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	4013      	ands	r3, r2
 8004aca:	d009      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004acc:	4b25      	ldr	r3, [pc, #148]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ad0:	220c      	movs	r2, #12
 8004ad2:	4393      	bics	r3, r2
 8004ad4:	0019      	movs	r1, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	4b22      	ldr	r3, [pc, #136]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004adc:	430a      	orrs	r2, r1
 8004ade:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	d009      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004aea:	4b1e      	ldr	r3, [pc, #120]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aee:	4a24      	ldr	r2, [pc, #144]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	0019      	movs	r1, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691a      	ldr	r2, [r3, #16]
 8004af8:	4b1a      	ldr	r3, [pc, #104]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004afa:	430a      	orrs	r2, r1
 8004afc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2208      	movs	r2, #8
 8004b04:	4013      	ands	r3, r2
 8004b06:	d009      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b08:	4b16      	ldr	r3, [pc, #88]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	0019      	movs	r1, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695a      	ldr	r2, [r3, #20]
 8004b16:	4b13      	ldr	r3, [pc, #76]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2240      	movs	r2, #64	@ 0x40
 8004b22:	4013      	ands	r3, r2
 8004b24:	d009      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b26:	4b0f      	ldr	r3, [pc, #60]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b2a:	4a17      	ldr	r2, [pc, #92]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	0019      	movs	r1, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69da      	ldr	r2, [r3, #28]
 8004b34:	4b0b      	ldr	r3, [pc, #44]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b36:	430a      	orrs	r2, r1
 8004b38:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2280      	movs	r2, #128	@ 0x80
 8004b40:	4013      	ands	r3, r2
 8004b42:	d009      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004b44:	4b07      	ldr	r3, [pc, #28]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b48:	4a10      	ldr	r2, [pc, #64]	@ (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	0019      	movs	r1, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699a      	ldr	r2, [r3, #24]
 8004b52:	4b04      	ldr	r3, [pc, #16]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b54:	430a      	orrs	r2, r1
 8004b56:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	b006      	add	sp, #24
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	46c0      	nop			@ (mov r8, r8)
 8004b64:	40021000 	.word	0x40021000
 8004b68:	40007000 	.word	0x40007000
 8004b6c:	fffcffff 	.word	0xfffcffff
 8004b70:	fff7ffff 	.word	0xfff7ffff
 8004b74:	00001388 	.word	0x00001388
 8004b78:	ffcfffff 	.word	0xffcfffff
 8004b7c:	efffffff 	.word	0xefffffff
 8004b80:	fffff3ff 	.word	0xfffff3ff
 8004b84:	ffffcfff 	.word	0xffffcfff
 8004b88:	fbffffff 	.word	0xfbffffff
 8004b8c:	fff3ffff 	.word	0xfff3ffff

08004b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e032      	b.n	8004c08 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2239      	movs	r2, #57	@ 0x39
 8004ba6:	5c9b      	ldrb	r3, [r3, r2]
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d107      	bne.n	8004bbe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2238      	movs	r2, #56	@ 0x38
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f7fd f845 	bl	8001c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2239      	movs	r2, #57	@ 0x39
 8004bc2:	2102      	movs	r1, #2
 8004bc4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	0019      	movs	r1, r3
 8004bd0:	0010      	movs	r0, r2
 8004bd2:	f000 f95d 	bl	8004e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	223e      	movs	r2, #62	@ 0x3e
 8004bda:	2101      	movs	r1, #1
 8004bdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	223a      	movs	r2, #58	@ 0x3a
 8004be2:	2101      	movs	r1, #1
 8004be4:	5499      	strb	r1, [r3, r2]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	223b      	movs	r2, #59	@ 0x3b
 8004bea:	2101      	movs	r1, #1
 8004bec:	5499      	strb	r1, [r3, r2]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	223c      	movs	r2, #60	@ 0x3c
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	5499      	strb	r1, [r3, r2]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	223d      	movs	r2, #61	@ 0x3d
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2239      	movs	r2, #57	@ 0x39
 8004c02:	2101      	movs	r1, #1
 8004c04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	0018      	movs	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	b002      	add	sp, #8
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2239      	movs	r2, #57	@ 0x39
 8004c1c:	5c9b      	ldrb	r3, [r3, r2]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d001      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e036      	b.n	8004c96 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2239      	movs	r2, #57	@ 0x39
 8004c2c:	2102      	movs	r1, #2
 8004c2e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	2380      	movs	r3, #128	@ 0x80
 8004c46:	05db      	lsls	r3, r3, #23
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d009      	beq.n	8004c60 <HAL_TIM_Base_Start_IT+0x50>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a13      	ldr	r2, [pc, #76]	@ (8004ca0 <HAL_TIM_Base_Start_IT+0x90>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d004      	beq.n	8004c60 <HAL_TIM_Base_Start_IT+0x50>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a12      	ldr	r2, [pc, #72]	@ (8004ca4 <HAL_TIM_Base_Start_IT+0x94>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d111      	bne.n	8004c84 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	2207      	movs	r2, #7
 8004c68:	4013      	ands	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b06      	cmp	r3, #6
 8004c70:	d010      	beq.n	8004c94 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c82:	e007      	b.n	8004c94 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2101      	movs	r1, #1
 8004c90:	430a      	orrs	r2, r1
 8004c92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	0018      	movs	r0, r3
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	b004      	add	sp, #16
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	46c0      	nop			@ (mov r8, r8)
 8004ca0:	40010800 	.word	0x40010800
 8004ca4:	40011400 	.word	0x40011400

08004ca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d021      	beq.n	8004d0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	4013      	ands	r3, r2
 8004cce:	d01d      	beq.n	8004d0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2203      	movs	r2, #3
 8004cd6:	4252      	negs	r2, r2
 8004cd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	2203      	movs	r2, #3
 8004ce8:	4013      	ands	r3, r2
 8004cea:	d004      	beq.n	8004cf6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f000 f8b6 	bl	8004e60 <HAL_TIM_IC_CaptureCallback>
 8004cf4:	e007      	b.n	8004d06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f000 f8a9 	bl	8004e50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	0018      	movs	r0, r3
 8004d02:	f000 f8b5 	bl	8004e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2204      	movs	r2, #4
 8004d10:	4013      	ands	r3, r2
 8004d12:	d022      	beq.n	8004d5a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2204      	movs	r2, #4
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d01e      	beq.n	8004d5a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2205      	movs	r2, #5
 8004d22:	4252      	negs	r2, r2
 8004d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699a      	ldr	r2, [r3, #24]
 8004d32:	23c0      	movs	r3, #192	@ 0xc0
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4013      	ands	r3, r2
 8004d38:	d004      	beq.n	8004d44 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f000 f88f 	bl	8004e60 <HAL_TIM_IC_CaptureCallback>
 8004d42:	e007      	b.n	8004d54 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	0018      	movs	r0, r3
 8004d48:	f000 f882 	bl	8004e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	0018      	movs	r0, r3
 8004d50:	f000 f88e 	bl	8004e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2208      	movs	r2, #8
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d021      	beq.n	8004da6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2208      	movs	r2, #8
 8004d66:	4013      	ands	r3, r2
 8004d68:	d01d      	beq.n	8004da6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2209      	movs	r2, #9
 8004d70:	4252      	negs	r2, r2
 8004d72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2204      	movs	r2, #4
 8004d78:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	2203      	movs	r2, #3
 8004d82:	4013      	ands	r3, r2
 8004d84:	d004      	beq.n	8004d90 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f000 f869 	bl	8004e60 <HAL_TIM_IC_CaptureCallback>
 8004d8e:	e007      	b.n	8004da0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	0018      	movs	r0, r3
 8004d94:	f000 f85c 	bl	8004e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f000 f868 	bl	8004e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2210      	movs	r2, #16
 8004daa:	4013      	ands	r3, r2
 8004dac:	d022      	beq.n	8004df4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2210      	movs	r2, #16
 8004db2:	4013      	ands	r3, r2
 8004db4:	d01e      	beq.n	8004df4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2211      	movs	r2, #17
 8004dbc:	4252      	negs	r2, r2
 8004dbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2208      	movs	r2, #8
 8004dc4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69da      	ldr	r2, [r3, #28]
 8004dcc:	23c0      	movs	r3, #192	@ 0xc0
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d004      	beq.n	8004dde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f000 f842 	bl	8004e60 <HAL_TIM_IC_CaptureCallback>
 8004ddc:	e007      	b.n	8004dee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	0018      	movs	r0, r3
 8004de2:	f000 f835 	bl	8004e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	0018      	movs	r0, r3
 8004dea:	f000 f841 	bl	8004e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2201      	movs	r2, #1
 8004df8:	4013      	ands	r3, r2
 8004dfa:	d00c      	beq.n	8004e16 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	4013      	ands	r3, r2
 8004e02:	d008      	beq.n	8004e16 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	4252      	negs	r2, r2
 8004e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	0018      	movs	r0, r3
 8004e12:	f000 f815 	bl	8004e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2240      	movs	r2, #64	@ 0x40
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	d00c      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2240      	movs	r2, #64	@ 0x40
 8004e22:	4013      	ands	r3, r2
 8004e24:	d008      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2241      	movs	r2, #65	@ 0x41
 8004e2c:	4252      	negs	r2, r2
 8004e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	0018      	movs	r0, r3
 8004e34:	f000 f824 	bl	8004e80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e38:	46c0      	nop			@ (mov r8, r8)
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	b004      	add	sp, #16
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e48:	46c0      	nop			@ (mov r8, r8)
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	b002      	add	sp, #8
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e58:	46c0      	nop			@ (mov r8, r8)
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	b002      	add	sp, #8
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e68:	46c0      	nop			@ (mov r8, r8)
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b002      	add	sp, #8
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e78:	46c0      	nop			@ (mov r8, r8)
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	b002      	add	sp, #8
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e88:	46c0      	nop			@ (mov r8, r8)
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	b002      	add	sp, #8
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	2380      	movs	r3, #128	@ 0x80
 8004ea4:	05db      	lsls	r3, r3, #23
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d007      	beq.n	8004eba <TIM_Base_SetConfig+0x2a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a22      	ldr	r2, [pc, #136]	@ (8004f38 <TIM_Base_SetConfig+0xa8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d003      	beq.n	8004eba <TIM_Base_SetConfig+0x2a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a21      	ldr	r2, [pc, #132]	@ (8004f3c <TIM_Base_SetConfig+0xac>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d108      	bne.n	8004ecc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2270      	movs	r2, #112	@ 0x70
 8004ebe:	4393      	bics	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	2380      	movs	r3, #128	@ 0x80
 8004ed0:	05db      	lsls	r3, r3, #23
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d007      	beq.n	8004ee6 <TIM_Base_SetConfig+0x56>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a17      	ldr	r2, [pc, #92]	@ (8004f38 <TIM_Base_SetConfig+0xa8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d003      	beq.n	8004ee6 <TIM_Base_SetConfig+0x56>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a16      	ldr	r2, [pc, #88]	@ (8004f3c <TIM_Base_SetConfig+0xac>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d108      	bne.n	8004ef8 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4a15      	ldr	r2, [pc, #84]	@ (8004f40 <TIM_Base_SetConfig+0xb0>)
 8004eea:	4013      	ands	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2280      	movs	r2, #128	@ 0x80
 8004efc:	4393      	bics	r3, r2
 8004efe:	001a      	movs	r2, r3
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	601a      	str	r2, [r3, #0]
}
 8004f30:	46c0      	nop			@ (mov r8, r8)
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b004      	add	sp, #16
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40010800 	.word	0x40010800
 8004f3c:	40011400 	.word	0x40011400
 8004f40:	fffffcff 	.word	0xfffffcff

08004f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2238      	movs	r2, #56	@ 0x38
 8004f52:	5c9b      	ldrb	r3, [r3, r2]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e042      	b.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2238      	movs	r2, #56	@ 0x38
 8004f60:	2101      	movs	r1, #1
 8004f62:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2239      	movs	r2, #57	@ 0x39
 8004f68:	2102      	movs	r1, #2
 8004f6a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2270      	movs	r2, #112	@ 0x70
 8004f80:	4393      	bics	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	2380      	movs	r3, #128	@ 0x80
 8004f9c:	05db      	lsls	r3, r3, #23
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d009      	beq.n	8004fb6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a11      	ldr	r2, [pc, #68]	@ (8004fec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d004      	beq.n	8004fb6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d10c      	bne.n	8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	2280      	movs	r2, #128	@ 0x80
 8004fba:	4393      	bics	r3, r2
 8004fbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2239      	movs	r2, #57	@ 0x39
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2238      	movs	r2, #56	@ 0x38
 8004fdc:	2100      	movs	r1, #0
 8004fde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	b004      	add	sp, #16
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	46c0      	nop			@ (mov r8, r8)
 8004fec:	40010800 	.word	0x40010800
 8004ff0:	40011400 	.word	0x40011400

08004ff4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e044      	b.n	8005090 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800500a:	2b00      	cmp	r3, #0
 800500c:	d107      	bne.n	800501e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2278      	movs	r2, #120	@ 0x78
 8005012:	2100      	movs	r1, #0
 8005014:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	0018      	movs	r0, r3
 800501a:	f7fc fe35 	bl	8001c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2224      	movs	r2, #36	@ 0x24
 8005022:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2101      	movs	r1, #1
 8005030:	438a      	bics	r2, r1
 8005032:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	0018      	movs	r0, r3
 8005040:	f000 fb50 	bl	80056e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	0018      	movs	r0, r3
 8005048:	f000 f8c8 	bl	80051dc <UART_SetConfig>
 800504c:	0003      	movs	r3, r0
 800504e:	2b01      	cmp	r3, #1
 8005050:	d101      	bne.n	8005056 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e01c      	b.n	8005090 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	490d      	ldr	r1, [pc, #52]	@ (8005098 <HAL_UART_Init+0xa4>)
 8005062:	400a      	ands	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	212a      	movs	r1, #42	@ 0x2a
 8005072:	438a      	bics	r2, r1
 8005074:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2101      	movs	r1, #1
 8005082:	430a      	orrs	r2, r1
 8005084:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	0018      	movs	r0, r3
 800508a:	f000 fbdf 	bl	800584c <UART_CheckIdleState>
 800508e:	0003      	movs	r3, r0
}
 8005090:	0018      	movs	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	b002      	add	sp, #8
 8005096:	bd80      	pop	{r7, pc}
 8005098:	ffffb7ff 	.word	0xffffb7ff

0800509c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08a      	sub	sp, #40	@ 0x28
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	1dbb      	adds	r3, r7, #6
 80050aa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	d000      	beq.n	80050b6 <HAL_UART_Transmit+0x1a>
 80050b4:	e08c      	b.n	80051d0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <HAL_UART_Transmit+0x28>
 80050bc:	1dbb      	adds	r3, r7, #6
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e084      	b.n	80051d2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	2380      	movs	r3, #128	@ 0x80
 80050ce:	015b      	lsls	r3, r3, #5
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d109      	bne.n	80050e8 <HAL_UART_Transmit+0x4c>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d105      	bne.n	80050e8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2201      	movs	r2, #1
 80050e0:	4013      	ands	r3, r2
 80050e2:	d001      	beq.n	80050e8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e074      	b.n	80051d2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2284      	movs	r2, #132	@ 0x84
 80050ec:	2100      	movs	r1, #0
 80050ee:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2221      	movs	r2, #33	@ 0x21
 80050f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050f6:	f7fd f987 	bl	8002408 <HAL_GetTick>
 80050fa:	0003      	movs	r3, r0
 80050fc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	1dba      	adds	r2, r7, #6
 8005102:	2150      	movs	r1, #80	@ 0x50
 8005104:	8812      	ldrh	r2, [r2, #0]
 8005106:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	1dba      	adds	r2, r7, #6
 800510c:	2152      	movs	r1, #82	@ 0x52
 800510e:	8812      	ldrh	r2, [r2, #0]
 8005110:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	2380      	movs	r3, #128	@ 0x80
 8005118:	015b      	lsls	r3, r3, #5
 800511a:	429a      	cmp	r2, r3
 800511c:	d108      	bne.n	8005130 <HAL_UART_Transmit+0x94>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d104      	bne.n	8005130 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	e003      	b.n	8005138 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005134:	2300      	movs	r3, #0
 8005136:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005138:	e02f      	b.n	800519a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	0013      	movs	r3, r2
 8005144:	2200      	movs	r2, #0
 8005146:	2180      	movs	r1, #128	@ 0x80
 8005148:	f000 fc28 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 800514c:	1e03      	subs	r3, r0, #0
 800514e:	d004      	beq.n	800515a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2220      	movs	r2, #32
 8005154:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e03b      	b.n	80051d2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10b      	bne.n	8005178 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	001a      	movs	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	05d2      	lsls	r2, r2, #23
 800516c:	0dd2      	lsrs	r2, r2, #23
 800516e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	3302      	adds	r3, #2
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	e007      	b.n	8005188 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	781a      	ldrb	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	3301      	adds	r3, #1
 8005186:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2252      	movs	r2, #82	@ 0x52
 800518c:	5a9b      	ldrh	r3, [r3, r2]
 800518e:	b29b      	uxth	r3, r3
 8005190:	3b01      	subs	r3, #1
 8005192:	b299      	uxth	r1, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2252      	movs	r2, #82	@ 0x52
 8005198:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2252      	movs	r2, #82	@ 0x52
 800519e:	5a9b      	ldrh	r3, [r3, r2]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1c9      	bne.n	800513a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	0013      	movs	r3, r2
 80051b0:	2200      	movs	r2, #0
 80051b2:	2140      	movs	r1, #64	@ 0x40
 80051b4:	f000 fbf2 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 80051b8:	1e03      	subs	r3, r0, #0
 80051ba:	d004      	beq.n	80051c6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2220      	movs	r2, #32
 80051c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e005      	b.n	80051d2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2220      	movs	r2, #32
 80051ca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e000      	b.n	80051d2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80051d0:	2302      	movs	r3, #2
  }
}
 80051d2:	0018      	movs	r0, r3
 80051d4:	46bd      	mov	sp, r7
 80051d6:	b008      	add	sp, #32
 80051d8:	bd80      	pop	{r7, pc}
	...

080051dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051dc:	b5b0      	push	{r4, r5, r7, lr}
 80051de:	b08e      	sub	sp, #56	@ 0x38
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051e4:	231a      	movs	r3, #26
 80051e6:	2218      	movs	r2, #24
 80051e8:	189b      	adds	r3, r3, r2
 80051ea:	19db      	adds	r3, r3, r7
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	431a      	orrs	r2, r3
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	431a      	orrs	r2, r3
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	4313      	orrs	r3, r2
 8005206:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4ac6      	ldr	r2, [pc, #792]	@ (8005528 <UART_SetConfig+0x34c>)
 8005210:	4013      	ands	r3, r2
 8005212:	0019      	movs	r1, r3
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800521a:	430a      	orrs	r2, r1
 800521c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	4ac1      	ldr	r2, [pc, #772]	@ (800552c <UART_SetConfig+0x350>)
 8005226:	4013      	ands	r3, r2
 8005228:	0019      	movs	r1, r3
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4abb      	ldr	r2, [pc, #748]	@ (8005530 <UART_SetConfig+0x354>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d004      	beq.n	8005250 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800524c:	4313      	orrs	r3, r2
 800524e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	4ab7      	ldr	r2, [pc, #732]	@ (8005534 <UART_SetConfig+0x358>)
 8005258:	4013      	ands	r3, r2
 800525a:	0019      	movs	r1, r3
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005262:	430a      	orrs	r2, r1
 8005264:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4ab3      	ldr	r2, [pc, #716]	@ (8005538 <UART_SetConfig+0x35c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d131      	bne.n	80052d4 <UART_SetConfig+0xf8>
 8005270:	4bb2      	ldr	r3, [pc, #712]	@ (800553c <UART_SetConfig+0x360>)
 8005272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005274:	2203      	movs	r2, #3
 8005276:	4013      	ands	r3, r2
 8005278:	2b03      	cmp	r3, #3
 800527a:	d01d      	beq.n	80052b8 <UART_SetConfig+0xdc>
 800527c:	d823      	bhi.n	80052c6 <UART_SetConfig+0xea>
 800527e:	2b02      	cmp	r3, #2
 8005280:	d00c      	beq.n	800529c <UART_SetConfig+0xc0>
 8005282:	d820      	bhi.n	80052c6 <UART_SetConfig+0xea>
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <UART_SetConfig+0xb2>
 8005288:	2b01      	cmp	r3, #1
 800528a:	d00e      	beq.n	80052aa <UART_SetConfig+0xce>
 800528c:	e01b      	b.n	80052c6 <UART_SetConfig+0xea>
 800528e:	231b      	movs	r3, #27
 8005290:	2218      	movs	r2, #24
 8005292:	189b      	adds	r3, r3, r2
 8005294:	19db      	adds	r3, r3, r7
 8005296:	2201      	movs	r2, #1
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	e09c      	b.n	80053d6 <UART_SetConfig+0x1fa>
 800529c:	231b      	movs	r3, #27
 800529e:	2218      	movs	r2, #24
 80052a0:	189b      	adds	r3, r3, r2
 80052a2:	19db      	adds	r3, r3, r7
 80052a4:	2202      	movs	r2, #2
 80052a6:	701a      	strb	r2, [r3, #0]
 80052a8:	e095      	b.n	80053d6 <UART_SetConfig+0x1fa>
 80052aa:	231b      	movs	r3, #27
 80052ac:	2218      	movs	r2, #24
 80052ae:	189b      	adds	r3, r3, r2
 80052b0:	19db      	adds	r3, r3, r7
 80052b2:	2204      	movs	r2, #4
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	e08e      	b.n	80053d6 <UART_SetConfig+0x1fa>
 80052b8:	231b      	movs	r3, #27
 80052ba:	2218      	movs	r2, #24
 80052bc:	189b      	adds	r3, r3, r2
 80052be:	19db      	adds	r3, r3, r7
 80052c0:	2208      	movs	r2, #8
 80052c2:	701a      	strb	r2, [r3, #0]
 80052c4:	e087      	b.n	80053d6 <UART_SetConfig+0x1fa>
 80052c6:	231b      	movs	r3, #27
 80052c8:	2218      	movs	r2, #24
 80052ca:	189b      	adds	r3, r3, r2
 80052cc:	19db      	adds	r3, r3, r7
 80052ce:	2210      	movs	r2, #16
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	e080      	b.n	80053d6 <UART_SetConfig+0x1fa>
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a99      	ldr	r2, [pc, #612]	@ (8005540 <UART_SetConfig+0x364>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d131      	bne.n	8005342 <UART_SetConfig+0x166>
 80052de:	4b97      	ldr	r3, [pc, #604]	@ (800553c <UART_SetConfig+0x360>)
 80052e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052e2:	220c      	movs	r2, #12
 80052e4:	4013      	ands	r3, r2
 80052e6:	2b0c      	cmp	r3, #12
 80052e8:	d01d      	beq.n	8005326 <UART_SetConfig+0x14a>
 80052ea:	d823      	bhi.n	8005334 <UART_SetConfig+0x158>
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d00c      	beq.n	800530a <UART_SetConfig+0x12e>
 80052f0:	d820      	bhi.n	8005334 <UART_SetConfig+0x158>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <UART_SetConfig+0x120>
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d00e      	beq.n	8005318 <UART_SetConfig+0x13c>
 80052fa:	e01b      	b.n	8005334 <UART_SetConfig+0x158>
 80052fc:	231b      	movs	r3, #27
 80052fe:	2218      	movs	r2, #24
 8005300:	189b      	adds	r3, r3, r2
 8005302:	19db      	adds	r3, r3, r7
 8005304:	2200      	movs	r2, #0
 8005306:	701a      	strb	r2, [r3, #0]
 8005308:	e065      	b.n	80053d6 <UART_SetConfig+0x1fa>
 800530a:	231b      	movs	r3, #27
 800530c:	2218      	movs	r2, #24
 800530e:	189b      	adds	r3, r3, r2
 8005310:	19db      	adds	r3, r3, r7
 8005312:	2202      	movs	r2, #2
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	e05e      	b.n	80053d6 <UART_SetConfig+0x1fa>
 8005318:	231b      	movs	r3, #27
 800531a:	2218      	movs	r2, #24
 800531c:	189b      	adds	r3, r3, r2
 800531e:	19db      	adds	r3, r3, r7
 8005320:	2204      	movs	r2, #4
 8005322:	701a      	strb	r2, [r3, #0]
 8005324:	e057      	b.n	80053d6 <UART_SetConfig+0x1fa>
 8005326:	231b      	movs	r3, #27
 8005328:	2218      	movs	r2, #24
 800532a:	189b      	adds	r3, r3, r2
 800532c:	19db      	adds	r3, r3, r7
 800532e:	2208      	movs	r2, #8
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	e050      	b.n	80053d6 <UART_SetConfig+0x1fa>
 8005334:	231b      	movs	r3, #27
 8005336:	2218      	movs	r2, #24
 8005338:	189b      	adds	r3, r3, r2
 800533a:	19db      	adds	r3, r3, r7
 800533c:	2210      	movs	r2, #16
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	e049      	b.n	80053d6 <UART_SetConfig+0x1fa>
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a7a      	ldr	r2, [pc, #488]	@ (8005530 <UART_SetConfig+0x354>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d13e      	bne.n	80053ca <UART_SetConfig+0x1ee>
 800534c:	4b7b      	ldr	r3, [pc, #492]	@ (800553c <UART_SetConfig+0x360>)
 800534e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005350:	23c0      	movs	r3, #192	@ 0xc0
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	4013      	ands	r3, r2
 8005356:	22c0      	movs	r2, #192	@ 0xc0
 8005358:	0112      	lsls	r2, r2, #4
 800535a:	4293      	cmp	r3, r2
 800535c:	d027      	beq.n	80053ae <UART_SetConfig+0x1d2>
 800535e:	22c0      	movs	r2, #192	@ 0xc0
 8005360:	0112      	lsls	r2, r2, #4
 8005362:	4293      	cmp	r3, r2
 8005364:	d82a      	bhi.n	80053bc <UART_SetConfig+0x1e0>
 8005366:	2280      	movs	r2, #128	@ 0x80
 8005368:	0112      	lsls	r2, r2, #4
 800536a:	4293      	cmp	r3, r2
 800536c:	d011      	beq.n	8005392 <UART_SetConfig+0x1b6>
 800536e:	2280      	movs	r2, #128	@ 0x80
 8005370:	0112      	lsls	r2, r2, #4
 8005372:	4293      	cmp	r3, r2
 8005374:	d822      	bhi.n	80053bc <UART_SetConfig+0x1e0>
 8005376:	2b00      	cmp	r3, #0
 8005378:	d004      	beq.n	8005384 <UART_SetConfig+0x1a8>
 800537a:	2280      	movs	r2, #128	@ 0x80
 800537c:	00d2      	lsls	r2, r2, #3
 800537e:	4293      	cmp	r3, r2
 8005380:	d00e      	beq.n	80053a0 <UART_SetConfig+0x1c4>
 8005382:	e01b      	b.n	80053bc <UART_SetConfig+0x1e0>
 8005384:	231b      	movs	r3, #27
 8005386:	2218      	movs	r2, #24
 8005388:	189b      	adds	r3, r3, r2
 800538a:	19db      	adds	r3, r3, r7
 800538c:	2200      	movs	r2, #0
 800538e:	701a      	strb	r2, [r3, #0]
 8005390:	e021      	b.n	80053d6 <UART_SetConfig+0x1fa>
 8005392:	231b      	movs	r3, #27
 8005394:	2218      	movs	r2, #24
 8005396:	189b      	adds	r3, r3, r2
 8005398:	19db      	adds	r3, r3, r7
 800539a:	2202      	movs	r2, #2
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	e01a      	b.n	80053d6 <UART_SetConfig+0x1fa>
 80053a0:	231b      	movs	r3, #27
 80053a2:	2218      	movs	r2, #24
 80053a4:	189b      	adds	r3, r3, r2
 80053a6:	19db      	adds	r3, r3, r7
 80053a8:	2204      	movs	r2, #4
 80053aa:	701a      	strb	r2, [r3, #0]
 80053ac:	e013      	b.n	80053d6 <UART_SetConfig+0x1fa>
 80053ae:	231b      	movs	r3, #27
 80053b0:	2218      	movs	r2, #24
 80053b2:	189b      	adds	r3, r3, r2
 80053b4:	19db      	adds	r3, r3, r7
 80053b6:	2208      	movs	r2, #8
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	e00c      	b.n	80053d6 <UART_SetConfig+0x1fa>
 80053bc:	231b      	movs	r3, #27
 80053be:	2218      	movs	r2, #24
 80053c0:	189b      	adds	r3, r3, r2
 80053c2:	19db      	adds	r3, r3, r7
 80053c4:	2210      	movs	r2, #16
 80053c6:	701a      	strb	r2, [r3, #0]
 80053c8:	e005      	b.n	80053d6 <UART_SetConfig+0x1fa>
 80053ca:	231b      	movs	r3, #27
 80053cc:	2218      	movs	r2, #24
 80053ce:	189b      	adds	r3, r3, r2
 80053d0:	19db      	adds	r3, r3, r7
 80053d2:	2210      	movs	r2, #16
 80053d4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a55      	ldr	r2, [pc, #340]	@ (8005530 <UART_SetConfig+0x354>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d000      	beq.n	80053e2 <UART_SetConfig+0x206>
 80053e0:	e084      	b.n	80054ec <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053e2:	231b      	movs	r3, #27
 80053e4:	2218      	movs	r2, #24
 80053e6:	189b      	adds	r3, r3, r2
 80053e8:	19db      	adds	r3, r3, r7
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d01d      	beq.n	800542c <UART_SetConfig+0x250>
 80053f0:	dc20      	bgt.n	8005434 <UART_SetConfig+0x258>
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d015      	beq.n	8005422 <UART_SetConfig+0x246>
 80053f6:	dc1d      	bgt.n	8005434 <UART_SetConfig+0x258>
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <UART_SetConfig+0x226>
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d005      	beq.n	800540c <UART_SetConfig+0x230>
 8005400:	e018      	b.n	8005434 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005402:	f7ff fa4d 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 8005406:	0003      	movs	r3, r0
 8005408:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800540a:	e01c      	b.n	8005446 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800540c:	4b4b      	ldr	r3, [pc, #300]	@ (800553c <UART_SetConfig+0x360>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2210      	movs	r2, #16
 8005412:	4013      	ands	r3, r2
 8005414:	d002      	beq.n	800541c <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005416:	4b4b      	ldr	r3, [pc, #300]	@ (8005544 <UART_SetConfig+0x368>)
 8005418:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800541a:	e014      	b.n	8005446 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 800541c:	4b4a      	ldr	r3, [pc, #296]	@ (8005548 <UART_SetConfig+0x36c>)
 800541e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005420:	e011      	b.n	8005446 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005422:	f7ff f9ad 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 8005426:	0003      	movs	r3, r0
 8005428:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800542a:	e00c      	b.n	8005446 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800542c:	2380      	movs	r3, #128	@ 0x80
 800542e:	021b      	lsls	r3, r3, #8
 8005430:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005432:	e008      	b.n	8005446 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005438:	231a      	movs	r3, #26
 800543a:	2218      	movs	r2, #24
 800543c:	189b      	adds	r3, r3, r2
 800543e:	19db      	adds	r3, r3, r7
 8005440:	2201      	movs	r2, #1
 8005442:	701a      	strb	r2, [r3, #0]
        break;
 8005444:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005448:	2b00      	cmp	r3, #0
 800544a:	d100      	bne.n	800544e <UART_SetConfig+0x272>
 800544c:	e132      	b.n	80056b4 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	0013      	movs	r3, r2
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	189b      	adds	r3, r3, r2
 8005458:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800545a:	429a      	cmp	r2, r3
 800545c:	d305      	bcc.n	800546a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005464:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005466:	429a      	cmp	r2, r3
 8005468:	d906      	bls.n	8005478 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800546a:	231a      	movs	r3, #26
 800546c:	2218      	movs	r2, #24
 800546e:	189b      	adds	r3, r3, r2
 8005470:	19db      	adds	r3, r3, r7
 8005472:	2201      	movs	r2, #1
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	e11d      	b.n	80056b4 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547a:	613b      	str	r3, [r7, #16]
 800547c:	2300      	movs	r3, #0
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	6939      	ldr	r1, [r7, #16]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	000b      	movs	r3, r1
 8005486:	0e1b      	lsrs	r3, r3, #24
 8005488:	0010      	movs	r0, r2
 800548a:	0205      	lsls	r5, r0, #8
 800548c:	431d      	orrs	r5, r3
 800548e:	000b      	movs	r3, r1
 8005490:	021c      	lsls	r4, r3, #8
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	085b      	lsrs	r3, r3, #1
 8005498:	60bb      	str	r3, [r7, #8]
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	68b8      	ldr	r0, [r7, #8]
 80054a0:	68f9      	ldr	r1, [r7, #12]
 80054a2:	1900      	adds	r0, r0, r4
 80054a4:	4169      	adcs	r1, r5
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	2300      	movs	r3, #0
 80054ae:	607b      	str	r3, [r7, #4]
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f7fa ffcc 	bl	8000450 <__aeabi_uldivmod>
 80054b8:	0002      	movs	r2, r0
 80054ba:	000b      	movs	r3, r1
 80054bc:	0013      	movs	r3, r2
 80054be:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054c2:	23c0      	movs	r3, #192	@ 0xc0
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d309      	bcc.n	80054de <UART_SetConfig+0x302>
 80054ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054cc:	2380      	movs	r3, #128	@ 0x80
 80054ce:	035b      	lsls	r3, r3, #13
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d204      	bcs.n	80054de <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054da:	60da      	str	r2, [r3, #12]
 80054dc:	e0ea      	b.n	80056b4 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80054de:	231a      	movs	r3, #26
 80054e0:	2218      	movs	r2, #24
 80054e2:	189b      	adds	r3, r3, r2
 80054e4:	19db      	adds	r3, r3, r7
 80054e6:	2201      	movs	r2, #1
 80054e8:	701a      	strb	r2, [r3, #0]
 80054ea:	e0e3      	b.n	80056b4 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	69da      	ldr	r2, [r3, #28]
 80054f0:	2380      	movs	r3, #128	@ 0x80
 80054f2:	021b      	lsls	r3, r3, #8
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d000      	beq.n	80054fa <UART_SetConfig+0x31e>
 80054f8:	e085      	b.n	8005606 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80054fa:	231b      	movs	r3, #27
 80054fc:	2218      	movs	r2, #24
 80054fe:	189b      	adds	r3, r3, r2
 8005500:	19db      	adds	r3, r3, r7
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b08      	cmp	r3, #8
 8005506:	d837      	bhi.n	8005578 <UART_SetConfig+0x39c>
 8005508:	009a      	lsls	r2, r3, #2
 800550a:	4b10      	ldr	r3, [pc, #64]	@ (800554c <UART_SetConfig+0x370>)
 800550c:	18d3      	adds	r3, r2, r3
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005512:	f7ff f9c5 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 8005516:	0003      	movs	r3, r0
 8005518:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800551a:	e036      	b.n	800558a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800551c:	f7ff f9d6 	bl	80048cc <HAL_RCC_GetPCLK2Freq>
 8005520:	0003      	movs	r3, r0
 8005522:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005524:	e031      	b.n	800558a <UART_SetConfig+0x3ae>
 8005526:	46c0      	nop			@ (mov r8, r8)
 8005528:	efff69f3 	.word	0xefff69f3
 800552c:	ffffcfff 	.word	0xffffcfff
 8005530:	40004800 	.word	0x40004800
 8005534:	fffff4ff 	.word	0xfffff4ff
 8005538:	40013800 	.word	0x40013800
 800553c:	40021000 	.word	0x40021000
 8005540:	40004400 	.word	0x40004400
 8005544:	003d0900 	.word	0x003d0900
 8005548:	00f42400 	.word	0x00f42400
 800554c:	08006e54 	.word	0x08006e54
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005550:	4b60      	ldr	r3, [pc, #384]	@ (80056d4 <UART_SetConfig+0x4f8>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2210      	movs	r2, #16
 8005556:	4013      	ands	r3, r2
 8005558:	d002      	beq.n	8005560 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800555a:	4b5f      	ldr	r3, [pc, #380]	@ (80056d8 <UART_SetConfig+0x4fc>)
 800555c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800555e:	e014      	b.n	800558a <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8005560:	4b5e      	ldr	r3, [pc, #376]	@ (80056dc <UART_SetConfig+0x500>)
 8005562:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005564:	e011      	b.n	800558a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005566:	f7ff f90b 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 800556a:	0003      	movs	r3, r0
 800556c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800556e:	e00c      	b.n	800558a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005570:	2380      	movs	r3, #128	@ 0x80
 8005572:	021b      	lsls	r3, r3, #8
 8005574:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005576:	e008      	b.n	800558a <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800557c:	231a      	movs	r3, #26
 800557e:	2218      	movs	r2, #24
 8005580:	189b      	adds	r3, r3, r2
 8005582:	19db      	adds	r3, r3, r7
 8005584:	2201      	movs	r2, #1
 8005586:	701a      	strb	r2, [r3, #0]
        break;
 8005588:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800558a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558c:	2b00      	cmp	r3, #0
 800558e:	d100      	bne.n	8005592 <UART_SetConfig+0x3b6>
 8005590:	e090      	b.n	80056b4 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005594:	005a      	lsls	r2, r3, #1
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	085b      	lsrs	r3, r3, #1
 800559c:	18d2      	adds	r2, r2, r3
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	0019      	movs	r1, r3
 80055a4:	0010      	movs	r0, r2
 80055a6:	f7fa fdb9 	bl	800011c <__udivsi3>
 80055aa:	0003      	movs	r3, r0
 80055ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b0:	2b0f      	cmp	r3, #15
 80055b2:	d921      	bls.n	80055f8 <UART_SetConfig+0x41c>
 80055b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055b6:	2380      	movs	r3, #128	@ 0x80
 80055b8:	025b      	lsls	r3, r3, #9
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d21c      	bcs.n	80055f8 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	200e      	movs	r0, #14
 80055c4:	2418      	movs	r4, #24
 80055c6:	1903      	adds	r3, r0, r4
 80055c8:	19db      	adds	r3, r3, r7
 80055ca:	210f      	movs	r1, #15
 80055cc:	438a      	bics	r2, r1
 80055ce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d2:	085b      	lsrs	r3, r3, #1
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2207      	movs	r2, #7
 80055d8:	4013      	ands	r3, r2
 80055da:	b299      	uxth	r1, r3
 80055dc:	1903      	adds	r3, r0, r4
 80055de:	19db      	adds	r3, r3, r7
 80055e0:	1902      	adds	r2, r0, r4
 80055e2:	19d2      	adds	r2, r2, r7
 80055e4:	8812      	ldrh	r2, [r2, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	1902      	adds	r2, r0, r4
 80055f0:	19d2      	adds	r2, r2, r7
 80055f2:	8812      	ldrh	r2, [r2, #0]
 80055f4:	60da      	str	r2, [r3, #12]
 80055f6:	e05d      	b.n	80056b4 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80055f8:	231a      	movs	r3, #26
 80055fa:	2218      	movs	r2, #24
 80055fc:	189b      	adds	r3, r3, r2
 80055fe:	19db      	adds	r3, r3, r7
 8005600:	2201      	movs	r2, #1
 8005602:	701a      	strb	r2, [r3, #0]
 8005604:	e056      	b.n	80056b4 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005606:	231b      	movs	r3, #27
 8005608:	2218      	movs	r2, #24
 800560a:	189b      	adds	r3, r3, r2
 800560c:	19db      	adds	r3, r3, r7
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d822      	bhi.n	800565a <UART_SetConfig+0x47e>
 8005614:	009a      	lsls	r2, r3, #2
 8005616:	4b32      	ldr	r3, [pc, #200]	@ (80056e0 <UART_SetConfig+0x504>)
 8005618:	18d3      	adds	r3, r2, r3
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800561e:	f7ff f93f 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 8005622:	0003      	movs	r3, r0
 8005624:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005626:	e021      	b.n	800566c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005628:	f7ff f950 	bl	80048cc <HAL_RCC_GetPCLK2Freq>
 800562c:	0003      	movs	r3, r0
 800562e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005630:	e01c      	b.n	800566c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005632:	4b28      	ldr	r3, [pc, #160]	@ (80056d4 <UART_SetConfig+0x4f8>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2210      	movs	r2, #16
 8005638:	4013      	ands	r3, r2
 800563a:	d002      	beq.n	8005642 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800563c:	4b26      	ldr	r3, [pc, #152]	@ (80056d8 <UART_SetConfig+0x4fc>)
 800563e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005640:	e014      	b.n	800566c <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8005642:	4b26      	ldr	r3, [pc, #152]	@ (80056dc <UART_SetConfig+0x500>)
 8005644:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005646:	e011      	b.n	800566c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005648:	f7ff f89a 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 800564c:	0003      	movs	r3, r0
 800564e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005650:	e00c      	b.n	800566c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005652:	2380      	movs	r3, #128	@ 0x80
 8005654:	021b      	lsls	r3, r3, #8
 8005656:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005658:	e008      	b.n	800566c <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800565e:	231a      	movs	r3, #26
 8005660:	2218      	movs	r2, #24
 8005662:	189b      	adds	r3, r3, r2
 8005664:	19db      	adds	r3, r3, r7
 8005666:	2201      	movs	r2, #1
 8005668:	701a      	strb	r2, [r3, #0]
        break;
 800566a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800566c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800566e:	2b00      	cmp	r3, #0
 8005670:	d020      	beq.n	80056b4 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	085a      	lsrs	r2, r3, #1
 8005678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800567a:	18d2      	adds	r2, r2, r3
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	0019      	movs	r1, r3
 8005682:	0010      	movs	r0, r2
 8005684:	f7fa fd4a 	bl	800011c <__udivsi3>
 8005688:	0003      	movs	r3, r0
 800568a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800568c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568e:	2b0f      	cmp	r3, #15
 8005690:	d90a      	bls.n	80056a8 <UART_SetConfig+0x4cc>
 8005692:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005694:	2380      	movs	r3, #128	@ 0x80
 8005696:	025b      	lsls	r3, r3, #9
 8005698:	429a      	cmp	r2, r3
 800569a:	d205      	bcs.n	80056a8 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800569c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569e:	b29a      	uxth	r2, r3
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	60da      	str	r2, [r3, #12]
 80056a6:	e005      	b.n	80056b4 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80056a8:	231a      	movs	r3, #26
 80056aa:	2218      	movs	r2, #24
 80056ac:	189b      	adds	r3, r3, r2
 80056ae:	19db      	adds	r3, r3, r7
 80056b0:	2201      	movs	r2, #1
 80056b2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	2200      	movs	r2, #0
 80056b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	2200      	movs	r2, #0
 80056be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80056c0:	231a      	movs	r3, #26
 80056c2:	2218      	movs	r2, #24
 80056c4:	189b      	adds	r3, r3, r2
 80056c6:	19db      	adds	r3, r3, r7
 80056c8:	781b      	ldrb	r3, [r3, #0]
}
 80056ca:	0018      	movs	r0, r3
 80056cc:	46bd      	mov	sp, r7
 80056ce:	b00e      	add	sp, #56	@ 0x38
 80056d0:	bdb0      	pop	{r4, r5, r7, pc}
 80056d2:	46c0      	nop			@ (mov r8, r8)
 80056d4:	40021000 	.word	0x40021000
 80056d8:	003d0900 	.word	0x003d0900
 80056dc:	00f42400 	.word	0x00f42400
 80056e0:	08006e78 	.word	0x08006e78

080056e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f0:	2208      	movs	r2, #8
 80056f2:	4013      	ands	r3, r2
 80056f4:	d00b      	beq.n	800570e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	4a4a      	ldr	r2, [pc, #296]	@ (8005828 <UART_AdvFeatureConfig+0x144>)
 80056fe:	4013      	ands	r3, r2
 8005700:	0019      	movs	r1, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005712:	2201      	movs	r2, #1
 8005714:	4013      	ands	r3, r2
 8005716:	d00b      	beq.n	8005730 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	4a43      	ldr	r2, [pc, #268]	@ (800582c <UART_AdvFeatureConfig+0x148>)
 8005720:	4013      	ands	r3, r2
 8005722:	0019      	movs	r1, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005734:	2202      	movs	r2, #2
 8005736:	4013      	ands	r3, r2
 8005738:	d00b      	beq.n	8005752 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	4a3b      	ldr	r2, [pc, #236]	@ (8005830 <UART_AdvFeatureConfig+0x14c>)
 8005742:	4013      	ands	r3, r2
 8005744:	0019      	movs	r1, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005756:	2204      	movs	r2, #4
 8005758:	4013      	ands	r3, r2
 800575a:	d00b      	beq.n	8005774 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	4a34      	ldr	r2, [pc, #208]	@ (8005834 <UART_AdvFeatureConfig+0x150>)
 8005764:	4013      	ands	r3, r2
 8005766:	0019      	movs	r1, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005778:	2210      	movs	r2, #16
 800577a:	4013      	ands	r3, r2
 800577c:	d00b      	beq.n	8005796 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	4a2c      	ldr	r2, [pc, #176]	@ (8005838 <UART_AdvFeatureConfig+0x154>)
 8005786:	4013      	ands	r3, r2
 8005788:	0019      	movs	r1, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579a:	2220      	movs	r2, #32
 800579c:	4013      	ands	r3, r2
 800579e:	d00b      	beq.n	80057b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	4a25      	ldr	r2, [pc, #148]	@ (800583c <UART_AdvFeatureConfig+0x158>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	0019      	movs	r1, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057bc:	2240      	movs	r2, #64	@ 0x40
 80057be:	4013      	ands	r3, r2
 80057c0:	d01d      	beq.n	80057fe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005840 <UART_AdvFeatureConfig+0x15c>)
 80057ca:	4013      	ands	r3, r2
 80057cc:	0019      	movs	r1, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057de:	2380      	movs	r3, #128	@ 0x80
 80057e0:	035b      	lsls	r3, r3, #13
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d10b      	bne.n	80057fe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	4a15      	ldr	r2, [pc, #84]	@ (8005844 <UART_AdvFeatureConfig+0x160>)
 80057ee:	4013      	ands	r3, r2
 80057f0:	0019      	movs	r1, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005802:	2280      	movs	r2, #128	@ 0x80
 8005804:	4013      	ands	r3, r2
 8005806:	d00b      	beq.n	8005820 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	4a0e      	ldr	r2, [pc, #56]	@ (8005848 <UART_AdvFeatureConfig+0x164>)
 8005810:	4013      	ands	r3, r2
 8005812:	0019      	movs	r1, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	605a      	str	r2, [r3, #4]
  }
}
 8005820:	46c0      	nop			@ (mov r8, r8)
 8005822:	46bd      	mov	sp, r7
 8005824:	b002      	add	sp, #8
 8005826:	bd80      	pop	{r7, pc}
 8005828:	ffff7fff 	.word	0xffff7fff
 800582c:	fffdffff 	.word	0xfffdffff
 8005830:	fffeffff 	.word	0xfffeffff
 8005834:	fffbffff 	.word	0xfffbffff
 8005838:	ffffefff 	.word	0xffffefff
 800583c:	ffffdfff 	.word	0xffffdfff
 8005840:	ffefffff 	.word	0xffefffff
 8005844:	ff9fffff 	.word	0xff9fffff
 8005848:	fff7ffff 	.word	0xfff7ffff

0800584c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b092      	sub	sp, #72	@ 0x48
 8005850:	af02      	add	r7, sp, #8
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2284      	movs	r2, #132	@ 0x84
 8005858:	2100      	movs	r1, #0
 800585a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800585c:	f7fc fdd4 	bl	8002408 <HAL_GetTick>
 8005860:	0003      	movs	r3, r0
 8005862:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2208      	movs	r2, #8
 800586c:	4013      	ands	r3, r2
 800586e:	2b08      	cmp	r3, #8
 8005870:	d12c      	bne.n	80058cc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005874:	2280      	movs	r2, #128	@ 0x80
 8005876:	0391      	lsls	r1, r2, #14
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	4a46      	ldr	r2, [pc, #280]	@ (8005994 <UART_CheckIdleState+0x148>)
 800587c:	9200      	str	r2, [sp, #0]
 800587e:	2200      	movs	r2, #0
 8005880:	f000 f88c 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 8005884:	1e03      	subs	r3, r0, #0
 8005886:	d021      	beq.n	80058cc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005888:	f3ef 8310 	mrs	r3, PRIMASK
 800588c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800588e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005890:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005892:	2301      	movs	r3, #1
 8005894:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005898:	f383 8810 	msr	PRIMASK, r3
}
 800589c:	46c0      	nop			@ (mov r8, r8)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2180      	movs	r1, #128	@ 0x80
 80058aa:	438a      	bics	r2, r1
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b4:	f383 8810 	msr	PRIMASK, r3
}
 80058b8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2278      	movs	r2, #120	@ 0x78
 80058c4:	2100      	movs	r1, #0
 80058c6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e05f      	b.n	800598c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2204      	movs	r2, #4
 80058d4:	4013      	ands	r3, r2
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d146      	bne.n	8005968 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058dc:	2280      	movs	r2, #128	@ 0x80
 80058de:	03d1      	lsls	r1, r2, #15
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	4a2c      	ldr	r2, [pc, #176]	@ (8005994 <UART_CheckIdleState+0x148>)
 80058e4:	9200      	str	r2, [sp, #0]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f000 f858 	bl	800599c <UART_WaitOnFlagUntilTimeout>
 80058ec:	1e03      	subs	r3, r0, #0
 80058ee:	d03b      	beq.n	8005968 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058f0:	f3ef 8310 	mrs	r3, PRIMASK
 80058f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80058f6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80058fa:	2301      	movs	r3, #1
 80058fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f383 8810 	msr	PRIMASK, r3
}
 8005904:	46c0      	nop			@ (mov r8, r8)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4921      	ldr	r1, [pc, #132]	@ (8005998 <UART_CheckIdleState+0x14c>)
 8005912:	400a      	ands	r2, r1
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005918:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f383 8810 	msr	PRIMASK, r3
}
 8005920:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005922:	f3ef 8310 	mrs	r3, PRIMASK
 8005926:	61bb      	str	r3, [r7, #24]
  return(result);
 8005928:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800592a:	633b      	str	r3, [r7, #48]	@ 0x30
 800592c:	2301      	movs	r3, #1
 800592e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	f383 8810 	msr	PRIMASK, r3
}
 8005936:	46c0      	nop			@ (mov r8, r8)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2101      	movs	r1, #1
 8005944:	438a      	bics	r2, r1
 8005946:	609a      	str	r2, [r3, #8]
 8005948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	f383 8810 	msr	PRIMASK, r3
}
 8005952:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2280      	movs	r2, #128	@ 0x80
 8005958:	2120      	movs	r1, #32
 800595a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2278      	movs	r2, #120	@ 0x78
 8005960:	2100      	movs	r1, #0
 8005962:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e011      	b.n	800598c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2220      	movs	r2, #32
 800596c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2280      	movs	r2, #128	@ 0x80
 8005972:	2120      	movs	r1, #32
 8005974:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2278      	movs	r2, #120	@ 0x78
 8005986:	2100      	movs	r1, #0
 8005988:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	0018      	movs	r0, r3
 800598e:	46bd      	mov	sp, r7
 8005990:	b010      	add	sp, #64	@ 0x40
 8005992:	bd80      	pop	{r7, pc}
 8005994:	01ffffff 	.word	0x01ffffff
 8005998:	fffffedf 	.word	0xfffffedf

0800599c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	1dfb      	adds	r3, r7, #7
 80059aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ac:	e051      	b.n	8005a52 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	3301      	adds	r3, #1
 80059b2:	d04e      	beq.n	8005a52 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b4:	f7fc fd28 	bl	8002408 <HAL_GetTick>
 80059b8:	0002      	movs	r2, r0
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d302      	bcc.n	80059ca <UART_WaitOnFlagUntilTimeout+0x2e>
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e051      	b.n	8005a72 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2204      	movs	r2, #4
 80059d6:	4013      	ands	r3, r2
 80059d8:	d03b      	beq.n	8005a52 <UART_WaitOnFlagUntilTimeout+0xb6>
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2b80      	cmp	r3, #128	@ 0x80
 80059de:	d038      	beq.n	8005a52 <UART_WaitOnFlagUntilTimeout+0xb6>
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2b40      	cmp	r3, #64	@ 0x40
 80059e4:	d035      	beq.n	8005a52 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	2208      	movs	r2, #8
 80059ee:	4013      	ands	r3, r2
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d111      	bne.n	8005a18 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2208      	movs	r2, #8
 80059fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	0018      	movs	r0, r3
 8005a00:	f000 f83c 	bl	8005a7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2284      	movs	r2, #132	@ 0x84
 8005a08:	2108      	movs	r1, #8
 8005a0a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2278      	movs	r2, #120	@ 0x78
 8005a10:	2100      	movs	r1, #0
 8005a12:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e02c      	b.n	8005a72 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69da      	ldr	r2, [r3, #28]
 8005a1e:	2380      	movs	r3, #128	@ 0x80
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	401a      	ands	r2, r3
 8005a24:	2380      	movs	r3, #128	@ 0x80
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d112      	bne.n	8005a52 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2280      	movs	r2, #128	@ 0x80
 8005a32:	0112      	lsls	r2, r2, #4
 8005a34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f000 f81f 	bl	8005a7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2284      	movs	r2, #132	@ 0x84
 8005a42:	2120      	movs	r1, #32
 8005a44:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2278      	movs	r2, #120	@ 0x78
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e00f      	b.n	8005a72 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	425a      	negs	r2, r3
 8005a62:	4153      	adcs	r3, r2
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	001a      	movs	r2, r3
 8005a68:	1dfb      	adds	r3, r7, #7
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d09e      	beq.n	80059ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	0018      	movs	r0, r3
 8005a74:	46bd      	mov	sp, r7
 8005a76:	b004      	add	sp, #16
 8005a78:	bd80      	pop	{r7, pc}
	...

08005a7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08e      	sub	sp, #56	@ 0x38
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a84:	f3ef 8310 	mrs	r3, PRIMASK
 8005a88:	617b      	str	r3, [r7, #20]
  return(result);
 8005a8a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a8e:	2301      	movs	r3, #1
 8005a90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	f383 8810 	msr	PRIMASK, r3
}
 8005a98:	46c0      	nop			@ (mov r8, r8)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4926      	ldr	r1, [pc, #152]	@ (8005b40 <UART_EndRxTransfer+0xc4>)
 8005aa6:	400a      	ands	r2, r1
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	f383 8810 	msr	PRIMASK, r3
}
 8005ab4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8005aba:	623b      	str	r3, [r7, #32]
  return(result);
 8005abc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005abe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac6:	f383 8810 	msr	PRIMASK, r3
}
 8005aca:	46c0      	nop			@ (mov r8, r8)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	438a      	bics	r2, r1
 8005ada:	609a      	str	r2, [r3, #8]
 8005adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae2:	f383 8810 	msr	PRIMASK, r3
}
 8005ae6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d118      	bne.n	8005b22 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af0:	f3ef 8310 	mrs	r3, PRIMASK
 8005af4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005af6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005afa:	2301      	movs	r3, #1
 8005afc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f383 8810 	msr	PRIMASK, r3
}
 8005b04:	46c0      	nop			@ (mov r8, r8)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2110      	movs	r1, #16
 8005b12:	438a      	bics	r2, r1
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f383 8810 	msr	PRIMASK, r3
}
 8005b20:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2280      	movs	r2, #128	@ 0x80
 8005b26:	2120      	movs	r1, #32
 8005b28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b36:	46c0      	nop			@ (mov r8, r8)
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	b00e      	add	sp, #56	@ 0x38
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	46c0      	nop			@ (mov r8, r8)
 8005b40:	fffffedf 	.word	0xfffffedf

08005b44 <siprintf>:
 8005b44:	b40e      	push	{r1, r2, r3}
 8005b46:	b510      	push	{r4, lr}
 8005b48:	2400      	movs	r4, #0
 8005b4a:	490c      	ldr	r1, [pc, #48]	@ (8005b7c <siprintf+0x38>)
 8005b4c:	b09d      	sub	sp, #116	@ 0x74
 8005b4e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005b50:	9002      	str	r0, [sp, #8]
 8005b52:	9006      	str	r0, [sp, #24]
 8005b54:	9107      	str	r1, [sp, #28]
 8005b56:	9104      	str	r1, [sp, #16]
 8005b58:	4809      	ldr	r0, [pc, #36]	@ (8005b80 <siprintf+0x3c>)
 8005b5a:	490a      	ldr	r1, [pc, #40]	@ (8005b84 <siprintf+0x40>)
 8005b5c:	cb04      	ldmia	r3!, {r2}
 8005b5e:	9105      	str	r1, [sp, #20]
 8005b60:	6800      	ldr	r0, [r0, #0]
 8005b62:	a902      	add	r1, sp, #8
 8005b64:	9301      	str	r3, [sp, #4]
 8005b66:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005b68:	f000 f9ba 	bl	8005ee0 <_svfiprintf_r>
 8005b6c:	9b02      	ldr	r3, [sp, #8]
 8005b6e:	701c      	strb	r4, [r3, #0]
 8005b70:	b01d      	add	sp, #116	@ 0x74
 8005b72:	bc10      	pop	{r4}
 8005b74:	bc08      	pop	{r3}
 8005b76:	b003      	add	sp, #12
 8005b78:	4718      	bx	r3
 8005b7a:	46c0      	nop			@ (mov r8, r8)
 8005b7c:	7fffffff 	.word	0x7fffffff
 8005b80:	20000018 	.word	0x20000018
 8005b84:	ffff0208 	.word	0xffff0208

08005b88 <memmove>:
 8005b88:	b510      	push	{r4, lr}
 8005b8a:	4288      	cmp	r0, r1
 8005b8c:	d902      	bls.n	8005b94 <memmove+0xc>
 8005b8e:	188b      	adds	r3, r1, r2
 8005b90:	4298      	cmp	r0, r3
 8005b92:	d308      	bcc.n	8005ba6 <memmove+0x1e>
 8005b94:	2300      	movs	r3, #0
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d007      	beq.n	8005baa <memmove+0x22>
 8005b9a:	5ccc      	ldrb	r4, [r1, r3]
 8005b9c:	54c4      	strb	r4, [r0, r3]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	e7f9      	b.n	8005b96 <memmove+0xe>
 8005ba2:	5c8b      	ldrb	r3, [r1, r2]
 8005ba4:	5483      	strb	r3, [r0, r2]
 8005ba6:	3a01      	subs	r2, #1
 8005ba8:	d2fb      	bcs.n	8005ba2 <memmove+0x1a>
 8005baa:	bd10      	pop	{r4, pc}

08005bac <memset>:
 8005bac:	0003      	movs	r3, r0
 8005bae:	1882      	adds	r2, r0, r2
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d100      	bne.n	8005bb6 <memset+0xa>
 8005bb4:	4770      	bx	lr
 8005bb6:	7019      	strb	r1, [r3, #0]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	e7f9      	b.n	8005bb0 <memset+0x4>

08005bbc <__errno>:
 8005bbc:	4b01      	ldr	r3, [pc, #4]	@ (8005bc4 <__errno+0x8>)
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	4770      	bx	lr
 8005bc2:	46c0      	nop			@ (mov r8, r8)
 8005bc4:	20000018 	.word	0x20000018

08005bc8 <__libc_init_array>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	2600      	movs	r6, #0
 8005bcc:	4c0c      	ldr	r4, [pc, #48]	@ (8005c00 <__libc_init_array+0x38>)
 8005bce:	4d0d      	ldr	r5, [pc, #52]	@ (8005c04 <__libc_init_array+0x3c>)
 8005bd0:	1b64      	subs	r4, r4, r5
 8005bd2:	10a4      	asrs	r4, r4, #2
 8005bd4:	42a6      	cmp	r6, r4
 8005bd6:	d109      	bne.n	8005bec <__libc_init_array+0x24>
 8005bd8:	2600      	movs	r6, #0
 8005bda:	f000 fc51 	bl	8006480 <_init>
 8005bde:	4c0a      	ldr	r4, [pc, #40]	@ (8005c08 <__libc_init_array+0x40>)
 8005be0:	4d0a      	ldr	r5, [pc, #40]	@ (8005c0c <__libc_init_array+0x44>)
 8005be2:	1b64      	subs	r4, r4, r5
 8005be4:	10a4      	asrs	r4, r4, #2
 8005be6:	42a6      	cmp	r6, r4
 8005be8:	d105      	bne.n	8005bf6 <__libc_init_array+0x2e>
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
 8005bec:	00b3      	lsls	r3, r6, #2
 8005bee:	58eb      	ldr	r3, [r5, r3]
 8005bf0:	4798      	blx	r3
 8005bf2:	3601      	adds	r6, #1
 8005bf4:	e7ee      	b.n	8005bd4 <__libc_init_array+0xc>
 8005bf6:	00b3      	lsls	r3, r6, #2
 8005bf8:	58eb      	ldr	r3, [r5, r3]
 8005bfa:	4798      	blx	r3
 8005bfc:	3601      	adds	r6, #1
 8005bfe:	e7f2      	b.n	8005be6 <__libc_init_array+0x1e>
 8005c00:	08006ed8 	.word	0x08006ed8
 8005c04:	08006ed8 	.word	0x08006ed8
 8005c08:	08006edc 	.word	0x08006edc
 8005c0c:	08006ed8 	.word	0x08006ed8

08005c10 <__retarget_lock_acquire_recursive>:
 8005c10:	4770      	bx	lr

08005c12 <__retarget_lock_release_recursive>:
 8005c12:	4770      	bx	lr

08005c14 <memcpy>:
 8005c14:	2300      	movs	r3, #0
 8005c16:	b510      	push	{r4, lr}
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d100      	bne.n	8005c1e <memcpy+0xa>
 8005c1c:	bd10      	pop	{r4, pc}
 8005c1e:	5ccc      	ldrb	r4, [r1, r3]
 8005c20:	54c4      	strb	r4, [r0, r3]
 8005c22:	3301      	adds	r3, #1
 8005c24:	e7f8      	b.n	8005c18 <memcpy+0x4>
	...

08005c28 <_free_r>:
 8005c28:	b570      	push	{r4, r5, r6, lr}
 8005c2a:	0005      	movs	r5, r0
 8005c2c:	1e0c      	subs	r4, r1, #0
 8005c2e:	d010      	beq.n	8005c52 <_free_r+0x2a>
 8005c30:	3c04      	subs	r4, #4
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	da00      	bge.n	8005c3a <_free_r+0x12>
 8005c38:	18e4      	adds	r4, r4, r3
 8005c3a:	0028      	movs	r0, r5
 8005c3c:	f000 f8e0 	bl	8005e00 <__malloc_lock>
 8005c40:	4a1d      	ldr	r2, [pc, #116]	@ (8005cb8 <_free_r+0x90>)
 8005c42:	6813      	ldr	r3, [r2, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d105      	bne.n	8005c54 <_free_r+0x2c>
 8005c48:	6063      	str	r3, [r4, #4]
 8005c4a:	6014      	str	r4, [r2, #0]
 8005c4c:	0028      	movs	r0, r5
 8005c4e:	f000 f8df 	bl	8005e10 <__malloc_unlock>
 8005c52:	bd70      	pop	{r4, r5, r6, pc}
 8005c54:	42a3      	cmp	r3, r4
 8005c56:	d908      	bls.n	8005c6a <_free_r+0x42>
 8005c58:	6820      	ldr	r0, [r4, #0]
 8005c5a:	1821      	adds	r1, r4, r0
 8005c5c:	428b      	cmp	r3, r1
 8005c5e:	d1f3      	bne.n	8005c48 <_free_r+0x20>
 8005c60:	6819      	ldr	r1, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	1809      	adds	r1, r1, r0
 8005c66:	6021      	str	r1, [r4, #0]
 8005c68:	e7ee      	b.n	8005c48 <_free_r+0x20>
 8005c6a:	001a      	movs	r2, r3
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <_free_r+0x4e>
 8005c72:	42a3      	cmp	r3, r4
 8005c74:	d9f9      	bls.n	8005c6a <_free_r+0x42>
 8005c76:	6811      	ldr	r1, [r2, #0]
 8005c78:	1850      	adds	r0, r2, r1
 8005c7a:	42a0      	cmp	r0, r4
 8005c7c:	d10b      	bne.n	8005c96 <_free_r+0x6e>
 8005c7e:	6820      	ldr	r0, [r4, #0]
 8005c80:	1809      	adds	r1, r1, r0
 8005c82:	1850      	adds	r0, r2, r1
 8005c84:	6011      	str	r1, [r2, #0]
 8005c86:	4283      	cmp	r3, r0
 8005c88:	d1e0      	bne.n	8005c4c <_free_r+0x24>
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	1841      	adds	r1, r0, r1
 8005c90:	6011      	str	r1, [r2, #0]
 8005c92:	6053      	str	r3, [r2, #4]
 8005c94:	e7da      	b.n	8005c4c <_free_r+0x24>
 8005c96:	42a0      	cmp	r0, r4
 8005c98:	d902      	bls.n	8005ca0 <_free_r+0x78>
 8005c9a:	230c      	movs	r3, #12
 8005c9c:	602b      	str	r3, [r5, #0]
 8005c9e:	e7d5      	b.n	8005c4c <_free_r+0x24>
 8005ca0:	6820      	ldr	r0, [r4, #0]
 8005ca2:	1821      	adds	r1, r4, r0
 8005ca4:	428b      	cmp	r3, r1
 8005ca6:	d103      	bne.n	8005cb0 <_free_r+0x88>
 8005ca8:	6819      	ldr	r1, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	1809      	adds	r1, r1, r0
 8005cae:	6021      	str	r1, [r4, #0]
 8005cb0:	6063      	str	r3, [r4, #4]
 8005cb2:	6054      	str	r4, [r2, #4]
 8005cb4:	e7ca      	b.n	8005c4c <_free_r+0x24>
 8005cb6:	46c0      	nop			@ (mov r8, r8)
 8005cb8:	20000610 	.word	0x20000610

08005cbc <sbrk_aligned>:
 8005cbc:	b570      	push	{r4, r5, r6, lr}
 8005cbe:	4e0f      	ldr	r6, [pc, #60]	@ (8005cfc <sbrk_aligned+0x40>)
 8005cc0:	000d      	movs	r5, r1
 8005cc2:	6831      	ldr	r1, [r6, #0]
 8005cc4:	0004      	movs	r4, r0
 8005cc6:	2900      	cmp	r1, #0
 8005cc8:	d102      	bne.n	8005cd0 <sbrk_aligned+0x14>
 8005cca:	f000 fb83 	bl	80063d4 <_sbrk_r>
 8005cce:	6030      	str	r0, [r6, #0]
 8005cd0:	0029      	movs	r1, r5
 8005cd2:	0020      	movs	r0, r4
 8005cd4:	f000 fb7e 	bl	80063d4 <_sbrk_r>
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	d103      	bne.n	8005ce4 <sbrk_aligned+0x28>
 8005cdc:	2501      	movs	r5, #1
 8005cde:	426d      	negs	r5, r5
 8005ce0:	0028      	movs	r0, r5
 8005ce2:	bd70      	pop	{r4, r5, r6, pc}
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	1cc5      	adds	r5, r0, #3
 8005ce8:	439d      	bics	r5, r3
 8005cea:	42a8      	cmp	r0, r5
 8005cec:	d0f8      	beq.n	8005ce0 <sbrk_aligned+0x24>
 8005cee:	1a29      	subs	r1, r5, r0
 8005cf0:	0020      	movs	r0, r4
 8005cf2:	f000 fb6f 	bl	80063d4 <_sbrk_r>
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	d1f2      	bne.n	8005ce0 <sbrk_aligned+0x24>
 8005cfa:	e7ef      	b.n	8005cdc <sbrk_aligned+0x20>
 8005cfc:	2000060c 	.word	0x2000060c

08005d00 <_malloc_r>:
 8005d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d02:	2203      	movs	r2, #3
 8005d04:	1ccb      	adds	r3, r1, #3
 8005d06:	4393      	bics	r3, r2
 8005d08:	3308      	adds	r3, #8
 8005d0a:	0005      	movs	r5, r0
 8005d0c:	001f      	movs	r7, r3
 8005d0e:	2b0c      	cmp	r3, #12
 8005d10:	d234      	bcs.n	8005d7c <_malloc_r+0x7c>
 8005d12:	270c      	movs	r7, #12
 8005d14:	42b9      	cmp	r1, r7
 8005d16:	d833      	bhi.n	8005d80 <_malloc_r+0x80>
 8005d18:	0028      	movs	r0, r5
 8005d1a:	f000 f871 	bl	8005e00 <__malloc_lock>
 8005d1e:	4e37      	ldr	r6, [pc, #220]	@ (8005dfc <_malloc_r+0xfc>)
 8005d20:	6833      	ldr	r3, [r6, #0]
 8005d22:	001c      	movs	r4, r3
 8005d24:	2c00      	cmp	r4, #0
 8005d26:	d12f      	bne.n	8005d88 <_malloc_r+0x88>
 8005d28:	0039      	movs	r1, r7
 8005d2a:	0028      	movs	r0, r5
 8005d2c:	f7ff ffc6 	bl	8005cbc <sbrk_aligned>
 8005d30:	0004      	movs	r4, r0
 8005d32:	1c43      	adds	r3, r0, #1
 8005d34:	d15f      	bne.n	8005df6 <_malloc_r+0xf6>
 8005d36:	6834      	ldr	r4, [r6, #0]
 8005d38:	9400      	str	r4, [sp, #0]
 8005d3a:	9b00      	ldr	r3, [sp, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d14a      	bne.n	8005dd6 <_malloc_r+0xd6>
 8005d40:	2c00      	cmp	r4, #0
 8005d42:	d052      	beq.n	8005dea <_malloc_r+0xea>
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	0028      	movs	r0, r5
 8005d48:	18e3      	adds	r3, r4, r3
 8005d4a:	9900      	ldr	r1, [sp, #0]
 8005d4c:	9301      	str	r3, [sp, #4]
 8005d4e:	f000 fb41 	bl	80063d4 <_sbrk_r>
 8005d52:	9b01      	ldr	r3, [sp, #4]
 8005d54:	4283      	cmp	r3, r0
 8005d56:	d148      	bne.n	8005dea <_malloc_r+0xea>
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	0028      	movs	r0, r5
 8005d5c:	1aff      	subs	r7, r7, r3
 8005d5e:	0039      	movs	r1, r7
 8005d60:	f7ff ffac 	bl	8005cbc <sbrk_aligned>
 8005d64:	3001      	adds	r0, #1
 8005d66:	d040      	beq.n	8005dea <_malloc_r+0xea>
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	19db      	adds	r3, r3, r7
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	6833      	ldr	r3, [r6, #0]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	2a00      	cmp	r2, #0
 8005d74:	d133      	bne.n	8005dde <_malloc_r+0xde>
 8005d76:	9b00      	ldr	r3, [sp, #0]
 8005d78:	6033      	str	r3, [r6, #0]
 8005d7a:	e019      	b.n	8005db0 <_malloc_r+0xb0>
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	dac9      	bge.n	8005d14 <_malloc_r+0x14>
 8005d80:	230c      	movs	r3, #12
 8005d82:	602b      	str	r3, [r5, #0]
 8005d84:	2000      	movs	r0, #0
 8005d86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d88:	6821      	ldr	r1, [r4, #0]
 8005d8a:	1bc9      	subs	r1, r1, r7
 8005d8c:	d420      	bmi.n	8005dd0 <_malloc_r+0xd0>
 8005d8e:	290b      	cmp	r1, #11
 8005d90:	d90a      	bls.n	8005da8 <_malloc_r+0xa8>
 8005d92:	19e2      	adds	r2, r4, r7
 8005d94:	6027      	str	r7, [r4, #0]
 8005d96:	42a3      	cmp	r3, r4
 8005d98:	d104      	bne.n	8005da4 <_malloc_r+0xa4>
 8005d9a:	6032      	str	r2, [r6, #0]
 8005d9c:	6863      	ldr	r3, [r4, #4]
 8005d9e:	6011      	str	r1, [r2, #0]
 8005da0:	6053      	str	r3, [r2, #4]
 8005da2:	e005      	b.n	8005db0 <_malloc_r+0xb0>
 8005da4:	605a      	str	r2, [r3, #4]
 8005da6:	e7f9      	b.n	8005d9c <_malloc_r+0x9c>
 8005da8:	6862      	ldr	r2, [r4, #4]
 8005daa:	42a3      	cmp	r3, r4
 8005dac:	d10e      	bne.n	8005dcc <_malloc_r+0xcc>
 8005dae:	6032      	str	r2, [r6, #0]
 8005db0:	0028      	movs	r0, r5
 8005db2:	f000 f82d 	bl	8005e10 <__malloc_unlock>
 8005db6:	0020      	movs	r0, r4
 8005db8:	2207      	movs	r2, #7
 8005dba:	300b      	adds	r0, #11
 8005dbc:	1d23      	adds	r3, r4, #4
 8005dbe:	4390      	bics	r0, r2
 8005dc0:	1ac2      	subs	r2, r0, r3
 8005dc2:	4298      	cmp	r0, r3
 8005dc4:	d0df      	beq.n	8005d86 <_malloc_r+0x86>
 8005dc6:	1a1b      	subs	r3, r3, r0
 8005dc8:	50a3      	str	r3, [r4, r2]
 8005dca:	e7dc      	b.n	8005d86 <_malloc_r+0x86>
 8005dcc:	605a      	str	r2, [r3, #4]
 8005dce:	e7ef      	b.n	8005db0 <_malloc_r+0xb0>
 8005dd0:	0023      	movs	r3, r4
 8005dd2:	6864      	ldr	r4, [r4, #4]
 8005dd4:	e7a6      	b.n	8005d24 <_malloc_r+0x24>
 8005dd6:	9c00      	ldr	r4, [sp, #0]
 8005dd8:	6863      	ldr	r3, [r4, #4]
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	e7ad      	b.n	8005d3a <_malloc_r+0x3a>
 8005dde:	001a      	movs	r2, r3
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	42a3      	cmp	r3, r4
 8005de4:	d1fb      	bne.n	8005dde <_malloc_r+0xde>
 8005de6:	2300      	movs	r3, #0
 8005de8:	e7da      	b.n	8005da0 <_malloc_r+0xa0>
 8005dea:	230c      	movs	r3, #12
 8005dec:	0028      	movs	r0, r5
 8005dee:	602b      	str	r3, [r5, #0]
 8005df0:	f000 f80e 	bl	8005e10 <__malloc_unlock>
 8005df4:	e7c6      	b.n	8005d84 <_malloc_r+0x84>
 8005df6:	6007      	str	r7, [r0, #0]
 8005df8:	e7da      	b.n	8005db0 <_malloc_r+0xb0>
 8005dfa:	46c0      	nop			@ (mov r8, r8)
 8005dfc:	20000610 	.word	0x20000610

08005e00 <__malloc_lock>:
 8005e00:	b510      	push	{r4, lr}
 8005e02:	4802      	ldr	r0, [pc, #8]	@ (8005e0c <__malloc_lock+0xc>)
 8005e04:	f7ff ff04 	bl	8005c10 <__retarget_lock_acquire_recursive>
 8005e08:	bd10      	pop	{r4, pc}
 8005e0a:	46c0      	nop			@ (mov r8, r8)
 8005e0c:	20000608 	.word	0x20000608

08005e10 <__malloc_unlock>:
 8005e10:	b510      	push	{r4, lr}
 8005e12:	4802      	ldr	r0, [pc, #8]	@ (8005e1c <__malloc_unlock+0xc>)
 8005e14:	f7ff fefd 	bl	8005c12 <__retarget_lock_release_recursive>
 8005e18:	bd10      	pop	{r4, pc}
 8005e1a:	46c0      	nop			@ (mov r8, r8)
 8005e1c:	20000608 	.word	0x20000608

08005e20 <__ssputs_r>:
 8005e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e22:	688e      	ldr	r6, [r1, #8]
 8005e24:	b085      	sub	sp, #20
 8005e26:	001f      	movs	r7, r3
 8005e28:	000c      	movs	r4, r1
 8005e2a:	680b      	ldr	r3, [r1, #0]
 8005e2c:	9002      	str	r0, [sp, #8]
 8005e2e:	9203      	str	r2, [sp, #12]
 8005e30:	42be      	cmp	r6, r7
 8005e32:	d830      	bhi.n	8005e96 <__ssputs_r+0x76>
 8005e34:	210c      	movs	r1, #12
 8005e36:	5e62      	ldrsh	r2, [r4, r1]
 8005e38:	2190      	movs	r1, #144	@ 0x90
 8005e3a:	00c9      	lsls	r1, r1, #3
 8005e3c:	420a      	tst	r2, r1
 8005e3e:	d028      	beq.n	8005e92 <__ssputs_r+0x72>
 8005e40:	2003      	movs	r0, #3
 8005e42:	6921      	ldr	r1, [r4, #16]
 8005e44:	1a5b      	subs	r3, r3, r1
 8005e46:	9301      	str	r3, [sp, #4]
 8005e48:	6963      	ldr	r3, [r4, #20]
 8005e4a:	4343      	muls	r3, r0
 8005e4c:	9801      	ldr	r0, [sp, #4]
 8005e4e:	0fdd      	lsrs	r5, r3, #31
 8005e50:	18ed      	adds	r5, r5, r3
 8005e52:	1c7b      	adds	r3, r7, #1
 8005e54:	181b      	adds	r3, r3, r0
 8005e56:	106d      	asrs	r5, r5, #1
 8005e58:	42ab      	cmp	r3, r5
 8005e5a:	d900      	bls.n	8005e5e <__ssputs_r+0x3e>
 8005e5c:	001d      	movs	r5, r3
 8005e5e:	0552      	lsls	r2, r2, #21
 8005e60:	d528      	bpl.n	8005eb4 <__ssputs_r+0x94>
 8005e62:	0029      	movs	r1, r5
 8005e64:	9802      	ldr	r0, [sp, #8]
 8005e66:	f7ff ff4b 	bl	8005d00 <_malloc_r>
 8005e6a:	1e06      	subs	r6, r0, #0
 8005e6c:	d02c      	beq.n	8005ec8 <__ssputs_r+0xa8>
 8005e6e:	9a01      	ldr	r2, [sp, #4]
 8005e70:	6921      	ldr	r1, [r4, #16]
 8005e72:	f7ff fecf 	bl	8005c14 <memcpy>
 8005e76:	89a2      	ldrh	r2, [r4, #12]
 8005e78:	4b18      	ldr	r3, [pc, #96]	@ (8005edc <__ssputs_r+0xbc>)
 8005e7a:	401a      	ands	r2, r3
 8005e7c:	2380      	movs	r3, #128	@ 0x80
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	81a3      	strh	r3, [r4, #12]
 8005e82:	9b01      	ldr	r3, [sp, #4]
 8005e84:	6126      	str	r6, [r4, #16]
 8005e86:	18f6      	adds	r6, r6, r3
 8005e88:	6026      	str	r6, [r4, #0]
 8005e8a:	003e      	movs	r6, r7
 8005e8c:	6165      	str	r5, [r4, #20]
 8005e8e:	1aed      	subs	r5, r5, r3
 8005e90:	60a5      	str	r5, [r4, #8]
 8005e92:	42be      	cmp	r6, r7
 8005e94:	d900      	bls.n	8005e98 <__ssputs_r+0x78>
 8005e96:	003e      	movs	r6, r7
 8005e98:	0032      	movs	r2, r6
 8005e9a:	9903      	ldr	r1, [sp, #12]
 8005e9c:	6820      	ldr	r0, [r4, #0]
 8005e9e:	f7ff fe73 	bl	8005b88 <memmove>
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	68a3      	ldr	r3, [r4, #8]
 8005ea6:	1b9b      	subs	r3, r3, r6
 8005ea8:	60a3      	str	r3, [r4, #8]
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	199b      	adds	r3, r3, r6
 8005eae:	6023      	str	r3, [r4, #0]
 8005eb0:	b005      	add	sp, #20
 8005eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eb4:	002a      	movs	r2, r5
 8005eb6:	9802      	ldr	r0, [sp, #8]
 8005eb8:	f000 faa9 	bl	800640e <_realloc_r>
 8005ebc:	1e06      	subs	r6, r0, #0
 8005ebe:	d1e0      	bne.n	8005e82 <__ssputs_r+0x62>
 8005ec0:	6921      	ldr	r1, [r4, #16]
 8005ec2:	9802      	ldr	r0, [sp, #8]
 8005ec4:	f7ff feb0 	bl	8005c28 <_free_r>
 8005ec8:	230c      	movs	r3, #12
 8005eca:	2001      	movs	r0, #1
 8005ecc:	9a02      	ldr	r2, [sp, #8]
 8005ece:	4240      	negs	r0, r0
 8005ed0:	6013      	str	r3, [r2, #0]
 8005ed2:	89a2      	ldrh	r2, [r4, #12]
 8005ed4:	3334      	adds	r3, #52	@ 0x34
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	81a3      	strh	r3, [r4, #12]
 8005eda:	e7e9      	b.n	8005eb0 <__ssputs_r+0x90>
 8005edc:	fffffb7f 	.word	0xfffffb7f

08005ee0 <_svfiprintf_r>:
 8005ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ee2:	b0a1      	sub	sp, #132	@ 0x84
 8005ee4:	9003      	str	r0, [sp, #12]
 8005ee6:	001d      	movs	r5, r3
 8005ee8:	898b      	ldrh	r3, [r1, #12]
 8005eea:	000f      	movs	r7, r1
 8005eec:	0016      	movs	r6, r2
 8005eee:	061b      	lsls	r3, r3, #24
 8005ef0:	d511      	bpl.n	8005f16 <_svfiprintf_r+0x36>
 8005ef2:	690b      	ldr	r3, [r1, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10e      	bne.n	8005f16 <_svfiprintf_r+0x36>
 8005ef8:	2140      	movs	r1, #64	@ 0x40
 8005efa:	f7ff ff01 	bl	8005d00 <_malloc_r>
 8005efe:	6038      	str	r0, [r7, #0]
 8005f00:	6138      	str	r0, [r7, #16]
 8005f02:	2800      	cmp	r0, #0
 8005f04:	d105      	bne.n	8005f12 <_svfiprintf_r+0x32>
 8005f06:	230c      	movs	r3, #12
 8005f08:	9a03      	ldr	r2, [sp, #12]
 8005f0a:	6013      	str	r3, [r2, #0]
 8005f0c:	2001      	movs	r0, #1
 8005f0e:	4240      	negs	r0, r0
 8005f10:	e0cf      	b.n	80060b2 <_svfiprintf_r+0x1d2>
 8005f12:	2340      	movs	r3, #64	@ 0x40
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	2300      	movs	r3, #0
 8005f18:	ac08      	add	r4, sp, #32
 8005f1a:	6163      	str	r3, [r4, #20]
 8005f1c:	3320      	adds	r3, #32
 8005f1e:	7663      	strb	r3, [r4, #25]
 8005f20:	3310      	adds	r3, #16
 8005f22:	76a3      	strb	r3, [r4, #26]
 8005f24:	9507      	str	r5, [sp, #28]
 8005f26:	0035      	movs	r5, r6
 8005f28:	782b      	ldrb	r3, [r5, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <_svfiprintf_r+0x52>
 8005f2e:	2b25      	cmp	r3, #37	@ 0x25
 8005f30:	d148      	bne.n	8005fc4 <_svfiprintf_r+0xe4>
 8005f32:	1bab      	subs	r3, r5, r6
 8005f34:	9305      	str	r3, [sp, #20]
 8005f36:	42b5      	cmp	r5, r6
 8005f38:	d00b      	beq.n	8005f52 <_svfiprintf_r+0x72>
 8005f3a:	0032      	movs	r2, r6
 8005f3c:	0039      	movs	r1, r7
 8005f3e:	9803      	ldr	r0, [sp, #12]
 8005f40:	f7ff ff6e 	bl	8005e20 <__ssputs_r>
 8005f44:	3001      	adds	r0, #1
 8005f46:	d100      	bne.n	8005f4a <_svfiprintf_r+0x6a>
 8005f48:	e0ae      	b.n	80060a8 <_svfiprintf_r+0x1c8>
 8005f4a:	6963      	ldr	r3, [r4, #20]
 8005f4c:	9a05      	ldr	r2, [sp, #20]
 8005f4e:	189b      	adds	r3, r3, r2
 8005f50:	6163      	str	r3, [r4, #20]
 8005f52:	782b      	ldrb	r3, [r5, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d100      	bne.n	8005f5a <_svfiprintf_r+0x7a>
 8005f58:	e0a6      	b.n	80060a8 <_svfiprintf_r+0x1c8>
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	4252      	negs	r2, r2
 8005f60:	6062      	str	r2, [r4, #4]
 8005f62:	a904      	add	r1, sp, #16
 8005f64:	3254      	adds	r2, #84	@ 0x54
 8005f66:	1852      	adds	r2, r2, r1
 8005f68:	1c6e      	adds	r6, r5, #1
 8005f6a:	6023      	str	r3, [r4, #0]
 8005f6c:	60e3      	str	r3, [r4, #12]
 8005f6e:	60a3      	str	r3, [r4, #8]
 8005f70:	7013      	strb	r3, [r2, #0]
 8005f72:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005f74:	4b54      	ldr	r3, [pc, #336]	@ (80060c8 <_svfiprintf_r+0x1e8>)
 8005f76:	2205      	movs	r2, #5
 8005f78:	0018      	movs	r0, r3
 8005f7a:	7831      	ldrb	r1, [r6, #0]
 8005f7c:	9305      	str	r3, [sp, #20]
 8005f7e:	f000 fa3b 	bl	80063f8 <memchr>
 8005f82:	1c75      	adds	r5, r6, #1
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d11f      	bne.n	8005fc8 <_svfiprintf_r+0xe8>
 8005f88:	6822      	ldr	r2, [r4, #0]
 8005f8a:	06d3      	lsls	r3, r2, #27
 8005f8c:	d504      	bpl.n	8005f98 <_svfiprintf_r+0xb8>
 8005f8e:	2353      	movs	r3, #83	@ 0x53
 8005f90:	a904      	add	r1, sp, #16
 8005f92:	185b      	adds	r3, r3, r1
 8005f94:	2120      	movs	r1, #32
 8005f96:	7019      	strb	r1, [r3, #0]
 8005f98:	0713      	lsls	r3, r2, #28
 8005f9a:	d504      	bpl.n	8005fa6 <_svfiprintf_r+0xc6>
 8005f9c:	2353      	movs	r3, #83	@ 0x53
 8005f9e:	a904      	add	r1, sp, #16
 8005fa0:	185b      	adds	r3, r3, r1
 8005fa2:	212b      	movs	r1, #43	@ 0x2b
 8005fa4:	7019      	strb	r1, [r3, #0]
 8005fa6:	7833      	ldrb	r3, [r6, #0]
 8005fa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005faa:	d016      	beq.n	8005fda <_svfiprintf_r+0xfa>
 8005fac:	0035      	movs	r5, r6
 8005fae:	2100      	movs	r1, #0
 8005fb0:	200a      	movs	r0, #10
 8005fb2:	68e3      	ldr	r3, [r4, #12]
 8005fb4:	782a      	ldrb	r2, [r5, #0]
 8005fb6:	1c6e      	adds	r6, r5, #1
 8005fb8:	3a30      	subs	r2, #48	@ 0x30
 8005fba:	2a09      	cmp	r2, #9
 8005fbc:	d950      	bls.n	8006060 <_svfiprintf_r+0x180>
 8005fbe:	2900      	cmp	r1, #0
 8005fc0:	d111      	bne.n	8005fe6 <_svfiprintf_r+0x106>
 8005fc2:	e017      	b.n	8005ff4 <_svfiprintf_r+0x114>
 8005fc4:	3501      	adds	r5, #1
 8005fc6:	e7af      	b.n	8005f28 <_svfiprintf_r+0x48>
 8005fc8:	9b05      	ldr	r3, [sp, #20]
 8005fca:	6822      	ldr	r2, [r4, #0]
 8005fcc:	1ac0      	subs	r0, r0, r3
 8005fce:	2301      	movs	r3, #1
 8005fd0:	4083      	lsls	r3, r0
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	002e      	movs	r6, r5
 8005fd6:	6023      	str	r3, [r4, #0]
 8005fd8:	e7cc      	b.n	8005f74 <_svfiprintf_r+0x94>
 8005fda:	9b07      	ldr	r3, [sp, #28]
 8005fdc:	1d19      	adds	r1, r3, #4
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	9107      	str	r1, [sp, #28]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	db01      	blt.n	8005fea <_svfiprintf_r+0x10a>
 8005fe6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fe8:	e004      	b.n	8005ff4 <_svfiprintf_r+0x114>
 8005fea:	425b      	negs	r3, r3
 8005fec:	60e3      	str	r3, [r4, #12]
 8005fee:	2302      	movs	r3, #2
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	6023      	str	r3, [r4, #0]
 8005ff4:	782b      	ldrb	r3, [r5, #0]
 8005ff6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ff8:	d10c      	bne.n	8006014 <_svfiprintf_r+0x134>
 8005ffa:	786b      	ldrb	r3, [r5, #1]
 8005ffc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ffe:	d134      	bne.n	800606a <_svfiprintf_r+0x18a>
 8006000:	9b07      	ldr	r3, [sp, #28]
 8006002:	3502      	adds	r5, #2
 8006004:	1d1a      	adds	r2, r3, #4
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	9207      	str	r2, [sp, #28]
 800600a:	2b00      	cmp	r3, #0
 800600c:	da01      	bge.n	8006012 <_svfiprintf_r+0x132>
 800600e:	2301      	movs	r3, #1
 8006010:	425b      	negs	r3, r3
 8006012:	9309      	str	r3, [sp, #36]	@ 0x24
 8006014:	4e2d      	ldr	r6, [pc, #180]	@ (80060cc <_svfiprintf_r+0x1ec>)
 8006016:	2203      	movs	r2, #3
 8006018:	0030      	movs	r0, r6
 800601a:	7829      	ldrb	r1, [r5, #0]
 800601c:	f000 f9ec 	bl	80063f8 <memchr>
 8006020:	2800      	cmp	r0, #0
 8006022:	d006      	beq.n	8006032 <_svfiprintf_r+0x152>
 8006024:	2340      	movs	r3, #64	@ 0x40
 8006026:	1b80      	subs	r0, r0, r6
 8006028:	4083      	lsls	r3, r0
 800602a:	6822      	ldr	r2, [r4, #0]
 800602c:	3501      	adds	r5, #1
 800602e:	4313      	orrs	r3, r2
 8006030:	6023      	str	r3, [r4, #0]
 8006032:	7829      	ldrb	r1, [r5, #0]
 8006034:	2206      	movs	r2, #6
 8006036:	4826      	ldr	r0, [pc, #152]	@ (80060d0 <_svfiprintf_r+0x1f0>)
 8006038:	1c6e      	adds	r6, r5, #1
 800603a:	7621      	strb	r1, [r4, #24]
 800603c:	f000 f9dc 	bl	80063f8 <memchr>
 8006040:	2800      	cmp	r0, #0
 8006042:	d038      	beq.n	80060b6 <_svfiprintf_r+0x1d6>
 8006044:	4b23      	ldr	r3, [pc, #140]	@ (80060d4 <_svfiprintf_r+0x1f4>)
 8006046:	2b00      	cmp	r3, #0
 8006048:	d122      	bne.n	8006090 <_svfiprintf_r+0x1b0>
 800604a:	2207      	movs	r2, #7
 800604c:	9b07      	ldr	r3, [sp, #28]
 800604e:	3307      	adds	r3, #7
 8006050:	4393      	bics	r3, r2
 8006052:	3308      	adds	r3, #8
 8006054:	9307      	str	r3, [sp, #28]
 8006056:	6963      	ldr	r3, [r4, #20]
 8006058:	9a04      	ldr	r2, [sp, #16]
 800605a:	189b      	adds	r3, r3, r2
 800605c:	6163      	str	r3, [r4, #20]
 800605e:	e762      	b.n	8005f26 <_svfiprintf_r+0x46>
 8006060:	4343      	muls	r3, r0
 8006062:	0035      	movs	r5, r6
 8006064:	2101      	movs	r1, #1
 8006066:	189b      	adds	r3, r3, r2
 8006068:	e7a4      	b.n	8005fb4 <_svfiprintf_r+0xd4>
 800606a:	2300      	movs	r3, #0
 800606c:	200a      	movs	r0, #10
 800606e:	0019      	movs	r1, r3
 8006070:	3501      	adds	r5, #1
 8006072:	6063      	str	r3, [r4, #4]
 8006074:	782a      	ldrb	r2, [r5, #0]
 8006076:	1c6e      	adds	r6, r5, #1
 8006078:	3a30      	subs	r2, #48	@ 0x30
 800607a:	2a09      	cmp	r2, #9
 800607c:	d903      	bls.n	8006086 <_svfiprintf_r+0x1a6>
 800607e:	2b00      	cmp	r3, #0
 8006080:	d0c8      	beq.n	8006014 <_svfiprintf_r+0x134>
 8006082:	9109      	str	r1, [sp, #36]	@ 0x24
 8006084:	e7c6      	b.n	8006014 <_svfiprintf_r+0x134>
 8006086:	4341      	muls	r1, r0
 8006088:	0035      	movs	r5, r6
 800608a:	2301      	movs	r3, #1
 800608c:	1889      	adds	r1, r1, r2
 800608e:	e7f1      	b.n	8006074 <_svfiprintf_r+0x194>
 8006090:	aa07      	add	r2, sp, #28
 8006092:	9200      	str	r2, [sp, #0]
 8006094:	0021      	movs	r1, r4
 8006096:	003a      	movs	r2, r7
 8006098:	4b0f      	ldr	r3, [pc, #60]	@ (80060d8 <_svfiprintf_r+0x1f8>)
 800609a:	9803      	ldr	r0, [sp, #12]
 800609c:	e000      	b.n	80060a0 <_svfiprintf_r+0x1c0>
 800609e:	bf00      	nop
 80060a0:	9004      	str	r0, [sp, #16]
 80060a2:	9b04      	ldr	r3, [sp, #16]
 80060a4:	3301      	adds	r3, #1
 80060a6:	d1d6      	bne.n	8006056 <_svfiprintf_r+0x176>
 80060a8:	89bb      	ldrh	r3, [r7, #12]
 80060aa:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80060ac:	065b      	lsls	r3, r3, #25
 80060ae:	d500      	bpl.n	80060b2 <_svfiprintf_r+0x1d2>
 80060b0:	e72c      	b.n	8005f0c <_svfiprintf_r+0x2c>
 80060b2:	b021      	add	sp, #132	@ 0x84
 80060b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060b6:	aa07      	add	r2, sp, #28
 80060b8:	9200      	str	r2, [sp, #0]
 80060ba:	0021      	movs	r1, r4
 80060bc:	003a      	movs	r2, r7
 80060be:	4b06      	ldr	r3, [pc, #24]	@ (80060d8 <_svfiprintf_r+0x1f8>)
 80060c0:	9803      	ldr	r0, [sp, #12]
 80060c2:	f000 f87b 	bl	80061bc <_printf_i>
 80060c6:	e7eb      	b.n	80060a0 <_svfiprintf_r+0x1c0>
 80060c8:	08006e9c 	.word	0x08006e9c
 80060cc:	08006ea2 	.word	0x08006ea2
 80060d0:	08006ea6 	.word	0x08006ea6
 80060d4:	00000000 	.word	0x00000000
 80060d8:	08005e21 	.word	0x08005e21

080060dc <_printf_common>:
 80060dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060de:	0016      	movs	r6, r2
 80060e0:	9301      	str	r3, [sp, #4]
 80060e2:	688a      	ldr	r2, [r1, #8]
 80060e4:	690b      	ldr	r3, [r1, #16]
 80060e6:	000c      	movs	r4, r1
 80060e8:	9000      	str	r0, [sp, #0]
 80060ea:	4293      	cmp	r3, r2
 80060ec:	da00      	bge.n	80060f0 <_printf_common+0x14>
 80060ee:	0013      	movs	r3, r2
 80060f0:	0022      	movs	r2, r4
 80060f2:	6033      	str	r3, [r6, #0]
 80060f4:	3243      	adds	r2, #67	@ 0x43
 80060f6:	7812      	ldrb	r2, [r2, #0]
 80060f8:	2a00      	cmp	r2, #0
 80060fa:	d001      	beq.n	8006100 <_printf_common+0x24>
 80060fc:	3301      	adds	r3, #1
 80060fe:	6033      	str	r3, [r6, #0]
 8006100:	6823      	ldr	r3, [r4, #0]
 8006102:	069b      	lsls	r3, r3, #26
 8006104:	d502      	bpl.n	800610c <_printf_common+0x30>
 8006106:	6833      	ldr	r3, [r6, #0]
 8006108:	3302      	adds	r3, #2
 800610a:	6033      	str	r3, [r6, #0]
 800610c:	6822      	ldr	r2, [r4, #0]
 800610e:	2306      	movs	r3, #6
 8006110:	0015      	movs	r5, r2
 8006112:	401d      	ands	r5, r3
 8006114:	421a      	tst	r2, r3
 8006116:	d027      	beq.n	8006168 <_printf_common+0x8c>
 8006118:	0023      	movs	r3, r4
 800611a:	3343      	adds	r3, #67	@ 0x43
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	1e5a      	subs	r2, r3, #1
 8006120:	4193      	sbcs	r3, r2
 8006122:	6822      	ldr	r2, [r4, #0]
 8006124:	0692      	lsls	r2, r2, #26
 8006126:	d430      	bmi.n	800618a <_printf_common+0xae>
 8006128:	0022      	movs	r2, r4
 800612a:	9901      	ldr	r1, [sp, #4]
 800612c:	9800      	ldr	r0, [sp, #0]
 800612e:	9d08      	ldr	r5, [sp, #32]
 8006130:	3243      	adds	r2, #67	@ 0x43
 8006132:	47a8      	blx	r5
 8006134:	3001      	adds	r0, #1
 8006136:	d025      	beq.n	8006184 <_printf_common+0xa8>
 8006138:	2206      	movs	r2, #6
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	2500      	movs	r5, #0
 800613e:	4013      	ands	r3, r2
 8006140:	2b04      	cmp	r3, #4
 8006142:	d105      	bne.n	8006150 <_printf_common+0x74>
 8006144:	6833      	ldr	r3, [r6, #0]
 8006146:	68e5      	ldr	r5, [r4, #12]
 8006148:	1aed      	subs	r5, r5, r3
 800614a:	43eb      	mvns	r3, r5
 800614c:	17db      	asrs	r3, r3, #31
 800614e:	401d      	ands	r5, r3
 8006150:	68a3      	ldr	r3, [r4, #8]
 8006152:	6922      	ldr	r2, [r4, #16]
 8006154:	4293      	cmp	r3, r2
 8006156:	dd01      	ble.n	800615c <_printf_common+0x80>
 8006158:	1a9b      	subs	r3, r3, r2
 800615a:	18ed      	adds	r5, r5, r3
 800615c:	2600      	movs	r6, #0
 800615e:	42b5      	cmp	r5, r6
 8006160:	d120      	bne.n	80061a4 <_printf_common+0xc8>
 8006162:	2000      	movs	r0, #0
 8006164:	e010      	b.n	8006188 <_printf_common+0xac>
 8006166:	3501      	adds	r5, #1
 8006168:	68e3      	ldr	r3, [r4, #12]
 800616a:	6832      	ldr	r2, [r6, #0]
 800616c:	1a9b      	subs	r3, r3, r2
 800616e:	42ab      	cmp	r3, r5
 8006170:	ddd2      	ble.n	8006118 <_printf_common+0x3c>
 8006172:	0022      	movs	r2, r4
 8006174:	2301      	movs	r3, #1
 8006176:	9901      	ldr	r1, [sp, #4]
 8006178:	9800      	ldr	r0, [sp, #0]
 800617a:	9f08      	ldr	r7, [sp, #32]
 800617c:	3219      	adds	r2, #25
 800617e:	47b8      	blx	r7
 8006180:	3001      	adds	r0, #1
 8006182:	d1f0      	bne.n	8006166 <_printf_common+0x8a>
 8006184:	2001      	movs	r0, #1
 8006186:	4240      	negs	r0, r0
 8006188:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800618a:	2030      	movs	r0, #48	@ 0x30
 800618c:	18e1      	adds	r1, r4, r3
 800618e:	3143      	adds	r1, #67	@ 0x43
 8006190:	7008      	strb	r0, [r1, #0]
 8006192:	0021      	movs	r1, r4
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	3145      	adds	r1, #69	@ 0x45
 8006198:	7809      	ldrb	r1, [r1, #0]
 800619a:	18a2      	adds	r2, r4, r2
 800619c:	3243      	adds	r2, #67	@ 0x43
 800619e:	3302      	adds	r3, #2
 80061a0:	7011      	strb	r1, [r2, #0]
 80061a2:	e7c1      	b.n	8006128 <_printf_common+0x4c>
 80061a4:	0022      	movs	r2, r4
 80061a6:	2301      	movs	r3, #1
 80061a8:	9901      	ldr	r1, [sp, #4]
 80061aa:	9800      	ldr	r0, [sp, #0]
 80061ac:	9f08      	ldr	r7, [sp, #32]
 80061ae:	321a      	adds	r2, #26
 80061b0:	47b8      	blx	r7
 80061b2:	3001      	adds	r0, #1
 80061b4:	d0e6      	beq.n	8006184 <_printf_common+0xa8>
 80061b6:	3601      	adds	r6, #1
 80061b8:	e7d1      	b.n	800615e <_printf_common+0x82>
	...

080061bc <_printf_i>:
 80061bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061be:	b08b      	sub	sp, #44	@ 0x2c
 80061c0:	9206      	str	r2, [sp, #24]
 80061c2:	000a      	movs	r2, r1
 80061c4:	3243      	adds	r2, #67	@ 0x43
 80061c6:	9307      	str	r3, [sp, #28]
 80061c8:	9005      	str	r0, [sp, #20]
 80061ca:	9203      	str	r2, [sp, #12]
 80061cc:	7e0a      	ldrb	r2, [r1, #24]
 80061ce:	000c      	movs	r4, r1
 80061d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80061d2:	2a78      	cmp	r2, #120	@ 0x78
 80061d4:	d809      	bhi.n	80061ea <_printf_i+0x2e>
 80061d6:	2a62      	cmp	r2, #98	@ 0x62
 80061d8:	d80b      	bhi.n	80061f2 <_printf_i+0x36>
 80061da:	2a00      	cmp	r2, #0
 80061dc:	d100      	bne.n	80061e0 <_printf_i+0x24>
 80061de:	e0ba      	b.n	8006356 <_printf_i+0x19a>
 80061e0:	497a      	ldr	r1, [pc, #488]	@ (80063cc <_printf_i+0x210>)
 80061e2:	9104      	str	r1, [sp, #16]
 80061e4:	2a58      	cmp	r2, #88	@ 0x58
 80061e6:	d100      	bne.n	80061ea <_printf_i+0x2e>
 80061e8:	e08e      	b.n	8006308 <_printf_i+0x14c>
 80061ea:	0025      	movs	r5, r4
 80061ec:	3542      	adds	r5, #66	@ 0x42
 80061ee:	702a      	strb	r2, [r5, #0]
 80061f0:	e022      	b.n	8006238 <_printf_i+0x7c>
 80061f2:	0010      	movs	r0, r2
 80061f4:	3863      	subs	r0, #99	@ 0x63
 80061f6:	2815      	cmp	r0, #21
 80061f8:	d8f7      	bhi.n	80061ea <_printf_i+0x2e>
 80061fa:	f7f9 ff85 	bl	8000108 <__gnu_thumb1_case_shi>
 80061fe:	0016      	.short	0x0016
 8006200:	fff6001f 	.word	0xfff6001f
 8006204:	fff6fff6 	.word	0xfff6fff6
 8006208:	001ffff6 	.word	0x001ffff6
 800620c:	fff6fff6 	.word	0xfff6fff6
 8006210:	fff6fff6 	.word	0xfff6fff6
 8006214:	0036009f 	.word	0x0036009f
 8006218:	fff6007e 	.word	0xfff6007e
 800621c:	00b0fff6 	.word	0x00b0fff6
 8006220:	0036fff6 	.word	0x0036fff6
 8006224:	fff6fff6 	.word	0xfff6fff6
 8006228:	0082      	.short	0x0082
 800622a:	0025      	movs	r5, r4
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	3542      	adds	r5, #66	@ 0x42
 8006230:	1d11      	adds	r1, r2, #4
 8006232:	6019      	str	r1, [r3, #0]
 8006234:	6813      	ldr	r3, [r2, #0]
 8006236:	702b      	strb	r3, [r5, #0]
 8006238:	2301      	movs	r3, #1
 800623a:	e09e      	b.n	800637a <_printf_i+0x1be>
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	6809      	ldr	r1, [r1, #0]
 8006240:	1d02      	adds	r2, r0, #4
 8006242:	060d      	lsls	r5, r1, #24
 8006244:	d50b      	bpl.n	800625e <_printf_i+0xa2>
 8006246:	6806      	ldr	r6, [r0, #0]
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	2e00      	cmp	r6, #0
 800624c:	da03      	bge.n	8006256 <_printf_i+0x9a>
 800624e:	232d      	movs	r3, #45	@ 0x2d
 8006250:	9a03      	ldr	r2, [sp, #12]
 8006252:	4276      	negs	r6, r6
 8006254:	7013      	strb	r3, [r2, #0]
 8006256:	4b5d      	ldr	r3, [pc, #372]	@ (80063cc <_printf_i+0x210>)
 8006258:	270a      	movs	r7, #10
 800625a:	9304      	str	r3, [sp, #16]
 800625c:	e018      	b.n	8006290 <_printf_i+0xd4>
 800625e:	6806      	ldr	r6, [r0, #0]
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	0649      	lsls	r1, r1, #25
 8006264:	d5f1      	bpl.n	800624a <_printf_i+0x8e>
 8006266:	b236      	sxth	r6, r6
 8006268:	e7ef      	b.n	800624a <_printf_i+0x8e>
 800626a:	6808      	ldr	r0, [r1, #0]
 800626c:	6819      	ldr	r1, [r3, #0]
 800626e:	c940      	ldmia	r1!, {r6}
 8006270:	0605      	lsls	r5, r0, #24
 8006272:	d402      	bmi.n	800627a <_printf_i+0xbe>
 8006274:	0640      	lsls	r0, r0, #25
 8006276:	d500      	bpl.n	800627a <_printf_i+0xbe>
 8006278:	b2b6      	uxth	r6, r6
 800627a:	6019      	str	r1, [r3, #0]
 800627c:	4b53      	ldr	r3, [pc, #332]	@ (80063cc <_printf_i+0x210>)
 800627e:	270a      	movs	r7, #10
 8006280:	9304      	str	r3, [sp, #16]
 8006282:	2a6f      	cmp	r2, #111	@ 0x6f
 8006284:	d100      	bne.n	8006288 <_printf_i+0xcc>
 8006286:	3f02      	subs	r7, #2
 8006288:	0023      	movs	r3, r4
 800628a:	2200      	movs	r2, #0
 800628c:	3343      	adds	r3, #67	@ 0x43
 800628e:	701a      	strb	r2, [r3, #0]
 8006290:	6863      	ldr	r3, [r4, #4]
 8006292:	60a3      	str	r3, [r4, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	db06      	blt.n	80062a6 <_printf_i+0xea>
 8006298:	2104      	movs	r1, #4
 800629a:	6822      	ldr	r2, [r4, #0]
 800629c:	9d03      	ldr	r5, [sp, #12]
 800629e:	438a      	bics	r2, r1
 80062a0:	6022      	str	r2, [r4, #0]
 80062a2:	4333      	orrs	r3, r6
 80062a4:	d00c      	beq.n	80062c0 <_printf_i+0x104>
 80062a6:	9d03      	ldr	r5, [sp, #12]
 80062a8:	0030      	movs	r0, r6
 80062aa:	0039      	movs	r1, r7
 80062ac:	f7f9 ffbc 	bl	8000228 <__aeabi_uidivmod>
 80062b0:	9b04      	ldr	r3, [sp, #16]
 80062b2:	3d01      	subs	r5, #1
 80062b4:	5c5b      	ldrb	r3, [r3, r1]
 80062b6:	702b      	strb	r3, [r5, #0]
 80062b8:	0033      	movs	r3, r6
 80062ba:	0006      	movs	r6, r0
 80062bc:	429f      	cmp	r7, r3
 80062be:	d9f3      	bls.n	80062a8 <_printf_i+0xec>
 80062c0:	2f08      	cmp	r7, #8
 80062c2:	d109      	bne.n	80062d8 <_printf_i+0x11c>
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	07db      	lsls	r3, r3, #31
 80062c8:	d506      	bpl.n	80062d8 <_printf_i+0x11c>
 80062ca:	6862      	ldr	r2, [r4, #4]
 80062cc:	6923      	ldr	r3, [r4, #16]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	dc02      	bgt.n	80062d8 <_printf_i+0x11c>
 80062d2:	2330      	movs	r3, #48	@ 0x30
 80062d4:	3d01      	subs	r5, #1
 80062d6:	702b      	strb	r3, [r5, #0]
 80062d8:	9b03      	ldr	r3, [sp, #12]
 80062da:	1b5b      	subs	r3, r3, r5
 80062dc:	6123      	str	r3, [r4, #16]
 80062de:	9b07      	ldr	r3, [sp, #28]
 80062e0:	0021      	movs	r1, r4
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	9805      	ldr	r0, [sp, #20]
 80062e6:	9b06      	ldr	r3, [sp, #24]
 80062e8:	aa09      	add	r2, sp, #36	@ 0x24
 80062ea:	f7ff fef7 	bl	80060dc <_printf_common>
 80062ee:	3001      	adds	r0, #1
 80062f0:	d148      	bne.n	8006384 <_printf_i+0x1c8>
 80062f2:	2001      	movs	r0, #1
 80062f4:	4240      	negs	r0, r0
 80062f6:	b00b      	add	sp, #44	@ 0x2c
 80062f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062fa:	2220      	movs	r2, #32
 80062fc:	6809      	ldr	r1, [r1, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	6022      	str	r2, [r4, #0]
 8006302:	2278      	movs	r2, #120	@ 0x78
 8006304:	4932      	ldr	r1, [pc, #200]	@ (80063d0 <_printf_i+0x214>)
 8006306:	9104      	str	r1, [sp, #16]
 8006308:	0021      	movs	r1, r4
 800630a:	3145      	adds	r1, #69	@ 0x45
 800630c:	700a      	strb	r2, [r1, #0]
 800630e:	6819      	ldr	r1, [r3, #0]
 8006310:	6822      	ldr	r2, [r4, #0]
 8006312:	c940      	ldmia	r1!, {r6}
 8006314:	0610      	lsls	r0, r2, #24
 8006316:	d402      	bmi.n	800631e <_printf_i+0x162>
 8006318:	0650      	lsls	r0, r2, #25
 800631a:	d500      	bpl.n	800631e <_printf_i+0x162>
 800631c:	b2b6      	uxth	r6, r6
 800631e:	6019      	str	r1, [r3, #0]
 8006320:	07d3      	lsls	r3, r2, #31
 8006322:	d502      	bpl.n	800632a <_printf_i+0x16e>
 8006324:	2320      	movs	r3, #32
 8006326:	4313      	orrs	r3, r2
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	2e00      	cmp	r6, #0
 800632c:	d001      	beq.n	8006332 <_printf_i+0x176>
 800632e:	2710      	movs	r7, #16
 8006330:	e7aa      	b.n	8006288 <_printf_i+0xcc>
 8006332:	2220      	movs	r2, #32
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	4393      	bics	r3, r2
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	e7f8      	b.n	800632e <_printf_i+0x172>
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	680d      	ldr	r5, [r1, #0]
 8006340:	1d10      	adds	r0, r2, #4
 8006342:	6949      	ldr	r1, [r1, #20]
 8006344:	6018      	str	r0, [r3, #0]
 8006346:	6813      	ldr	r3, [r2, #0]
 8006348:	062e      	lsls	r6, r5, #24
 800634a:	d501      	bpl.n	8006350 <_printf_i+0x194>
 800634c:	6019      	str	r1, [r3, #0]
 800634e:	e002      	b.n	8006356 <_printf_i+0x19a>
 8006350:	066d      	lsls	r5, r5, #25
 8006352:	d5fb      	bpl.n	800634c <_printf_i+0x190>
 8006354:	8019      	strh	r1, [r3, #0]
 8006356:	2300      	movs	r3, #0
 8006358:	9d03      	ldr	r5, [sp, #12]
 800635a:	6123      	str	r3, [r4, #16]
 800635c:	e7bf      	b.n	80062de <_printf_i+0x122>
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	1d11      	adds	r1, r2, #4
 8006362:	6019      	str	r1, [r3, #0]
 8006364:	6815      	ldr	r5, [r2, #0]
 8006366:	2100      	movs	r1, #0
 8006368:	0028      	movs	r0, r5
 800636a:	6862      	ldr	r2, [r4, #4]
 800636c:	f000 f844 	bl	80063f8 <memchr>
 8006370:	2800      	cmp	r0, #0
 8006372:	d001      	beq.n	8006378 <_printf_i+0x1bc>
 8006374:	1b40      	subs	r0, r0, r5
 8006376:	6060      	str	r0, [r4, #4]
 8006378:	6863      	ldr	r3, [r4, #4]
 800637a:	6123      	str	r3, [r4, #16]
 800637c:	2300      	movs	r3, #0
 800637e:	9a03      	ldr	r2, [sp, #12]
 8006380:	7013      	strb	r3, [r2, #0]
 8006382:	e7ac      	b.n	80062de <_printf_i+0x122>
 8006384:	002a      	movs	r2, r5
 8006386:	6923      	ldr	r3, [r4, #16]
 8006388:	9906      	ldr	r1, [sp, #24]
 800638a:	9805      	ldr	r0, [sp, #20]
 800638c:	9d07      	ldr	r5, [sp, #28]
 800638e:	47a8      	blx	r5
 8006390:	3001      	adds	r0, #1
 8006392:	d0ae      	beq.n	80062f2 <_printf_i+0x136>
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	079b      	lsls	r3, r3, #30
 8006398:	d415      	bmi.n	80063c6 <_printf_i+0x20a>
 800639a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800639c:	68e0      	ldr	r0, [r4, #12]
 800639e:	4298      	cmp	r0, r3
 80063a0:	daa9      	bge.n	80062f6 <_printf_i+0x13a>
 80063a2:	0018      	movs	r0, r3
 80063a4:	e7a7      	b.n	80062f6 <_printf_i+0x13a>
 80063a6:	0022      	movs	r2, r4
 80063a8:	2301      	movs	r3, #1
 80063aa:	9906      	ldr	r1, [sp, #24]
 80063ac:	9805      	ldr	r0, [sp, #20]
 80063ae:	9e07      	ldr	r6, [sp, #28]
 80063b0:	3219      	adds	r2, #25
 80063b2:	47b0      	blx	r6
 80063b4:	3001      	adds	r0, #1
 80063b6:	d09c      	beq.n	80062f2 <_printf_i+0x136>
 80063b8:	3501      	adds	r5, #1
 80063ba:	68e3      	ldr	r3, [r4, #12]
 80063bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063be:	1a9b      	subs	r3, r3, r2
 80063c0:	42ab      	cmp	r3, r5
 80063c2:	dcf0      	bgt.n	80063a6 <_printf_i+0x1ea>
 80063c4:	e7e9      	b.n	800639a <_printf_i+0x1de>
 80063c6:	2500      	movs	r5, #0
 80063c8:	e7f7      	b.n	80063ba <_printf_i+0x1fe>
 80063ca:	46c0      	nop			@ (mov r8, r8)
 80063cc:	08006ead 	.word	0x08006ead
 80063d0:	08006ebe 	.word	0x08006ebe

080063d4 <_sbrk_r>:
 80063d4:	2300      	movs	r3, #0
 80063d6:	b570      	push	{r4, r5, r6, lr}
 80063d8:	4d06      	ldr	r5, [pc, #24]	@ (80063f4 <_sbrk_r+0x20>)
 80063da:	0004      	movs	r4, r0
 80063dc:	0008      	movs	r0, r1
 80063de:	602b      	str	r3, [r5, #0]
 80063e0:	f7fb fcd4 	bl	8001d8c <_sbrk>
 80063e4:	1c43      	adds	r3, r0, #1
 80063e6:	d103      	bne.n	80063f0 <_sbrk_r+0x1c>
 80063e8:	682b      	ldr	r3, [r5, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d000      	beq.n	80063f0 <_sbrk_r+0x1c>
 80063ee:	6023      	str	r3, [r4, #0]
 80063f0:	bd70      	pop	{r4, r5, r6, pc}
 80063f2:	46c0      	nop			@ (mov r8, r8)
 80063f4:	20000604 	.word	0x20000604

080063f8 <memchr>:
 80063f8:	b2c9      	uxtb	r1, r1
 80063fa:	1882      	adds	r2, r0, r2
 80063fc:	4290      	cmp	r0, r2
 80063fe:	d101      	bne.n	8006404 <memchr+0xc>
 8006400:	2000      	movs	r0, #0
 8006402:	4770      	bx	lr
 8006404:	7803      	ldrb	r3, [r0, #0]
 8006406:	428b      	cmp	r3, r1
 8006408:	d0fb      	beq.n	8006402 <memchr+0xa>
 800640a:	3001      	adds	r0, #1
 800640c:	e7f6      	b.n	80063fc <memchr+0x4>

0800640e <_realloc_r>:
 800640e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006410:	0006      	movs	r6, r0
 8006412:	000c      	movs	r4, r1
 8006414:	0015      	movs	r5, r2
 8006416:	2900      	cmp	r1, #0
 8006418:	d105      	bne.n	8006426 <_realloc_r+0x18>
 800641a:	0011      	movs	r1, r2
 800641c:	f7ff fc70 	bl	8005d00 <_malloc_r>
 8006420:	0004      	movs	r4, r0
 8006422:	0020      	movs	r0, r4
 8006424:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006426:	2a00      	cmp	r2, #0
 8006428:	d103      	bne.n	8006432 <_realloc_r+0x24>
 800642a:	f7ff fbfd 	bl	8005c28 <_free_r>
 800642e:	002c      	movs	r4, r5
 8006430:	e7f7      	b.n	8006422 <_realloc_r+0x14>
 8006432:	f000 f81c 	bl	800646e <_malloc_usable_size_r>
 8006436:	0007      	movs	r7, r0
 8006438:	4285      	cmp	r5, r0
 800643a:	d802      	bhi.n	8006442 <_realloc_r+0x34>
 800643c:	0843      	lsrs	r3, r0, #1
 800643e:	42ab      	cmp	r3, r5
 8006440:	d3ef      	bcc.n	8006422 <_realloc_r+0x14>
 8006442:	0029      	movs	r1, r5
 8006444:	0030      	movs	r0, r6
 8006446:	f7ff fc5b 	bl	8005d00 <_malloc_r>
 800644a:	9001      	str	r0, [sp, #4]
 800644c:	2800      	cmp	r0, #0
 800644e:	d101      	bne.n	8006454 <_realloc_r+0x46>
 8006450:	9c01      	ldr	r4, [sp, #4]
 8006452:	e7e6      	b.n	8006422 <_realloc_r+0x14>
 8006454:	002a      	movs	r2, r5
 8006456:	42bd      	cmp	r5, r7
 8006458:	d900      	bls.n	800645c <_realloc_r+0x4e>
 800645a:	003a      	movs	r2, r7
 800645c:	0021      	movs	r1, r4
 800645e:	9801      	ldr	r0, [sp, #4]
 8006460:	f7ff fbd8 	bl	8005c14 <memcpy>
 8006464:	0021      	movs	r1, r4
 8006466:	0030      	movs	r0, r6
 8006468:	f7ff fbde 	bl	8005c28 <_free_r>
 800646c:	e7f0      	b.n	8006450 <_realloc_r+0x42>

0800646e <_malloc_usable_size_r>:
 800646e:	1f0b      	subs	r3, r1, #4
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	1f18      	subs	r0, r3, #4
 8006474:	2b00      	cmp	r3, #0
 8006476:	da01      	bge.n	800647c <_malloc_usable_size_r+0xe>
 8006478:	580b      	ldr	r3, [r1, r0]
 800647a:	18c0      	adds	r0, r0, r3
 800647c:	4770      	bx	lr
	...

08006480 <_init>:
 8006480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006482:	46c0      	nop			@ (mov r8, r8)
 8006484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006486:	bc08      	pop	{r3}
 8006488:	469e      	mov	lr, r3
 800648a:	4770      	bx	lr

0800648c <_fini>:
 800648c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648e:	46c0      	nop			@ (mov r8, r8)
 8006490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006492:	bc08      	pop	{r3}
 8006494:	469e      	mov	lr, r3
 8006496:	4770      	bx	lr
